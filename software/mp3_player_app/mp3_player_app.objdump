
mp3_player_app.elf:     file format elf32-littlenios2
mp3_player_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000063d4 memsz 0x000063d4 flags r-x
    LOAD off    0x000073f4 vaddr 0x000163f4 paddr 0x00017748 align 2**12
         filesz 0x00001354 memsz 0x00001354 flags rw-
    LOAD off    0x00008a9c vaddr 0x00018a9c paddr 0x00018a9c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e78  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  000160a8  000160a8  000070a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001354  000163f4  00017748  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00018a9c  00018a9c  00008a9c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00018bbc  00018bbc  00008748  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000878  00000000  00000000  00008770  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c5b7  00000000  00000000  00008fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004429  00000000  00000000  0001559f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000049cf  00000000  00000000  000199c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001634  00000000  00000000  0001e398  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f9b  00000000  00000000  0001f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002e3e  00000000  00000000  00022967  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000257a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000600  00000000  00000000  000257e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000285a2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000285a5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000285b1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000285b2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000285b3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000285b7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000285bb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000285bf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000285ca  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000285d5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000285e0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000285ed  2**0
                  CONTENTS, READONLY
 29 .jdi          000065ed  00000000  00000000  00028610  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006073f  00000000  00000000  0002ebfd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
000160a8 l    d  .rodata	00000000 .rodata
000163f4 l    d  .rwdata	00000000 .rwdata
00018a9c l    d  .bss	00000000 .bss
00018bbc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mp3_player_app_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000117d0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000163f4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00011e94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00011ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012138 l     F .text	00000034 alt_dev_reg
000164d4 l     O .rwdata	00000038 i2c_0
0001650c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00012200 l     F .text	00000110 optional_irq_callback
00012360 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001403c l     F .text	0000020c altera_avalon_jtag_uart_irq
00014248 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00014b04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00014c38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014c64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015154 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000152b4 l     F .text	0000003c alt_get_errno
000152f0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018ab8 g     O .bss	00000004 alt_instruction_exception_handler
00011f80 g     F .text	0000007c alt_main
00011720 g     F .text	00000080 _puts_r
00018abc g     O .bss	00000100 alt_irq
00017748 g       *ABS*	00000000 __flash_rwdata_start
000116d4 g     F .text	0000004c printf
00012a58 g     F .text	000000a8 alt_avalon_i2c_rx_read
00013c70 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
000127dc g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
000134c0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
000114ac g     F .text	00000070 .hidden __fixsfsi
000159c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00018a9c g     O .bss	00000004 errno
00018aa4 g     O .bss	00000004 alt_argv
0001f714 g       *ABS*	00000000 _gp
00013cb4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00010fc8 g     F .text	000004e4 .hidden __subsf3
0001296c g     F .text	00000044 alt_avalon_i2c_is_busy
00017594 g     O .rwdata	00000180 alt_fd_list
00012710 g     F .text	000000cc alt_avalon_i2c_master_config_set
00014e04 g     F .text	00000090 alt_find_dev
00015cb8 g     F .text	00000028 memcpy
00015238 g     F .text	0000007c alt_io_redirect
000160a8 g       *ABS*	00000000 __DTOR_END__
00013300 g     F .text	000001c0 alt_avalon_i2c_master_transmit
000117a0 g     F .text	00000014 puts
00015bb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014440 g     F .text	0000021c altera_avalon_jtag_uart_read
00011698 g     F .text	0000003c _printf_r
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010a20 g     F .text	00000064 .hidden __udivsi3
0001257c g     F .text	00000098 alt_avalon_i2c_enable
00013ba4 g     F .text	00000068 alt_avalon_i2c_int_disable
0001026c g     F .text	000000c4 SGTL5000_Reg_Rd
00017734 g     O .rwdata	00000004 alt_max_fd
000136cc g     F .text	00000210 alt_avalon_i2c_master_receive
00013c0c g     F .text	00000064 alt_avalon_i2c_int_enable
00017714 g     O .rwdata	00000004 _global_impure_ptr
00018bbc g       *ABS*	00000000 __bss_end
00015064 g     F .text	000000f0 alt_iic_isr_register
000158c0 g     F .text	00000108 alt_tick
00013acc g     F .text	00000058 alt_avalon_i2c_int_status_get
00015018 g     F .text	0000004c alt_ic_irq_enabled
00015824 g     F .text	0000009c alt_alarm_stop
000123fc g     F .text	00000054 alt_avalon_i2c_register_callback
00018aac g     O .bss	00000004 alt_irq_active
00012450 g     F .text	000000ec alt_avalon_i2c_init
000100fc g     F .exceptions	000000d4 alt_irq_handler
0001756c g     O .rwdata	00000028 alt_dev_null
00014c18 g     F .text	00000020 alt_dcache_flush_all
00017748 g       *ABS*	00000000 __ram_rwdata_end
0001772c g     O .rwdata	00000008 alt_dev_list
00012038 g     F .text	00000100 write
00015d34 g     F .text	00000058 _putc_r
00012d8c g     F .text	0000004c alt_avalon_i2c_check_arblost
00010adc g     F .text	000000bc .hidden __gtsf2
00013b68 g     F .text	0000003c alt_avalon_i2c_int_clear
000163f4 g       *ABS*	00000000 __ram_rodata_end
0001771c g     O .rwdata	00000008 alt_avalon_i2c_list
00010a84 g     F .text	00000058 .hidden __umodsi3
00018bbc g       *ABS*	00000000 end
00013f7c g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001253c g     F .text	00000040 alt_avalon_i2c_open
000160a8 g       *ABS*	00000000 __CTOR_LIST__
0001fa00 g       *ABS*	00000000 __alt_stack_pointer
00012f14 g     F .text	000000e8 alt_avalon_i2c_master_tx
0001160c g     F .text	00000064 .hidden __clzsi2
0001465c g     F .text	00000224 altera_avalon_jtag_uart_write
0001183c g     F .text	0000052c ___vfprintf_internal_r
00015538 g     F .text	0000022c alt_printf
00015ee4 g     F .text	00000190 __call_exitprocs
00012310 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00010230 g     F .text	0000003c _start
00018ab0 g     O .bss	00000004 _alt_tick_rate
000138dc g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00013d00 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00018ab4 g     O .bss	00000004 _alt_nticks
000121a4 g     F .text	0000005c alt_sys_init
00015d8c g     F .text	00000158 __register_exitproc
00013138 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000142e8 g     F .text	00000068 altera_avalon_jtag_uart_close
00011670 g     F .text	00000028 .hidden __mulsi3
000163f4 g       *ABS*	00000000 __ram_rwdata_start
000160a8 g       *ABS*	00000000 __ram_rodata_start
000103f4 g     F .text	00000024 clearLED
00013e18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015af4 g     F .text	000000c4 alt_get_fd
000149ac g     F .text	00000158 alt_busy_sleep
00015c88 g     F .text	00000030 memcmp
000129b0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00013ed8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018bbc g       *ABS*	00000000 __alt_stack_base
00013f28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000159ec g     F .text	00000108 alt_find_file
00014ca0 g     F .text	000000a4 alt_dev_llist_insert
00012dd8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00012d40 g     F .text	0000004c alt_avalon_i2c_check_nack
00011d84 g     F .text	000000b8 __sfvwrite_small_dev
00018a9c g       *ABS*	00000000 __bss_start
000105c8 g     F .text	00000300 main
00012d0c g     F .text	00000034 alt_avalon_i2c_master_target_set
00018aa8 g     O .bss	00000004 alt_envp
00013e78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00013b24 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00017738 g     O .rwdata	00000004 alt_errno
00015ce0 g     F .text	00000054 putc
00010928 g     F .text	00000084 .hidden __divsi3
000104dc g     F .text	000000ec printSignedHex1
000160a8 g       *ABS*	00000000 __CTOR_END__
00010b98 g     F .text	00000430 .hidden __mulsf3
000160a8 g       *ABS*	00000000 __flash_rodata_start
000160a8 g       *ABS*	00000000 __DTOR_LIST__
00010330 g     F .text	000000a0 SGTL5000_Reg_Wr
0001216c g     F .text	00000038 alt_irq_init
000157a0 g     F .text	00000084 alt_release_fd
00016290 g     O .rodata	00000100 .hidden __clz_tab
00015c54 g     F .text	00000014 atexit
00010adc g     F .text	000000bc .hidden __gesf2
00011e3c g     F .text	00000058 _write_r
00017718 g     O .rwdata	00000004 _impure_ptr
00018aa0 g     O .bss	00000004 alt_argc
00014da4 g     F .text	00000060 _do_dtors
00012cd4 g     F .text	00000038 alt_avalon_i2c_master_target_get
00012be4 g     F .text	000000f0 alt_avalon_i2c_send_address
00010020 g       .exceptions	00000000 alt_irq_entry
00017724 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000103d0 g     F .text	00000024 setLED
00013db0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00014eb4 g     F .text	00000050 alt_ic_isr_register
00012614 g     F .text	0000004c alt_avalon_i2c_disable
00017748 g       *ABS*	00000000 _edata
00018bbc g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00014350 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012660 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00014f8c g     F .text	0000008c alt_ic_irq_disable
00015c68 g     F .text	00000020 exit
0001151c g     F .text	000000f0 .hidden __floatunsisf
000109ac g     F .text	00000074 .hidden __modsi3
0001fa00 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012870 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00012b00 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000108c8 g     F .text	00000060 .hidden __fixunssfsi
00016074 g     F .text	00000034 _exit
00014880 g     F .text	0000012c alt_alarm_start
00010418 g     F .text	000000c4 printSignedHex0
000117b4 g     F .text	0000001c strlen
000153dc g     F .text	0000015c open
00015764 g     F .text	0000003c alt_putchar
00014e94 g     F .text	00000020 alt_icache_flush_all
0001773c g     O .rwdata	00000004 alt_priority_mask
00014f04 g     F .text	00000088 alt_ic_irq_enable
00011d68 g     F .text	0000001c __vfprintf_internal
00017740 g     O .rwdata	00000008 alt_alarm_list
00014d44 g     F .text	00000060 _do_ctors
00014b40 g     F .text	000000d8 close
00013d64 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00011efc g     F .text	00000084 alt_load
00012ffc g     F .text	0000013c alt_avalon_i2c_master_rx



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a2af04 	addi	r2,r2,-30020
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a2af04 	addi	r2,r2,-30020
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff072c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0720>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a4e917 	ldw	r2,-27740(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a4e917 	ldw	r2,-27740(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	defe8014 	ori	sp,sp,64000
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6bdc514 	ori	gp,gp,63252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10a2a714 	ori	r2,r2,35484

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18e2ef14 	ori	r3,r3,35772

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <__alt_data_end+0xffff0854>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0011efc0 	call	11efc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0011f800 	call	11f80 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <__alt_data_end+0xffff0868>

0001026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
   1026c:	defff804 	addi	sp,sp,-32
   10270:	dfc00715 	stw	ra,28(sp)
   10274:	df000615 	stw	fp,24(sp)
   10278:	df000604 	addi	fp,sp,24
   1027c:	e13ffe15 	stw	r4,-8(fp)
   10280:	2805883a 	mov	r2,r5
   10284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
   10288:	e0bfff0b 	ldhu	r2,-4(fp)
   1028c:	1004d23a 	srli	r2,r2,8
   10290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
   10294:	e0bfff0b 	ldhu	r2,-4(fp)
   10298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
   1029c:	e13ffd84 	addi	r4,fp,-10
   102a0:	e0fffd84 	addi	r3,fp,-10
   102a4:	d8000115 	stw	zero,4(sp)
   102a8:	00800084 	movi	r2,2
   102ac:	d8800015 	stw	r2,0(sp)
   102b0:	200f883a 	mov	r7,r4
   102b4:	01800084 	movi	r6,2
   102b8:	180b883a 	mov	r5,r3
   102bc:	e13ffe17 	ldw	r4,-8(fp)
   102c0:	00131380 	call	13138 <alt_avalon_i2c_master_tx_rx>
   102c4:	e0bffc15 	stw	r2,-16(fp)
	printf("%d\n",status);
   102c8:	e17ffc17 	ldw	r5,-16(fp)
   102cc:	01000074 	movhi	r4,1
   102d0:	21182a04 	addi	r4,r4,24744
   102d4:	00116d40 	call	116d4 <printf>
	if (status != ALT_AVALON_I2C_SUCCESS){
   102d8:	e0bffc17 	ldw	r2,-16(fp)
   102dc:	10000626 	beq	r2,zero,102f8 <SGTL5000_Reg_Rd+0x8c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
   102e0:	e0bfff0b 	ldhu	r2,-4(fp)
   102e4:	100b883a 	mov	r5,r2
   102e8:	01000074 	movhi	r4,1
   102ec:	21182b04 	addi	r4,r4,24748
   102f0:	00116d40 	call	116d4 <printf>
		while (1)
		{
			//hang here
		}
   102f4:	003fff06 	br	102f4 <__alt_data_end+0xffff08f4>
	}
	value = (buffer[0] << 8) | buffer[1];
   102f8:	e0bffd83 	ldbu	r2,-10(fp)
   102fc:	10803fcc 	andi	r2,r2,255
   10300:	1004923a 	slli	r2,r2,8
   10304:	1007883a 	mov	r3,r2
   10308:	e0bffdc3 	ldbu	r2,-9(fp)
   1030c:	10803fcc 	andi	r2,r2,255
   10310:	1884b03a 	or	r2,r3,r2
   10314:	e0bffd0d 	sth	r2,-12(fp)
	return value;
   10318:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1031c:	e037883a 	mov	sp,fp
   10320:	dfc00117 	ldw	ra,4(sp)
   10324:	df000017 	ldw	fp,0(sp)
   10328:	dec00204 	addi	sp,sp,8
   1032c:	f800283a 	ret

00010330 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
   10330:	defff904 	addi	sp,sp,-28
   10334:	dfc00615 	stw	ra,24(sp)
   10338:	df000515 	stw	fp,20(sp)
   1033c:	df000504 	addi	fp,sp,20
   10340:	e13ffd15 	stw	r4,-12(fp)
   10344:	2807883a 	mov	r3,r5
   10348:	3005883a 	mov	r2,r6
   1034c:	e0fffe0d 	sth	r3,-8(fp)
   10350:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
   10354:	e0bffe0b 	ldhu	r2,-8(fp)
   10358:	1004d23a 	srli	r2,r2,8
   1035c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
   10360:	e0bffe0b 	ldhu	r2,-8(fp)
   10364:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
   10368:	e0bfff0b 	ldhu	r2,-4(fp)
   1036c:	1004d23a 	srli	r2,r2,8
   10370:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
   10374:	e0bfff0b 	ldhu	r2,-4(fp)
   10378:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
   1037c:	e0bffc04 	addi	r2,fp,-16
   10380:	000f883a 	mov	r7,zero
   10384:	01800104 	movi	r6,4
   10388:	100b883a 	mov	r5,r2
   1038c:	e13ffd17 	ldw	r4,-12(fp)
   10390:	0012f140 	call	12f14 <alt_avalon_i2c_master_tx>
   10394:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
   10398:	e0bffb17 	ldw	r2,-20(fp)
   1039c:	10000626 	beq	r2,zero,103b8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
   103a0:	e0bffe0b 	ldhu	r2,-8(fp)
   103a4:	100b883a 	mov	r5,r2
   103a8:	01000074 	movhi	r4,1
   103ac:	21182b04 	addi	r4,r4,24748
   103b0:	00116d40 	call	116d4 <printf>
		while (1)
		{
			//hang here
		}
   103b4:	003fff06 	br	103b4 <__alt_data_end+0xffff09b4>
	}
	return DATA;
   103b8:	e0bfff0b 	ldhu	r2,-4(fp)
}
   103bc:	e037883a 	mov	sp,fp
   103c0:	dfc00117 	ldw	ra,4(sp)
   103c4:	df000017 	ldw	fp,0(sp)
   103c8:	dec00204 	addi	sp,sp,8
   103cc:	f800283a 	ret

000103d0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
   103d0:	defffe04 	addi	sp,sp,-8
   103d4:	df000115 	stw	fp,4(sp)
   103d8:	df000104 	addi	fp,sp,4
   103dc:	e13fff15 	stw	r4,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
   103e0:	0001883a 	nop
   103e4:	e037883a 	mov	sp,fp
   103e8:	df000017 	ldw	fp,0(sp)
   103ec:	dec00104 	addi	sp,sp,4
   103f0:	f800283a 	ret

000103f4 <clearLED>:

void clearLED(int LED)
{
   103f4:	defffe04 	addi	sp,sp,-8
   103f8:	df000115 	stw	fp,4(sp)
   103fc:	df000104 	addi	fp,sp,4
   10400:	e13fff15 	stw	r4,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
   10404:	0001883a 	nop
   10408:	e037883a 	mov	sp,fp
   1040c:	df000017 	ldw	fp,0(sp)
   10410:	dec00104 	addi	sp,sp,4
   10414:	f800283a 	ret

00010418 <printSignedHex0>:

void printSignedHex0(signed char value)
{
   10418:	defffc04 	addi	sp,sp,-16
   1041c:	dfc00315 	stw	ra,12(sp)
   10420:	df000215 	stw	fp,8(sp)
   10424:	df000204 	addi	fp,sp,8
   10428:	2005883a 	mov	r2,r4
   1042c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
   10430:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
   10434:	e03ffe45 	stb	zero,-7(fp)
	//WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0)
   10438:	e0bfff07 	ldb	r2,-4(fp)
   1043c:	1000060e 	bge	r2,zero,10458 <printSignedHex0+0x40>
	{
		setLED(11);
   10440:	010002c4 	movi	r4,11
   10444:	00103d00 	call	103d0 <setLED>
		value = -value;
   10448:	e0bfff03 	ldbu	r2,-4(fp)
   1044c:	0085c83a 	sub	r2,zero,r2
   10450:	e0bfff05 	stb	r2,-4(fp)
   10454:	00000206 	br	10460 <printSignedHex0+0x48>
	}
	else
	{
		clearLED(11);
   10458:	010002c4 	movi	r4,11
   1045c:	00103f40 	call	103f4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
   10460:	e0bfff03 	ldbu	r2,-4(fp)
   10464:	108018c4 	addi	r2,r2,99
   10468:	10803fcc 	andi	r2,r2,255
   1046c:	108031f0 	cmpltui	r2,r2,199
   10470:	1000031e 	bne	r2,zero,10480 <printSignedHex0+0x68>
		setLED(13);
   10474:	01000344 	movi	r4,13
   10478:	00103d00 	call	103d0 <setLED>
   1047c:	00000206 	br	10488 <printSignedHex0+0x70>
	else
		clearLED(13);
   10480:	01000344 	movi	r4,13
   10484:	00103f40 	call	103f4 <clearLED>

	value = value % 100;
   10488:	e0bfff07 	ldb	r2,-4(fp)
   1048c:	01401904 	movi	r5,100
   10490:	1009883a 	mov	r4,r2
   10494:	00109ac0 	call	109ac <__modsi3>
   10498:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
   1049c:	e0bfff07 	ldb	r2,-4(fp)
   104a0:	01400284 	movi	r5,10
   104a4:	1009883a 	mov	r4,r2
   104a8:	00109280 	call	10928 <__divsi3>
   104ac:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
   104b0:	e0bfff07 	ldb	r2,-4(fp)
   104b4:	01400284 	movi	r5,10
   104b8:	1009883a 	mov	r4,r2
   104bc:	00109ac0 	call	109ac <__modsi3>
   104c0:	e0bffe45 	stb	r2,-7(fp)
	//pio_val &= 0x00FF;
	//pio_val |= (tens << 12);
	//pio_val |= (ones << 8);

	//IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}
   104c4:	0001883a 	nop
   104c8:	e037883a 	mov	sp,fp
   104cc:	dfc00117 	ldw	ra,4(sp)
   104d0:	df000017 	ldw	fp,0(sp)
   104d4:	dec00204 	addi	sp,sp,8
   104d8:	f800283a 	ret

000104dc <printSignedHex1>:

void printSignedHex1(signed char value)
{
   104dc:	defffc04 	addi	sp,sp,-16
   104e0:	dfc00315 	stw	ra,12(sp)
   104e4:	df000215 	stw	fp,8(sp)
   104e8:	df000204 	addi	fp,sp,8
   104ec:	2005883a 	mov	r2,r4
   104f0:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
   104f4:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
   104f8:	e03ffe45 	stb	zero,-7(fp)
	//DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0)
   104fc:	e0bfff07 	ldb	r2,-4(fp)
   10500:	1000060e 	bge	r2,zero,1051c <printSignedHex1+0x40>
	{
		setLED(10);
   10504:	01000284 	movi	r4,10
   10508:	00103d00 	call	103d0 <setLED>
		value = -value;
   1050c:	e0bfff03 	ldbu	r2,-4(fp)
   10510:	0085c83a 	sub	r2,zero,r2
   10514:	e0bfff05 	stb	r2,-4(fp)
   10518:	00000206 	br	10524 <printSignedHex1+0x48>
	}
	else
	{
		clearLED(10);
   1051c:	01000284 	movi	r4,10
   10520:	00103f40 	call	103f4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
   10524:	e0bfff03 	ldbu	r2,-4(fp)
   10528:	108018c4 	addi	r2,r2,99
   1052c:	10803fcc 	andi	r2,r2,255
   10530:	108031f0 	cmpltui	r2,r2,199
   10534:	1000031e 	bne	r2,zero,10544 <printSignedHex1+0x68>
		setLED(12);
   10538:	01000304 	movi	r4,12
   1053c:	00103d00 	call	103d0 <setLED>
   10540:	00000206 	br	1054c <printSignedHex1+0x70>
	else
		clearLED(12);
   10544:	01000304 	movi	r4,12
   10548:	00103f40 	call	103f4 <clearLED>

	value = value % 100;
   1054c:	e0bfff07 	ldb	r2,-4(fp)
   10550:	01401904 	movi	r5,100
   10554:	1009883a 	mov	r4,r2
   10558:	00109ac0 	call	109ac <__modsi3>
   1055c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
   10560:	e0bfff07 	ldb	r2,-4(fp)
   10564:	01400284 	movi	r5,10
   10568:	1009883a 	mov	r4,r2
   1056c:	00109280 	call	10928 <__divsi3>
   10570:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
   10574:	e0bfff07 	ldb	r2,-4(fp)
   10578:	01400284 	movi	r5,10
   1057c:	1009883a 	mov	r4,r2
   10580:	00109ac0 	call	109ac <__modsi3>
   10584:	e0bffe45 	stb	r2,-7(fp)
	tens = value / 10;
   10588:	e0bfff07 	ldb	r2,-4(fp)
   1058c:	01400284 	movi	r5,10
   10590:	1009883a 	mov	r4,r2
   10594:	00109280 	call	10928 <__divsi3>
   10598:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
   1059c:	e0bfff07 	ldb	r2,-4(fp)
   105a0:	01400284 	movi	r5,10
   105a4:	1009883a 	mov	r4,r2
   105a8:	00109ac0 	call	109ac <__modsi3>
   105ac:	e0bffe45 	stb	r2,-7(fp)
	//pio_val &= 0xFF00;
	//pio_val |= (tens << 4);
	//pio_val |= (ones << 0);

	//IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}
   105b0:	0001883a 	nop
   105b4:	e037883a 	mov	sp,fp
   105b8:	dfc00117 	ldw	ra,4(sp)
   105bc:	df000017 	ldw	fp,0(sp)
   105c0:	dec00204 	addi	sp,sp,8
   105c4:	f800283a 	ret

000105c8 <main>:


int main()
{
   105c8:	defffc04 	addi	sp,sp,-16
   105cc:	dfc00315 	stw	ra,12(sp)
   105d0:	df000215 	stw	fp,8(sp)
   105d4:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
   105d8:	01000074 	movhi	r4,1
   105dc:	21183304 	addi	r4,r4,24780
   105e0:	001253c0 	call	1253c <alt_avalon_i2c_open>
   105e4:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
   105e8:	e0bffe17 	ldw	r2,-8(fp)
   105ec:	1000051e 	bne	r2,zero,10604 <main+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
   105f0:	01000074 	movhi	r4,1
   105f4:	21183604 	addi	r4,r4,24792
   105f8:	00117a00 	call	117a0 <puts>
		return 1;
   105fc:	00800044 	movi	r2,1
   10600:	0000ac06 	br	108b4 <main+0x2ec>
	}
	printf ("I2C Test Program\n");
   10604:	01000074 	movhi	r4,1
   10608:	21183e04 	addi	r4,r4,24824
   1060c:	00117a00 	call	117a0 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
   10610:	01400284 	movi	r5,10
   10614:	e13ffe17 	ldw	r4,-8(fp)
   10618:	0012d0c0 	call	12d0c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
   1061c:	000b883a 	mov	r5,zero
   10620:	e13ffe17 	ldw	r4,-8(fp)
   10624:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   10628:	10bfffcc 	andi	r2,r2,65535
   1062c:	100b883a 	mov	r5,r2
   10630:	01000074 	movhi	r4,1
   10634:	21184304 	addi	r4,r4,24844
   10638:	00116d40 	call	116d4 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
   1063c:	00800384 	movi	r2,14
   10640:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
   10644:	e0bfff03 	ldbu	r2,-4(fp)
   10648:	1009883a 	mov	r4,r2
   1064c:	001151c0 	call	1151c <__floatunsisf>
   10650:	1007883a 	mov	r3,r2
   10654:	180b883a 	mov	r5,r3
   10658:	011059f4 	movhi	r4,16743
   1065c:	210d8144 	addi	r4,r4,13829
   10660:	0010fc80 	call	10fc8 <__subsf3>
   10664:	1007883a 	mov	r3,r2
   10668:	1805883a 	mov	r2,r3
   1066c:	01514034 	movhi	r5,17664
   10670:	1009883a 	mov	r4,r2
   10674:	0010b980 	call	10b98 <__mulsf3>
   10678:	1007883a 	mov	r3,r2
   1067c:	1805883a 	mov	r2,r3
   10680:	1009883a 	mov	r4,r2
   10684:	00108c80 	call	108c8 <__fixunssfsi>
   10688:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
   1068c:	e0bfff03 	ldbu	r2,-4(fp)
   10690:	e0ffff8b 	ldhu	r3,-2(fp)
   10694:	180d883a 	mov	r6,r3
   10698:	100b883a 	mov	r5,r2
   1069c:	01000074 	movhi	r4,1
   106a0:	21184904 	addi	r4,r4,24868
   106a4:	00116d40 	call	116d4 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
   106a8:	e0bfff03 	ldbu	r2,-4(fp)
   106ac:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
   106b0:	1007883a 	mov	r3,r2
   106b4:	e0bfff8b 	ldhu	r2,-2(fp)
   106b8:	1884b03a 	or	r2,r3,r2
   106bc:	10bfffcc 	andi	r2,r2,65535
   106c0:	100d883a 	mov	r6,r2
   106c4:	01400c84 	movi	r5,50
   106c8:	e13ffe17 	ldw	r4,-8(fp)
   106cc:	00103300 	call	10330 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
   106d0:	01400c84 	movi	r5,50
   106d4:	e13ffe17 	ldw	r4,-8(fp)
   106d8:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   106dc:	10bfffcc 	andi	r2,r2,65535
   106e0:	100b883a 	mov	r5,r2
   106e4:	01000074 	movhi	r4,1
   106e8:	21185a04 	addi	r4,r4,24936
   106ec:	00116d40 	call	116d4 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
   106f0:	01917f84 	movi	r6,17918
   106f4:	01400c04 	movi	r5,48
   106f8:	e13ffe17 	ldw	r4,-8(fp)
   106fc:	00103300 	call	10330 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
   10700:	01400c04 	movi	r5,48
   10704:	e13ffe17 	ldw	r4,-8(fp)
   10708:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1070c:	10bfffcc 	andi	r2,r2,65535
   10710:	100b883a 	mov	r5,r2
   10714:	01000074 	movhi	r4,1
   10718:	21186104 	addi	r4,r4,24964
   1071c:	00116d40 	call	116d4 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
   10720:	01801384 	movi	r6,78
   10724:	01400a04 	movi	r5,40
   10728:	e13ffe17 	ldw	r4,-8(fp)
   1072c:	00103300 	call	10330 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
   10730:	01400a04 	movi	r5,40
   10734:	e13ffe17 	ldw	r4,-8(fp)
   10738:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1073c:	10bfffcc 	andi	r2,r2,65535
   10740:	100b883a 	mov	r5,r2
   10744:	01000074 	movhi	r4,1
   10748:	21186904 	addi	r4,r4,24996
   1074c:	00116d40 	call	116d4 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
   10750:	018018c4 	movi	r6,99
   10754:	01400084 	movi	r5,2
   10758:	e13ffe17 	ldw	r4,-8(fp)
   1075c:	00103300 	call	10330 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
   10760:	01400084 	movi	r5,2
   10764:	e13ffe17 	ldw	r4,-8(fp)
   10768:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1076c:	10bfffcc 	andi	r2,r2,65535
   10770:	100b883a 	mov	r5,r2
   10774:	01000074 	movhi	r4,1
   10778:	21187004 	addi	r4,r4,25024
   1077c:	00116d40 	call	116d4 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
   10780:	018001c4 	movi	r6,7
   10784:	01400104 	movi	r5,4
   10788:	e13ffe17 	ldw	r4,-8(fp)
   1078c:	00103300 	call	10330 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
   10790:	01400104 	movi	r5,4
   10794:	e13ffe17 	ldw	r4,-8(fp)
   10798:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1079c:	10bfffcc 	andi	r2,r2,65535
   107a0:	100b883a 	mov	r5,r2
   107a4:	01000074 	movhi	r4,1
   107a8:	21187804 	addi	r4,r4,25056
   107ac:	00116d40 	call	116d4 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
   107b0:	01802004 	movi	r6,128
   107b4:	01400184 	movi	r5,6
   107b8:	e13ffe17 	ldw	r4,-8(fp)
   107bc:	00103300 	call	10330 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
   107c0:	01400184 	movi	r5,6
   107c4:	e13ffe17 	ldw	r4,-8(fp)
   107c8:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   107cc:	10bfffcc 	andi	r2,r2,65535
   107d0:	100b883a 	mov	r5,r2
   107d4:	01000074 	movhi	r4,1
   107d8:	21187f04 	addi	r4,r4,25084
   107dc:	00116d40 	call	116d4 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
   107e0:	01800104 	movi	r6,4
   107e4:	01400904 	movi	r5,36
   107e8:	e13ffe17 	ldw	r4,-8(fp)
   107ec:	00103300 	call	10330 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
   107f0:	01400904 	movi	r5,36
   107f4:	e13ffe17 	ldw	r4,-8(fp)
   107f8:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   107fc:	10bfffcc 	andi	r2,r2,65535
   10800:	100b883a 	mov	r5,r2
   10804:	01000074 	movhi	r4,1
   10808:	21188604 	addi	r4,r4,25112
   1080c:	00116d40 	call	116d4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
   10810:	01800404 	movi	r6,16
   10814:	01400284 	movi	r5,10
   10818:	e13ffe17 	ldw	r4,-8(fp)
   1081c:	00103300 	call	10330 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
   10820:	01400284 	movi	r5,10
   10824:	e13ffe17 	ldw	r4,-8(fp)
   10828:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1082c:	10bfffcc 	andi	r2,r2,65535
   10830:	100b883a 	mov	r5,r2
   10834:	01000074 	movhi	r4,1
   10838:	21188d04 	addi	r4,r4,25140
   1083c:	00116d40 	call	116d4 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
   10840:	01400904 	movi	r5,36
   10844:	e13ffe17 	ldw	r4,-8(fp)
   10848:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1084c:	10bfffcc 	andi	r2,r2,65535
   10850:	100b883a 	mov	r5,r2
   10854:	01000074 	movhi	r4,1
   10858:	21188604 	addi	r4,r4,25112
   1085c:	00116d40 	call	116d4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
   10860:	000d883a 	mov	r6,zero
   10864:	01400384 	movi	r5,14
   10868:	e13ffe17 	ldw	r4,-8(fp)
   1086c:	00103300 	call	10330 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
   10870:	01400384 	movi	r5,14
   10874:	e13ffe17 	ldw	r4,-8(fp)
   10878:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1087c:	10bfffcc 	andi	r2,r2,65535
   10880:	100b883a 	mov	r5,r2
   10884:	01000074 	movhi	r4,1
   10888:	21189404 	addi	r4,r4,25168
   1088c:	00116d40 	call	116d4 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
   10890:	01400504 	movi	r5,20
   10894:	e13ffe17 	ldw	r4,-8(fp)
   10898:	001026c0 	call	1026c <SGTL5000_Reg_Rd>
   1089c:	10bfffcc 	andi	r2,r2,65535
   108a0:	100b883a 	mov	r5,r2
   108a4:	01000074 	movhi	r4,1
   108a8:	21189c04 	addi	r4,r4,25200
   108ac:	00116d40 	call	116d4 <printf>


	return 0;
   108b0:	0005883a 	mov	r2,zero
}
   108b4:	e037883a 	mov	sp,fp
   108b8:	dfc00117 	ldw	ra,4(sp)
   108bc:	df000017 	ldw	fp,0(sp)
   108c0:	dec00204 	addi	sp,sp,8
   108c4:	f800283a 	ret

000108c8 <__fixunssfsi>:
   108c8:	defffd04 	addi	sp,sp,-12
   108cc:	dc000015 	stw	r16,0(sp)
   108d0:	0413c034 	movhi	r16,20224
   108d4:	800b883a 	mov	r5,r16
   108d8:	dc400115 	stw	r17,4(sp)
   108dc:	dfc00215 	stw	ra,8(sp)
   108e0:	2023883a 	mov	r17,r4
   108e4:	0010adc0 	call	10adc <__gesf2>
   108e8:	1000070e 	bge	r2,zero,10908 <__fixunssfsi+0x40>
   108ec:	8809883a 	mov	r4,r17
   108f0:	00114ac0 	call	114ac <__fixsfsi>
   108f4:	dfc00217 	ldw	ra,8(sp)
   108f8:	dc400117 	ldw	r17,4(sp)
   108fc:	dc000017 	ldw	r16,0(sp)
   10900:	dec00304 	addi	sp,sp,12
   10904:	f800283a 	ret
   10908:	800b883a 	mov	r5,r16
   1090c:	8809883a 	mov	r4,r17
   10910:	0010fc80 	call	10fc8 <__subsf3>
   10914:	1009883a 	mov	r4,r2
   10918:	00114ac0 	call	114ac <__fixsfsi>
   1091c:	00e00034 	movhi	r3,32768
   10920:	10c5883a 	add	r2,r2,r3
   10924:	003ff306 	br	108f4 <__alt_data_end+0xffff0ef4>

00010928 <__divsi3>:
   10928:	20001b16 	blt	r4,zero,10998 <__divsi3+0x70>
   1092c:	000f883a 	mov	r7,zero
   10930:	28001616 	blt	r5,zero,1098c <__divsi3+0x64>
   10934:	200d883a 	mov	r6,r4
   10938:	29001a2e 	bgeu	r5,r4,109a4 <__divsi3+0x7c>
   1093c:	00800804 	movi	r2,32
   10940:	00c00044 	movi	r3,1
   10944:	00000106 	br	1094c <__divsi3+0x24>
   10948:	10000d26 	beq	r2,zero,10980 <__divsi3+0x58>
   1094c:	294b883a 	add	r5,r5,r5
   10950:	10bfffc4 	addi	r2,r2,-1
   10954:	18c7883a 	add	r3,r3,r3
   10958:	293ffb36 	bltu	r5,r4,10948 <__alt_data_end+0xffff0f48>
   1095c:	0005883a 	mov	r2,zero
   10960:	18000726 	beq	r3,zero,10980 <__divsi3+0x58>
   10964:	0005883a 	mov	r2,zero
   10968:	31400236 	bltu	r6,r5,10974 <__divsi3+0x4c>
   1096c:	314dc83a 	sub	r6,r6,r5
   10970:	10c4b03a 	or	r2,r2,r3
   10974:	1806d07a 	srli	r3,r3,1
   10978:	280ad07a 	srli	r5,r5,1
   1097c:	183ffa1e 	bne	r3,zero,10968 <__alt_data_end+0xffff0f68>
   10980:	38000126 	beq	r7,zero,10988 <__divsi3+0x60>
   10984:	0085c83a 	sub	r2,zero,r2
   10988:	f800283a 	ret
   1098c:	014bc83a 	sub	r5,zero,r5
   10990:	39c0005c 	xori	r7,r7,1
   10994:	003fe706 	br	10934 <__alt_data_end+0xffff0f34>
   10998:	0109c83a 	sub	r4,zero,r4
   1099c:	01c00044 	movi	r7,1
   109a0:	003fe306 	br	10930 <__alt_data_end+0xffff0f30>
   109a4:	00c00044 	movi	r3,1
   109a8:	003fee06 	br	10964 <__alt_data_end+0xffff0f64>

000109ac <__modsi3>:
   109ac:	20001716 	blt	r4,zero,10a0c <__modsi3+0x60>
   109b0:	000f883a 	mov	r7,zero
   109b4:	2005883a 	mov	r2,r4
   109b8:	28001216 	blt	r5,zero,10a04 <__modsi3+0x58>
   109bc:	2900162e 	bgeu	r5,r4,10a18 <__modsi3+0x6c>
   109c0:	01800804 	movi	r6,32
   109c4:	00c00044 	movi	r3,1
   109c8:	00000106 	br	109d0 <__modsi3+0x24>
   109cc:	30000a26 	beq	r6,zero,109f8 <__modsi3+0x4c>
   109d0:	294b883a 	add	r5,r5,r5
   109d4:	31bfffc4 	addi	r6,r6,-1
   109d8:	18c7883a 	add	r3,r3,r3
   109dc:	293ffb36 	bltu	r5,r4,109cc <__alt_data_end+0xffff0fcc>
   109e0:	18000526 	beq	r3,zero,109f8 <__modsi3+0x4c>
   109e4:	1806d07a 	srli	r3,r3,1
   109e8:	11400136 	bltu	r2,r5,109f0 <__modsi3+0x44>
   109ec:	1145c83a 	sub	r2,r2,r5
   109f0:	280ad07a 	srli	r5,r5,1
   109f4:	183ffb1e 	bne	r3,zero,109e4 <__alt_data_end+0xffff0fe4>
   109f8:	38000126 	beq	r7,zero,10a00 <__modsi3+0x54>
   109fc:	0085c83a 	sub	r2,zero,r2
   10a00:	f800283a 	ret
   10a04:	014bc83a 	sub	r5,zero,r5
   10a08:	003fec06 	br	109bc <__alt_data_end+0xffff0fbc>
   10a0c:	0109c83a 	sub	r4,zero,r4
   10a10:	01c00044 	movi	r7,1
   10a14:	003fe706 	br	109b4 <__alt_data_end+0xffff0fb4>
   10a18:	00c00044 	movi	r3,1
   10a1c:	003ff106 	br	109e4 <__alt_data_end+0xffff0fe4>

00010a20 <__udivsi3>:
   10a20:	200d883a 	mov	r6,r4
   10a24:	2900152e 	bgeu	r5,r4,10a7c <__udivsi3+0x5c>
   10a28:	28001416 	blt	r5,zero,10a7c <__udivsi3+0x5c>
   10a2c:	00800804 	movi	r2,32
   10a30:	00c00044 	movi	r3,1
   10a34:	00000206 	br	10a40 <__udivsi3+0x20>
   10a38:	10000e26 	beq	r2,zero,10a74 <__udivsi3+0x54>
   10a3c:	28000516 	blt	r5,zero,10a54 <__udivsi3+0x34>
   10a40:	294b883a 	add	r5,r5,r5
   10a44:	10bfffc4 	addi	r2,r2,-1
   10a48:	18c7883a 	add	r3,r3,r3
   10a4c:	293ffa36 	bltu	r5,r4,10a38 <__alt_data_end+0xffff1038>
   10a50:	18000826 	beq	r3,zero,10a74 <__udivsi3+0x54>
   10a54:	0005883a 	mov	r2,zero
   10a58:	31400236 	bltu	r6,r5,10a64 <__udivsi3+0x44>
   10a5c:	314dc83a 	sub	r6,r6,r5
   10a60:	10c4b03a 	or	r2,r2,r3
   10a64:	1806d07a 	srli	r3,r3,1
   10a68:	280ad07a 	srli	r5,r5,1
   10a6c:	183ffa1e 	bne	r3,zero,10a58 <__alt_data_end+0xffff1058>
   10a70:	f800283a 	ret
   10a74:	0005883a 	mov	r2,zero
   10a78:	f800283a 	ret
   10a7c:	00c00044 	movi	r3,1
   10a80:	003ff406 	br	10a54 <__alt_data_end+0xffff1054>

00010a84 <__umodsi3>:
   10a84:	2005883a 	mov	r2,r4
   10a88:	2900122e 	bgeu	r5,r4,10ad4 <__umodsi3+0x50>
   10a8c:	28001116 	blt	r5,zero,10ad4 <__umodsi3+0x50>
   10a90:	01800804 	movi	r6,32
   10a94:	00c00044 	movi	r3,1
   10a98:	00000206 	br	10aa4 <__umodsi3+0x20>
   10a9c:	30000c26 	beq	r6,zero,10ad0 <__umodsi3+0x4c>
   10aa0:	28000516 	blt	r5,zero,10ab8 <__umodsi3+0x34>
   10aa4:	294b883a 	add	r5,r5,r5
   10aa8:	31bfffc4 	addi	r6,r6,-1
   10aac:	18c7883a 	add	r3,r3,r3
   10ab0:	293ffa36 	bltu	r5,r4,10a9c <__alt_data_end+0xffff109c>
   10ab4:	18000626 	beq	r3,zero,10ad0 <__umodsi3+0x4c>
   10ab8:	1806d07a 	srli	r3,r3,1
   10abc:	11400136 	bltu	r2,r5,10ac4 <__umodsi3+0x40>
   10ac0:	1145c83a 	sub	r2,r2,r5
   10ac4:	280ad07a 	srli	r5,r5,1
   10ac8:	183ffb1e 	bne	r3,zero,10ab8 <__alt_data_end+0xffff10b8>
   10acc:	f800283a 	ret
   10ad0:	f800283a 	ret
   10ad4:	00c00044 	movi	r3,1
   10ad8:	003ff706 	br	10ab8 <__alt_data_end+0xffff10b8>

00010adc <__gesf2>:
   10adc:	2004d5fa 	srli	r2,r4,23
   10ae0:	2806d5fa 	srli	r3,r5,23
   10ae4:	01802034 	movhi	r6,128
   10ae8:	31bfffc4 	addi	r6,r6,-1
   10aec:	10803fcc 	andi	r2,r2,255
   10af0:	01c03fc4 	movi	r7,255
   10af4:	3110703a 	and	r8,r6,r4
   10af8:	18c03fcc 	andi	r3,r3,255
   10afc:	314c703a 	and	r6,r6,r5
   10b00:	2008d7fa 	srli	r4,r4,31
   10b04:	280ad7fa 	srli	r5,r5,31
   10b08:	11c01926 	beq	r2,r7,10b70 <__gesf2+0x94>
   10b0c:	01c03fc4 	movi	r7,255
   10b10:	19c00f26 	beq	r3,r7,10b50 <__gesf2+0x74>
   10b14:	1000061e 	bne	r2,zero,10b30 <__gesf2+0x54>
   10b18:	400f003a 	cmpeq	r7,r8,zero
   10b1c:	1800071e 	bne	r3,zero,10b3c <__gesf2+0x60>
   10b20:	3000061e 	bne	r6,zero,10b3c <__gesf2+0x60>
   10b24:	0005883a 	mov	r2,zero
   10b28:	40000e1e 	bne	r8,zero,10b64 <__gesf2+0x88>
   10b2c:	f800283a 	ret
   10b30:	18000a1e 	bne	r3,zero,10b5c <__gesf2+0x80>
   10b34:	30000b26 	beq	r6,zero,10b64 <__gesf2+0x88>
   10b38:	000f883a 	mov	r7,zero
   10b3c:	29403fcc 	andi	r5,r5,255
   10b40:	38000726 	beq	r7,zero,10b60 <__gesf2+0x84>
   10b44:	28000826 	beq	r5,zero,10b68 <__gesf2+0x8c>
   10b48:	00800044 	movi	r2,1
   10b4c:	f800283a 	ret
   10b50:	303ff026 	beq	r6,zero,10b14 <__alt_data_end+0xffff1114>
   10b54:	00bfff84 	movi	r2,-2
   10b58:	f800283a 	ret
   10b5c:	29403fcc 	andi	r5,r5,255
   10b60:	21400526 	beq	r4,r5,10b78 <__gesf2+0x9c>
   10b64:	203ff826 	beq	r4,zero,10b48 <__alt_data_end+0xffff1148>
   10b68:	00bfffc4 	movi	r2,-1
   10b6c:	f800283a 	ret
   10b70:	403fe626 	beq	r8,zero,10b0c <__alt_data_end+0xffff110c>
   10b74:	003ff706 	br	10b54 <__alt_data_end+0xffff1154>
   10b78:	18bffa16 	blt	r3,r2,10b64 <__alt_data_end+0xffff1164>
   10b7c:	10c00216 	blt	r2,r3,10b88 <__gesf2+0xac>
   10b80:	323ff836 	bltu	r6,r8,10b64 <__alt_data_end+0xffff1164>
   10b84:	4180022e 	bgeu	r8,r6,10b90 <__gesf2+0xb4>
   10b88:	203fef1e 	bne	r4,zero,10b48 <__alt_data_end+0xffff1148>
   10b8c:	003ff606 	br	10b68 <__alt_data_end+0xffff1168>
   10b90:	0005883a 	mov	r2,zero
   10b94:	f800283a 	ret

00010b98 <__mulsf3>:
   10b98:	defff504 	addi	sp,sp,-44
   10b9c:	dc000115 	stw	r16,4(sp)
   10ba0:	2020d5fa 	srli	r16,r4,23
   10ba4:	dd400615 	stw	r21,24(sp)
   10ba8:	202ad7fa 	srli	r21,r4,31
   10bac:	dc800315 	stw	r18,12(sp)
   10bb0:	04802034 	movhi	r18,128
   10bb4:	df000915 	stw	fp,36(sp)
   10bb8:	dd000515 	stw	r20,20(sp)
   10bbc:	94bfffc4 	addi	r18,r18,-1
   10bc0:	dfc00a15 	stw	ra,40(sp)
   10bc4:	ddc00815 	stw	r23,32(sp)
   10bc8:	dd800715 	stw	r22,28(sp)
   10bcc:	dcc00415 	stw	r19,16(sp)
   10bd0:	dc400215 	stw	r17,8(sp)
   10bd4:	84003fcc 	andi	r16,r16,255
   10bd8:	9124703a 	and	r18,r18,r4
   10bdc:	a829883a 	mov	r20,r21
   10be0:	af003fcc 	andi	fp,r21,255
   10be4:	80005426 	beq	r16,zero,10d38 <__mulsf3+0x1a0>
   10be8:	00803fc4 	movi	r2,255
   10bec:	80802f26 	beq	r16,r2,10cac <__mulsf3+0x114>
   10bf0:	91002034 	orhi	r4,r18,128
   10bf4:	202490fa 	slli	r18,r4,3
   10bf8:	843fe044 	addi	r16,r16,-127
   10bfc:	0023883a 	mov	r17,zero
   10c00:	002f883a 	mov	r23,zero
   10c04:	2804d5fa 	srli	r2,r5,23
   10c08:	282cd7fa 	srli	r22,r5,31
   10c0c:	01002034 	movhi	r4,128
   10c10:	213fffc4 	addi	r4,r4,-1
   10c14:	10803fcc 	andi	r2,r2,255
   10c18:	2166703a 	and	r19,r4,r5
   10c1c:	b1803fcc 	andi	r6,r22,255
   10c20:	10004c26 	beq	r2,zero,10d54 <__mulsf3+0x1bc>
   10c24:	00c03fc4 	movi	r3,255
   10c28:	10c04726 	beq	r2,r3,10d48 <__mulsf3+0x1b0>
   10c2c:	99002034 	orhi	r4,r19,128
   10c30:	202690fa 	slli	r19,r4,3
   10c34:	10bfe044 	addi	r2,r2,-127
   10c38:	0007883a 	mov	r3,zero
   10c3c:	80a1883a 	add	r16,r16,r2
   10c40:	010003c4 	movi	r4,15
   10c44:	1c44b03a 	or	r2,r3,r17
   10c48:	b56af03a 	xor	r21,r22,r21
   10c4c:	81c00044 	addi	r7,r16,1
   10c50:	20806b36 	bltu	r4,r2,10e00 <__mulsf3+0x268>
   10c54:	100490ba 	slli	r2,r2,2
   10c58:	01000074 	movhi	r4,1
   10c5c:	21031b04 	addi	r4,r4,3180
   10c60:	1105883a 	add	r2,r2,r4
   10c64:	10800017 	ldw	r2,0(r2)
   10c68:	1000683a 	jmp	r2
   10c6c:	00010e00 	call	10e0 <__alt_mem_onchip_memory2_0-0xef20>
   10c70:	00010cc0 	call	10cc <__alt_mem_onchip_memory2_0-0xef34>
   10c74:	00010cc0 	call	10cc <__alt_mem_onchip_memory2_0-0xef34>
   10c78:	00010cbc 	xorhi	zero,zero,1074
   10c7c:	00010de4 	muli	zero,zero,1079
   10c80:	00010de4 	muli	zero,zero,1079
   10c84:	00010dd0 	cmplti	zero,zero,1079
   10c88:	00010cbc 	xorhi	zero,zero,1074
   10c8c:	00010de4 	muli	zero,zero,1079
   10c90:	00010dd0 	cmplti	zero,zero,1079
   10c94:	00010de4 	muli	zero,zero,1079
   10c98:	00010cbc 	xorhi	zero,zero,1074
   10c9c:	00010df0 	cmpltui	zero,zero,1079
   10ca0:	00010df0 	cmpltui	zero,zero,1079
   10ca4:	00010df0 	cmpltui	zero,zero,1079
   10ca8:	00010f00 	call	10f0 <__alt_mem_onchip_memory2_0-0xef10>
   10cac:	90003b1e 	bne	r18,zero,10d9c <__mulsf3+0x204>
   10cb0:	04400204 	movi	r17,8
   10cb4:	05c00084 	movi	r23,2
   10cb8:	003fd206 	br	10c04 <__alt_data_end+0xffff1204>
   10cbc:	302b883a 	mov	r21,r6
   10cc0:	00800084 	movi	r2,2
   10cc4:	18802626 	beq	r3,r2,10d60 <__mulsf3+0x1c8>
   10cc8:	008000c4 	movi	r2,3
   10ccc:	1880b826 	beq	r3,r2,10fb0 <__mulsf3+0x418>
   10cd0:	00800044 	movi	r2,1
   10cd4:	1880af1e 	bne	r3,r2,10f94 <__mulsf3+0x3fc>
   10cd8:	a829883a 	mov	r20,r21
   10cdc:	0007883a 	mov	r3,zero
   10ce0:	0009883a 	mov	r4,zero
   10ce4:	18803fcc 	andi	r2,r3,255
   10ce8:	100695fa 	slli	r3,r2,23
   10cec:	a0803fcc 	andi	r2,r20,255
   10cf0:	100a97fa 	slli	r5,r2,31
   10cf4:	00802034 	movhi	r2,128
   10cf8:	10bfffc4 	addi	r2,r2,-1
   10cfc:	2084703a 	and	r2,r4,r2
   10d00:	10c4b03a 	or	r2,r2,r3
   10d04:	1144b03a 	or	r2,r2,r5
   10d08:	dfc00a17 	ldw	ra,40(sp)
   10d0c:	df000917 	ldw	fp,36(sp)
   10d10:	ddc00817 	ldw	r23,32(sp)
   10d14:	dd800717 	ldw	r22,28(sp)
   10d18:	dd400617 	ldw	r21,24(sp)
   10d1c:	dd000517 	ldw	r20,20(sp)
   10d20:	dcc00417 	ldw	r19,16(sp)
   10d24:	dc800317 	ldw	r18,12(sp)
   10d28:	dc400217 	ldw	r17,8(sp)
   10d2c:	dc000117 	ldw	r16,4(sp)
   10d30:	dec00b04 	addi	sp,sp,44
   10d34:	f800283a 	ret
   10d38:	90000d1e 	bne	r18,zero,10d70 <__mulsf3+0x1d8>
   10d3c:	04400104 	movi	r17,4
   10d40:	05c00044 	movi	r23,1
   10d44:	003faf06 	br	10c04 <__alt_data_end+0xffff1204>
   10d48:	9806c03a 	cmpne	r3,r19,zero
   10d4c:	18c00084 	addi	r3,r3,2
   10d50:	003fba06 	br	10c3c <__alt_data_end+0xffff123c>
   10d54:	9800141e 	bne	r19,zero,10da8 <__mulsf3+0x210>
   10d58:	00c00044 	movi	r3,1
   10d5c:	003fb706 	br	10c3c <__alt_data_end+0xffff123c>
   10d60:	a829883a 	mov	r20,r21
   10d64:	00ffffc4 	movi	r3,-1
   10d68:	0009883a 	mov	r4,zero
   10d6c:	003fdd06 	br	10ce4 <__alt_data_end+0xffff12e4>
   10d70:	9009883a 	mov	r4,r18
   10d74:	d9400015 	stw	r5,0(sp)
   10d78:	001160c0 	call	1160c <__clzsi2>
   10d7c:	10fffec4 	addi	r3,r2,-5
   10d80:	10801d84 	addi	r2,r2,118
   10d84:	90e4983a 	sll	r18,r18,r3
   10d88:	00a1c83a 	sub	r16,zero,r2
   10d8c:	0023883a 	mov	r17,zero
   10d90:	002f883a 	mov	r23,zero
   10d94:	d9400017 	ldw	r5,0(sp)
   10d98:	003f9a06 	br	10c04 <__alt_data_end+0xffff1204>
   10d9c:	04400304 	movi	r17,12
   10da0:	05c000c4 	movi	r23,3
   10da4:	003f9706 	br	10c04 <__alt_data_end+0xffff1204>
   10da8:	9809883a 	mov	r4,r19
   10dac:	d9800015 	stw	r6,0(sp)
   10db0:	001160c0 	call	1160c <__clzsi2>
   10db4:	10fffec4 	addi	r3,r2,-5
   10db8:	10801d84 	addi	r2,r2,118
   10dbc:	98e6983a 	sll	r19,r19,r3
   10dc0:	0085c83a 	sub	r2,zero,r2
   10dc4:	0007883a 	mov	r3,zero
   10dc8:	d9800017 	ldw	r6,0(sp)
   10dcc:	003f9b06 	br	10c3c <__alt_data_end+0xffff123c>
   10dd0:	01002034 	movhi	r4,128
   10dd4:	0029883a 	mov	r20,zero
   10dd8:	213fffc4 	addi	r4,r4,-1
   10ddc:	00ffffc4 	movi	r3,-1
   10de0:	003fc006 	br	10ce4 <__alt_data_end+0xffff12e4>
   10de4:	9027883a 	mov	r19,r18
   10de8:	b807883a 	mov	r3,r23
   10dec:	003fb406 	br	10cc0 <__alt_data_end+0xffff12c0>
   10df0:	9027883a 	mov	r19,r18
   10df4:	e02b883a 	mov	r21,fp
   10df8:	b807883a 	mov	r3,r23
   10dfc:	003fb006 	br	10cc0 <__alt_data_end+0xffff12c0>
   10e00:	9028d43a 	srli	r20,r18,16
   10e04:	982cd43a 	srli	r22,r19,16
   10e08:	94bfffcc 	andi	r18,r18,65535
   10e0c:	9cffffcc 	andi	r19,r19,65535
   10e10:	980b883a 	mov	r5,r19
   10e14:	9009883a 	mov	r4,r18
   10e18:	d9c00015 	stw	r7,0(sp)
   10e1c:	00116700 	call	11670 <__mulsi3>
   10e20:	a00b883a 	mov	r5,r20
   10e24:	9809883a 	mov	r4,r19
   10e28:	1023883a 	mov	r17,r2
   10e2c:	00116700 	call	11670 <__mulsi3>
   10e30:	a009883a 	mov	r4,r20
   10e34:	b00b883a 	mov	r5,r22
   10e38:	1027883a 	mov	r19,r2
   10e3c:	00116700 	call	11670 <__mulsi3>
   10e40:	b00b883a 	mov	r5,r22
   10e44:	9009883a 	mov	r4,r18
   10e48:	1029883a 	mov	r20,r2
   10e4c:	00116700 	call	11670 <__mulsi3>
   10e50:	8806d43a 	srli	r3,r17,16
   10e54:	14c5883a 	add	r2,r2,r19
   10e58:	d9c00017 	ldw	r7,0(sp)
   10e5c:	1885883a 	add	r2,r3,r2
   10e60:	14c0022e 	bgeu	r2,r19,10e6c <__mulsf3+0x2d4>
   10e64:	00c00074 	movhi	r3,1
   10e68:	a0e9883a 	add	r20,r20,r3
   10e6c:	1026943a 	slli	r19,r2,16
   10e70:	8c7fffcc 	andi	r17,r17,65535
   10e74:	1004d43a 	srli	r2,r2,16
   10e78:	9c63883a 	add	r17,r19,r17
   10e7c:	882691ba 	slli	r19,r17,6
   10e80:	1505883a 	add	r2,r2,r20
   10e84:	8822d6ba 	srli	r17,r17,26
   10e88:	100891ba 	slli	r4,r2,6
   10e8c:	9826c03a 	cmpne	r19,r19,zero
   10e90:	9c62b03a 	or	r17,r19,r17
   10e94:	8926b03a 	or	r19,r17,r4
   10e98:	9882002c 	andhi	r2,r19,2048
   10e9c:	10000426 	beq	r2,zero,10eb0 <__mulsf3+0x318>
   10ea0:	9804d07a 	srli	r2,r19,1
   10ea4:	9900004c 	andi	r4,r19,1
   10ea8:	3821883a 	mov	r16,r7
   10eac:	1126b03a 	or	r19,r2,r4
   10eb0:	80c01fc4 	addi	r3,r16,127
   10eb4:	00c0210e 	bge	zero,r3,10f3c <__mulsf3+0x3a4>
   10eb8:	988001cc 	andi	r2,r19,7
   10ebc:	10000426 	beq	r2,zero,10ed0 <__mulsf3+0x338>
   10ec0:	988003cc 	andi	r2,r19,15
   10ec4:	01000104 	movi	r4,4
   10ec8:	11000126 	beq	r2,r4,10ed0 <__mulsf3+0x338>
   10ecc:	9927883a 	add	r19,r19,r4
   10ed0:	9882002c 	andhi	r2,r19,2048
   10ed4:	10000426 	beq	r2,zero,10ee8 <__mulsf3+0x350>
   10ed8:	00be0034 	movhi	r2,63488
   10edc:	10bfffc4 	addi	r2,r2,-1
   10ee0:	80c02004 	addi	r3,r16,128
   10ee4:	98a6703a 	and	r19,r19,r2
   10ee8:	00803f84 	movi	r2,254
   10eec:	10ff9c16 	blt	r2,r3,10d60 <__alt_data_end+0xffff1360>
   10ef0:	980891ba 	slli	r4,r19,6
   10ef4:	a829883a 	mov	r20,r21
   10ef8:	2008d27a 	srli	r4,r4,9
   10efc:	003f7906 	br	10ce4 <__alt_data_end+0xffff12e4>
   10f00:	9080102c 	andhi	r2,r18,64
   10f04:	10000826 	beq	r2,zero,10f28 <__mulsf3+0x390>
   10f08:	9880102c 	andhi	r2,r19,64
   10f0c:	1000061e 	bne	r2,zero,10f28 <__mulsf3+0x390>
   10f10:	00802034 	movhi	r2,128
   10f14:	99001034 	orhi	r4,r19,64
   10f18:	10bfffc4 	addi	r2,r2,-1
   10f1c:	b029883a 	mov	r20,r22
   10f20:	2088703a 	and	r4,r4,r2
   10f24:	003fad06 	br	10ddc <__alt_data_end+0xffff13dc>
   10f28:	00802034 	movhi	r2,128
   10f2c:	91001034 	orhi	r4,r18,64
   10f30:	10bfffc4 	addi	r2,r2,-1
   10f34:	2088703a 	and	r4,r4,r2
   10f38:	003fa806 	br	10ddc <__alt_data_end+0xffff13dc>
   10f3c:	00800044 	movi	r2,1
   10f40:	10c7c83a 	sub	r3,r2,r3
   10f44:	008006c4 	movi	r2,27
   10f48:	10ff6316 	blt	r2,r3,10cd8 <__alt_data_end+0xffff12d8>
   10f4c:	00800804 	movi	r2,32
   10f50:	10c5c83a 	sub	r2,r2,r3
   10f54:	9884983a 	sll	r2,r19,r2
   10f58:	98c6d83a 	srl	r3,r19,r3
   10f5c:	1004c03a 	cmpne	r2,r2,zero
   10f60:	1884b03a 	or	r2,r3,r2
   10f64:	10c001cc 	andi	r3,r2,7
   10f68:	18000426 	beq	r3,zero,10f7c <__mulsf3+0x3e4>
   10f6c:	10c003cc 	andi	r3,r2,15
   10f70:	01000104 	movi	r4,4
   10f74:	19000126 	beq	r3,r4,10f7c <__mulsf3+0x3e4>
   10f78:	1105883a 	add	r2,r2,r4
   10f7c:	10c1002c 	andhi	r3,r2,1024
   10f80:	18000626 	beq	r3,zero,10f9c <__mulsf3+0x404>
   10f84:	a829883a 	mov	r20,r21
   10f88:	00c00044 	movi	r3,1
   10f8c:	0009883a 	mov	r4,zero
   10f90:	003f5406 	br	10ce4 <__alt_data_end+0xffff12e4>
   10f94:	3821883a 	mov	r16,r7
   10f98:	003fc506 	br	10eb0 <__alt_data_end+0xffff14b0>
   10f9c:	100491ba 	slli	r2,r2,6
   10fa0:	a829883a 	mov	r20,r21
   10fa4:	0007883a 	mov	r3,zero
   10fa8:	1008d27a 	srli	r4,r2,9
   10fac:	003f4d06 	br	10ce4 <__alt_data_end+0xffff12e4>
   10fb0:	00802034 	movhi	r2,128
   10fb4:	99001034 	orhi	r4,r19,64
   10fb8:	10bfffc4 	addi	r2,r2,-1
   10fbc:	a829883a 	mov	r20,r21
   10fc0:	2088703a 	and	r4,r4,r2
   10fc4:	003f8506 	br	10ddc <__alt_data_end+0xffff13dc>

00010fc8 <__subsf3>:
   10fc8:	defffc04 	addi	sp,sp,-16
   10fcc:	280cd5fa 	srli	r6,r5,23
   10fd0:	dc000015 	stw	r16,0(sp)
   10fd4:	01c02034 	movhi	r7,128
   10fd8:	2020d5fa 	srli	r16,r4,23
   10fdc:	39ffffc4 	addi	r7,r7,-1
   10fe0:	3906703a 	and	r3,r7,r4
   10fe4:	dc400115 	stw	r17,4(sp)
   10fe8:	394e703a 	and	r7,r7,r5
   10fec:	2022d7fa 	srli	r17,r4,31
   10ff0:	dfc00315 	stw	ra,12(sp)
   10ff4:	dc800215 	stw	r18,8(sp)
   10ff8:	31803fcc 	andi	r6,r6,255
   10ffc:	01003fc4 	movi	r4,255
   11000:	84003fcc 	andi	r16,r16,255
   11004:	180690fa 	slli	r3,r3,3
   11008:	2804d7fa 	srli	r2,r5,31
   1100c:	380e90fa 	slli	r7,r7,3
   11010:	31006d26 	beq	r6,r4,111c8 <__subsf3+0x200>
   11014:	1080005c 	xori	r2,r2,1
   11018:	8189c83a 	sub	r4,r16,r6
   1101c:	14404f26 	beq	r2,r17,1115c <__subsf3+0x194>
   11020:	0100770e 	bge	zero,r4,11200 <__subsf3+0x238>
   11024:	30001e1e 	bne	r6,zero,110a0 <__subsf3+0xd8>
   11028:	38006a1e 	bne	r7,zero,111d4 <__subsf3+0x20c>
   1102c:	188001cc 	andi	r2,r3,7
   11030:	10000426 	beq	r2,zero,11044 <__subsf3+0x7c>
   11034:	188003cc 	andi	r2,r3,15
   11038:	01000104 	movi	r4,4
   1103c:	11000126 	beq	r2,r4,11044 <__subsf3+0x7c>
   11040:	1907883a 	add	r3,r3,r4
   11044:	1881002c 	andhi	r2,r3,1024
   11048:	10003926 	beq	r2,zero,11130 <__subsf3+0x168>
   1104c:	84000044 	addi	r16,r16,1
   11050:	00803fc4 	movi	r2,255
   11054:	80807526 	beq	r16,r2,1122c <__subsf3+0x264>
   11058:	180691ba 	slli	r3,r3,6
   1105c:	8880004c 	andi	r2,r17,1
   11060:	180ad27a 	srli	r5,r3,9
   11064:	84003fcc 	andi	r16,r16,255
   11068:	800695fa 	slli	r3,r16,23
   1106c:	10803fcc 	andi	r2,r2,255
   11070:	01002034 	movhi	r4,128
   11074:	213fffc4 	addi	r4,r4,-1
   11078:	100497fa 	slli	r2,r2,31
   1107c:	2920703a 	and	r16,r5,r4
   11080:	80e0b03a 	or	r16,r16,r3
   11084:	8084b03a 	or	r2,r16,r2
   11088:	dfc00317 	ldw	ra,12(sp)
   1108c:	dc800217 	ldw	r18,8(sp)
   11090:	dc400117 	ldw	r17,4(sp)
   11094:	dc000017 	ldw	r16,0(sp)
   11098:	dec00404 	addi	sp,sp,16
   1109c:	f800283a 	ret
   110a0:	00803fc4 	movi	r2,255
   110a4:	80bfe126 	beq	r16,r2,1102c <__alt_data_end+0xffff162c>
   110a8:	39c10034 	orhi	r7,r7,1024
   110ac:	008006c4 	movi	r2,27
   110b0:	11007416 	blt	r2,r4,11284 <__subsf3+0x2bc>
   110b4:	00800804 	movi	r2,32
   110b8:	1105c83a 	sub	r2,r2,r4
   110bc:	3884983a 	sll	r2,r7,r2
   110c0:	390ed83a 	srl	r7,r7,r4
   110c4:	1008c03a 	cmpne	r4,r2,zero
   110c8:	390eb03a 	or	r7,r7,r4
   110cc:	19c7c83a 	sub	r3,r3,r7
   110d0:	1881002c 	andhi	r2,r3,1024
   110d4:	10001426 	beq	r2,zero,11128 <__subsf3+0x160>
   110d8:	04810034 	movhi	r18,1024
   110dc:	94bfffc4 	addi	r18,r18,-1
   110e0:	1ca4703a 	and	r18,r3,r18
   110e4:	9009883a 	mov	r4,r18
   110e8:	001160c0 	call	1160c <__clzsi2>
   110ec:	10bffec4 	addi	r2,r2,-5
   110f0:	90a4983a 	sll	r18,r18,r2
   110f4:	14005116 	blt	r2,r16,1123c <__subsf3+0x274>
   110f8:	1405c83a 	sub	r2,r2,r16
   110fc:	10c00044 	addi	r3,r2,1
   11100:	00800804 	movi	r2,32
   11104:	10c5c83a 	sub	r2,r2,r3
   11108:	9084983a 	sll	r2,r18,r2
   1110c:	90e4d83a 	srl	r18,r18,r3
   11110:	0021883a 	mov	r16,zero
   11114:	1006c03a 	cmpne	r3,r2,zero
   11118:	90c6b03a 	or	r3,r18,r3
   1111c:	003fc306 	br	1102c <__alt_data_end+0xffff162c>
   11120:	2000e026 	beq	r4,zero,114a4 <__subsf3+0x4dc>
   11124:	2007883a 	mov	r3,r4
   11128:	188001cc 	andi	r2,r3,7
   1112c:	103fc11e 	bne	r2,zero,11034 <__alt_data_end+0xffff1634>
   11130:	180ad0fa 	srli	r5,r3,3
   11134:	00c03fc4 	movi	r3,255
   11138:	8880004c 	andi	r2,r17,1
   1113c:	80c0031e 	bne	r16,r3,1114c <__subsf3+0x184>
   11140:	28006d26 	beq	r5,zero,112f8 <__subsf3+0x330>
   11144:	29401034 	orhi	r5,r5,64
   11148:	043fffc4 	movi	r16,-1
   1114c:	00c02034 	movhi	r3,128
   11150:	18ffffc4 	addi	r3,r3,-1
   11154:	28ca703a 	and	r5,r5,r3
   11158:	003fc206 	br	11064 <__alt_data_end+0xffff1664>
   1115c:	01003c0e 	bge	zero,r4,11250 <__subsf3+0x288>
   11160:	30002126 	beq	r6,zero,111e8 <__subsf3+0x220>
   11164:	01403fc4 	movi	r5,255
   11168:	817fb026 	beq	r16,r5,1102c <__alt_data_end+0xffff162c>
   1116c:	39c10034 	orhi	r7,r7,1024
   11170:	014006c4 	movi	r5,27
   11174:	29007416 	blt	r5,r4,11348 <__subsf3+0x380>
   11178:	01400804 	movi	r5,32
   1117c:	290bc83a 	sub	r5,r5,r4
   11180:	394a983a 	sll	r5,r7,r5
   11184:	390ed83a 	srl	r7,r7,r4
   11188:	2808c03a 	cmpne	r4,r5,zero
   1118c:	390eb03a 	or	r7,r7,r4
   11190:	19c7883a 	add	r3,r3,r7
   11194:	1901002c 	andhi	r4,r3,1024
   11198:	20003826 	beq	r4,zero,1127c <__subsf3+0x2b4>
   1119c:	84000044 	addi	r16,r16,1
   111a0:	01003fc4 	movi	r4,255
   111a4:	81005426 	beq	r16,r4,112f8 <__subsf3+0x330>
   111a8:	1023883a 	mov	r17,r2
   111ac:	00bf0034 	movhi	r2,64512
   111b0:	10bfffc4 	addi	r2,r2,-1
   111b4:	1900004c 	andi	r4,r3,1
   111b8:	1886703a 	and	r3,r3,r2
   111bc:	1806d07a 	srli	r3,r3,1
   111c0:	1906b03a 	or	r3,r3,r4
   111c4:	003f9906 	br	1102c <__alt_data_end+0xffff162c>
   111c8:	383f9226 	beq	r7,zero,11014 <__alt_data_end+0xffff1614>
   111cc:	10803fcc 	andi	r2,r2,255
   111d0:	003f9106 	br	11018 <__alt_data_end+0xffff1618>
   111d4:	213fffc4 	addi	r4,r4,-1
   111d8:	203fbc26 	beq	r4,zero,110cc <__alt_data_end+0xffff16cc>
   111dc:	00803fc4 	movi	r2,255
   111e0:	80bfb21e 	bne	r16,r2,110ac <__alt_data_end+0xffff16ac>
   111e4:	003f9106 	br	1102c <__alt_data_end+0xffff162c>
   111e8:	383f9026 	beq	r7,zero,1102c <__alt_data_end+0xffff162c>
   111ec:	213fffc4 	addi	r4,r4,-1
   111f0:	203fe726 	beq	r4,zero,11190 <__alt_data_end+0xffff1790>
   111f4:	01403fc4 	movi	r5,255
   111f8:	817fdd1e 	bne	r16,r5,11170 <__alt_data_end+0xffff1770>
   111fc:	003f8b06 	br	1102c <__alt_data_end+0xffff162c>
   11200:	2000221e 	bne	r4,zero,1128c <__subsf3+0x2c4>
   11204:	81000044 	addi	r4,r16,1
   11208:	21003fcc 	andi	r4,r4,255
   1120c:	01400044 	movi	r5,1
   11210:	2900470e 	bge	r5,r4,11330 <__subsf3+0x368>
   11214:	19e5c83a 	sub	r18,r3,r7
   11218:	9141002c 	andhi	r5,r18,1024
   1121c:	28002d26 	beq	r5,zero,112d4 <__subsf3+0x30c>
   11220:	38e5c83a 	sub	r18,r7,r3
   11224:	1023883a 	mov	r17,r2
   11228:	003fae06 	br	110e4 <__alt_data_end+0xffff16e4>
   1122c:	8880004c 	andi	r2,r17,1
   11230:	043fffc4 	movi	r16,-1
   11234:	000b883a 	mov	r5,zero
   11238:	003f8a06 	br	11064 <__alt_data_end+0xffff1664>
   1123c:	00ff0034 	movhi	r3,64512
   11240:	18ffffc4 	addi	r3,r3,-1
   11244:	80a1c83a 	sub	r16,r16,r2
   11248:	90c6703a 	and	r3,r18,r3
   1124c:	003f7706 	br	1102c <__alt_data_end+0xffff162c>
   11250:	2000431e 	bne	r4,zero,11360 <__subsf3+0x398>
   11254:	81000044 	addi	r4,r16,1
   11258:	21803fcc 	andi	r6,r4,255
   1125c:	01400044 	movi	r5,1
   11260:	2980280e 	bge	r5,r6,11304 <__subsf3+0x33c>
   11264:	01403fc4 	movi	r5,255
   11268:	21402326 	beq	r4,r5,112f8 <__subsf3+0x330>
   1126c:	19c7883a 	add	r3,r3,r7
   11270:	1806d07a 	srli	r3,r3,1
   11274:	2021883a 	mov	r16,r4
   11278:	003f6c06 	br	1102c <__alt_data_end+0xffff162c>
   1127c:	1023883a 	mov	r17,r2
   11280:	003fa906 	br	11128 <__alt_data_end+0xffff1728>
   11284:	01c00044 	movi	r7,1
   11288:	003f9006 	br	110cc <__alt_data_end+0xffff16cc>
   1128c:	8000151e 	bne	r16,zero,112e4 <__subsf3+0x31c>
   11290:	18002f26 	beq	r3,zero,11350 <__subsf3+0x388>
   11294:	0108303a 	nor	r4,zero,r4
   11298:	20000a26 	beq	r4,zero,112c4 <__subsf3+0x2fc>
   1129c:	01403fc4 	movi	r5,255
   112a0:	31402b26 	beq	r6,r5,11350 <__subsf3+0x388>
   112a4:	014006c4 	movi	r5,27
   112a8:	29006e16 	blt	r5,r4,11464 <__subsf3+0x49c>
   112ac:	01400804 	movi	r5,32
   112b0:	290bc83a 	sub	r5,r5,r4
   112b4:	194a983a 	sll	r5,r3,r5
   112b8:	1908d83a 	srl	r4,r3,r4
   112bc:	2806c03a 	cmpne	r3,r5,zero
   112c0:	20c6b03a 	or	r3,r4,r3
   112c4:	38c7c83a 	sub	r3,r7,r3
   112c8:	3021883a 	mov	r16,r6
   112cc:	1023883a 	mov	r17,r2
   112d0:	003f7f06 	br	110d0 <__alt_data_end+0xffff16d0>
   112d4:	903f831e 	bne	r18,zero,110e4 <__alt_data_end+0xffff16e4>
   112d8:	0005883a 	mov	r2,zero
   112dc:	0021883a 	mov	r16,zero
   112e0:	003f9a06 	br	1114c <__alt_data_end+0xffff174c>
   112e4:	01403fc4 	movi	r5,255
   112e8:	31401926 	beq	r6,r5,11350 <__subsf3+0x388>
   112ec:	0109c83a 	sub	r4,zero,r4
   112f0:	18c10034 	orhi	r3,r3,1024
   112f4:	003feb06 	br	112a4 <__alt_data_end+0xffff18a4>
   112f8:	043fffc4 	movi	r16,-1
   112fc:	000b883a 	mov	r5,zero
   11300:	003f5806 	br	11064 <__alt_data_end+0xffff1664>
   11304:	8000481e 	bne	r16,zero,11428 <__subsf3+0x460>
   11308:	18006226 	beq	r3,zero,11494 <__subsf3+0x4cc>
   1130c:	383f4726 	beq	r7,zero,1102c <__alt_data_end+0xffff162c>
   11310:	19c7883a 	add	r3,r3,r7
   11314:	1881002c 	andhi	r2,r3,1024
   11318:	103f8326 	beq	r2,zero,11128 <__alt_data_end+0xffff1728>
   1131c:	00bf0034 	movhi	r2,64512
   11320:	10bfffc4 	addi	r2,r2,-1
   11324:	2821883a 	mov	r16,r5
   11328:	1886703a 	and	r3,r3,r2
   1132c:	003f3f06 	br	1102c <__alt_data_end+0xffff162c>
   11330:	80001c1e 	bne	r16,zero,113a4 <__subsf3+0x3dc>
   11334:	1800261e 	bne	r3,zero,113d0 <__subsf3+0x408>
   11338:	38004c26 	beq	r7,zero,1146c <__subsf3+0x4a4>
   1133c:	3807883a 	mov	r3,r7
   11340:	1023883a 	mov	r17,r2
   11344:	003f3906 	br	1102c <__alt_data_end+0xffff162c>
   11348:	01c00044 	movi	r7,1
   1134c:	003f9006 	br	11190 <__alt_data_end+0xffff1790>
   11350:	3807883a 	mov	r3,r7
   11354:	3021883a 	mov	r16,r6
   11358:	1023883a 	mov	r17,r2
   1135c:	003f3306 	br	1102c <__alt_data_end+0xffff162c>
   11360:	8000161e 	bne	r16,zero,113bc <__subsf3+0x3f4>
   11364:	18002d26 	beq	r3,zero,1141c <__subsf3+0x454>
   11368:	0108303a 	nor	r4,zero,r4
   1136c:	20000a26 	beq	r4,zero,11398 <__subsf3+0x3d0>
   11370:	01403fc4 	movi	r5,255
   11374:	31402926 	beq	r6,r5,1141c <__subsf3+0x454>
   11378:	014006c4 	movi	r5,27
   1137c:	29004716 	blt	r5,r4,1149c <__subsf3+0x4d4>
   11380:	01400804 	movi	r5,32
   11384:	290bc83a 	sub	r5,r5,r4
   11388:	194a983a 	sll	r5,r3,r5
   1138c:	1908d83a 	srl	r4,r3,r4
   11390:	2806c03a 	cmpne	r3,r5,zero
   11394:	20c6b03a 	or	r3,r4,r3
   11398:	19c7883a 	add	r3,r3,r7
   1139c:	3021883a 	mov	r16,r6
   113a0:	003f7c06 	br	11194 <__alt_data_end+0xffff1794>
   113a4:	1800111e 	bne	r3,zero,113ec <__subsf3+0x424>
   113a8:	38003326 	beq	r7,zero,11478 <__subsf3+0x4b0>
   113ac:	3807883a 	mov	r3,r7
   113b0:	1023883a 	mov	r17,r2
   113b4:	04003fc4 	movi	r16,255
   113b8:	003f1c06 	br	1102c <__alt_data_end+0xffff162c>
   113bc:	01403fc4 	movi	r5,255
   113c0:	31401626 	beq	r6,r5,1141c <__subsf3+0x454>
   113c4:	0109c83a 	sub	r4,zero,r4
   113c8:	18c10034 	orhi	r3,r3,1024
   113cc:	003fea06 	br	11378 <__alt_data_end+0xffff1978>
   113d0:	383f1626 	beq	r7,zero,1102c <__alt_data_end+0xffff162c>
   113d4:	19c9c83a 	sub	r4,r3,r7
   113d8:	2141002c 	andhi	r5,r4,1024
   113dc:	283f5026 	beq	r5,zero,11120 <__alt_data_end+0xffff1720>
   113e0:	38c7c83a 	sub	r3,r7,r3
   113e4:	1023883a 	mov	r17,r2
   113e8:	003f1006 	br	1102c <__alt_data_end+0xffff162c>
   113ec:	38001b26 	beq	r7,zero,1145c <__subsf3+0x494>
   113f0:	1806d0fa 	srli	r3,r3,3
   113f4:	1900102c 	andhi	r4,r3,64
   113f8:	20000526 	beq	r4,zero,11410 <__subsf3+0x448>
   113fc:	380ed0fa 	srli	r7,r7,3
   11400:	3900102c 	andhi	r4,r7,64
   11404:	2000021e 	bne	r4,zero,11410 <__subsf3+0x448>
   11408:	3807883a 	mov	r3,r7
   1140c:	1023883a 	mov	r17,r2
   11410:	180690fa 	slli	r3,r3,3
   11414:	04003fc4 	movi	r16,255
   11418:	003f0406 	br	1102c <__alt_data_end+0xffff162c>
   1141c:	3807883a 	mov	r3,r7
   11420:	3021883a 	mov	r16,r6
   11424:	003f0106 	br	1102c <__alt_data_end+0xffff162c>
   11428:	18001726 	beq	r3,zero,11488 <__subsf3+0x4c0>
   1142c:	38000b26 	beq	r7,zero,1145c <__subsf3+0x494>
   11430:	1806d0fa 	srli	r3,r3,3
   11434:	1900102c 	andhi	r4,r3,64
   11438:	20000426 	beq	r4,zero,1144c <__subsf3+0x484>
   1143c:	380ed0fa 	srli	r7,r7,3
   11440:	3900102c 	andhi	r4,r7,64
   11444:	2000011e 	bne	r4,zero,1144c <__subsf3+0x484>
   11448:	3807883a 	mov	r3,r7
   1144c:	180690fa 	slli	r3,r3,3
   11450:	1023883a 	mov	r17,r2
   11454:	04003fc4 	movi	r16,255
   11458:	003ef406 	br	1102c <__alt_data_end+0xffff162c>
   1145c:	04003fc4 	movi	r16,255
   11460:	003ef206 	br	1102c <__alt_data_end+0xffff162c>
   11464:	00c00044 	movi	r3,1
   11468:	003f9606 	br	112c4 <__alt_data_end+0xffff18c4>
   1146c:	000b883a 	mov	r5,zero
   11470:	0005883a 	mov	r2,zero
   11474:	003f3506 	br	1114c <__alt_data_end+0xffff174c>
   11478:	01402034 	movhi	r5,128
   1147c:	297fffc4 	addi	r5,r5,-1
   11480:	0005883a 	mov	r2,zero
   11484:	003f2f06 	br	11144 <__alt_data_end+0xffff1744>
   11488:	3807883a 	mov	r3,r7
   1148c:	04003fc4 	movi	r16,255
   11490:	003ee606 	br	1102c <__alt_data_end+0xffff162c>
   11494:	3807883a 	mov	r3,r7
   11498:	003ee406 	br	1102c <__alt_data_end+0xffff162c>
   1149c:	00c00044 	movi	r3,1
   114a0:	003fbd06 	br	11398 <__alt_data_end+0xffff1998>
   114a4:	0005883a 	mov	r2,zero
   114a8:	003f2806 	br	1114c <__alt_data_end+0xffff174c>

000114ac <__fixsfsi>:
   114ac:	200ad5fa 	srli	r5,r4,23
   114b0:	00c02034 	movhi	r3,128
   114b4:	18ffffc4 	addi	r3,r3,-1
   114b8:	29403fcc 	andi	r5,r5,255
   114bc:	00801f84 	movi	r2,126
   114c0:	1906703a 	and	r3,r3,r4
   114c4:	2008d7fa 	srli	r4,r4,31
   114c8:	11400e0e 	bge	r2,r5,11504 <__fixsfsi+0x58>
   114cc:	00802744 	movi	r2,157
   114d0:	11400816 	blt	r2,r5,114f4 <__fixsfsi+0x48>
   114d4:	00802544 	movi	r2,149
   114d8:	18c02034 	orhi	r3,r3,128
   114dc:	11400b0e 	bge	r2,r5,1150c <__fixsfsi+0x60>
   114e0:	28bfda84 	addi	r2,r5,-150
   114e4:	1884983a 	sll	r2,r3,r2
   114e8:	20000726 	beq	r4,zero,11508 <__fixsfsi+0x5c>
   114ec:	0085c83a 	sub	r2,zero,r2
   114f0:	f800283a 	ret
   114f4:	00a00034 	movhi	r2,32768
   114f8:	10bfffc4 	addi	r2,r2,-1
   114fc:	2085883a 	add	r2,r4,r2
   11500:	f800283a 	ret
   11504:	0005883a 	mov	r2,zero
   11508:	f800283a 	ret
   1150c:	00802584 	movi	r2,150
   11510:	1145c83a 	sub	r2,r2,r5
   11514:	1884d83a 	srl	r2,r3,r2
   11518:	003ff306 	br	114e8 <__alt_data_end+0xffff1ae8>

0001151c <__floatunsisf>:
   1151c:	defffe04 	addi	sp,sp,-8
   11520:	dfc00115 	stw	ra,4(sp)
   11524:	dc000015 	stw	r16,0(sp)
   11528:	20002c26 	beq	r4,zero,115dc <__floatunsisf+0xc0>
   1152c:	2021883a 	mov	r16,r4
   11530:	001160c0 	call	1160c <__clzsi2>
   11534:	00c02784 	movi	r3,158
   11538:	1887c83a 	sub	r3,r3,r2
   1153c:	01002584 	movi	r4,150
   11540:	20c00f16 	blt	r4,r3,11580 <__floatunsisf+0x64>
   11544:	20c9c83a 	sub	r4,r4,r3
   11548:	8108983a 	sll	r4,r16,r4
   1154c:	00802034 	movhi	r2,128
   11550:	10bfffc4 	addi	r2,r2,-1
   11554:	2088703a 	and	r4,r4,r2
   11558:	18803fcc 	andi	r2,r3,255
   1155c:	100695fa 	slli	r3,r2,23
   11560:	00802034 	movhi	r2,128
   11564:	10bfffc4 	addi	r2,r2,-1
   11568:	2084703a 	and	r2,r4,r2
   1156c:	10c4b03a 	or	r2,r2,r3
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	dc000017 	ldw	r16,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret
   11580:	01002644 	movi	r4,153
   11584:	20c01816 	blt	r4,r3,115e8 <__floatunsisf+0xcc>
   11588:	20c9c83a 	sub	r4,r4,r3
   1158c:	8108983a 	sll	r4,r16,r4
   11590:	017f0034 	movhi	r5,64512
   11594:	297fffc4 	addi	r5,r5,-1
   11598:	218001cc 	andi	r6,r4,7
   1159c:	214a703a 	and	r5,r4,r5
   115a0:	30000426 	beq	r6,zero,115b4 <__floatunsisf+0x98>
   115a4:	210003cc 	andi	r4,r4,15
   115a8:	01800104 	movi	r6,4
   115ac:	21800126 	beq	r4,r6,115b4 <__floatunsisf+0x98>
   115b0:	298b883a 	add	r5,r5,r6
   115b4:	2901002c 	andhi	r4,r5,1024
   115b8:	20000526 	beq	r4,zero,115d0 <__floatunsisf+0xb4>
   115bc:	00c027c4 	movi	r3,159
   115c0:	1887c83a 	sub	r3,r3,r2
   115c4:	00bf0034 	movhi	r2,64512
   115c8:	10bfffc4 	addi	r2,r2,-1
   115cc:	288a703a 	and	r5,r5,r2
   115d0:	280891ba 	slli	r4,r5,6
   115d4:	2008d27a 	srli	r4,r4,9
   115d8:	003fdf06 	br	11558 <__alt_data_end+0xffff1b58>
   115dc:	0007883a 	mov	r3,zero
   115e0:	0009883a 	mov	r4,zero
   115e4:	003fdc06 	br	11558 <__alt_data_end+0xffff1b58>
   115e8:	01402e44 	movi	r5,185
   115ec:	28cbc83a 	sub	r5,r5,r3
   115f0:	01000144 	movi	r4,5
   115f4:	2089c83a 	sub	r4,r4,r2
   115f8:	814a983a 	sll	r5,r16,r5
   115fc:	8108d83a 	srl	r4,r16,r4
   11600:	2820c03a 	cmpne	r16,r5,zero
   11604:	2408b03a 	or	r4,r4,r16
   11608:	003fe106 	br	11590 <__alt_data_end+0xffff1b90>

0001160c <__clzsi2>:
   1160c:	00bfffd4 	movui	r2,65535
   11610:	11000536 	bltu	r2,r4,11628 <__clzsi2+0x1c>
   11614:	00803fc4 	movi	r2,255
   11618:	11000f36 	bltu	r2,r4,11658 <__clzsi2+0x4c>
   1161c:	00800804 	movi	r2,32
   11620:	0007883a 	mov	r3,zero
   11624:	00000506 	br	1163c <__clzsi2+0x30>
   11628:	00804034 	movhi	r2,256
   1162c:	10bfffc4 	addi	r2,r2,-1
   11630:	11000c2e 	bgeu	r2,r4,11664 <__clzsi2+0x58>
   11634:	00800204 	movi	r2,8
   11638:	00c00604 	movi	r3,24
   1163c:	20c8d83a 	srl	r4,r4,r3
   11640:	00c00074 	movhi	r3,1
   11644:	18d8a404 	addi	r3,r3,25232
   11648:	1909883a 	add	r4,r3,r4
   1164c:	20c00003 	ldbu	r3,0(r4)
   11650:	10c5c83a 	sub	r2,r2,r3
   11654:	f800283a 	ret
   11658:	00800604 	movi	r2,24
   1165c:	00c00204 	movi	r3,8
   11660:	003ff606 	br	1163c <__alt_data_end+0xffff1c3c>
   11664:	00800404 	movi	r2,16
   11668:	1007883a 	mov	r3,r2
   1166c:	003ff306 	br	1163c <__alt_data_end+0xffff1c3c>

00011670 <__mulsi3>:
   11670:	0005883a 	mov	r2,zero
   11674:	20000726 	beq	r4,zero,11694 <__mulsi3+0x24>
   11678:	20c0004c 	andi	r3,r4,1
   1167c:	2008d07a 	srli	r4,r4,1
   11680:	18000126 	beq	r3,zero,11688 <__mulsi3+0x18>
   11684:	1145883a 	add	r2,r2,r5
   11688:	294b883a 	add	r5,r5,r5
   1168c:	203ffa1e 	bne	r4,zero,11678 <__alt_data_end+0xffff1c78>
   11690:	f800283a 	ret
   11694:	f800283a 	ret

00011698 <_printf_r>:
   11698:	defffd04 	addi	sp,sp,-12
   1169c:	dfc00015 	stw	ra,0(sp)
   116a0:	d9800115 	stw	r6,4(sp)
   116a4:	d9c00215 	stw	r7,8(sp)
   116a8:	20c00217 	ldw	r3,8(r4)
   116ac:	01800074 	movhi	r6,1
   116b0:	31876104 	addi	r6,r6,7556
   116b4:	19800115 	stw	r6,4(r3)
   116b8:	280d883a 	mov	r6,r5
   116bc:	21400217 	ldw	r5,8(r4)
   116c0:	d9c00104 	addi	r7,sp,4
   116c4:	001183c0 	call	1183c <___vfprintf_internal_r>
   116c8:	dfc00017 	ldw	ra,0(sp)
   116cc:	dec00304 	addi	sp,sp,12
   116d0:	f800283a 	ret

000116d4 <printf>:
   116d4:	defffc04 	addi	sp,sp,-16
   116d8:	dfc00015 	stw	ra,0(sp)
   116dc:	d9400115 	stw	r5,4(sp)
   116e0:	d9800215 	stw	r6,8(sp)
   116e4:	d9c00315 	stw	r7,12(sp)
   116e8:	00800074 	movhi	r2,1
   116ec:	109dc604 	addi	r2,r2,30488
   116f0:	10800017 	ldw	r2,0(r2)
   116f4:	01400074 	movhi	r5,1
   116f8:	29476104 	addi	r5,r5,7556
   116fc:	10c00217 	ldw	r3,8(r2)
   11700:	d9800104 	addi	r6,sp,4
   11704:	19400115 	stw	r5,4(r3)
   11708:	200b883a 	mov	r5,r4
   1170c:	11000217 	ldw	r4,8(r2)
   11710:	0011d680 	call	11d68 <__vfprintf_internal>
   11714:	dfc00017 	ldw	ra,0(sp)
   11718:	dec00404 	addi	sp,sp,16
   1171c:	f800283a 	ret

00011720 <_puts_r>:
   11720:	defffd04 	addi	sp,sp,-12
   11724:	dc000015 	stw	r16,0(sp)
   11728:	2021883a 	mov	r16,r4
   1172c:	2809883a 	mov	r4,r5
   11730:	dfc00215 	stw	ra,8(sp)
   11734:	dc400115 	stw	r17,4(sp)
   11738:	2823883a 	mov	r17,r5
   1173c:	00117b40 	call	117b4 <strlen>
   11740:	81400217 	ldw	r5,8(r16)
   11744:	01000074 	movhi	r4,1
   11748:	21076104 	addi	r4,r4,7556
   1174c:	29000115 	stw	r4,4(r5)
   11750:	100f883a 	mov	r7,r2
   11754:	880d883a 	mov	r6,r17
   11758:	8009883a 	mov	r4,r16
   1175c:	0011d840 	call	11d84 <__sfvwrite_small_dev>
   11760:	00ffffc4 	movi	r3,-1
   11764:	10c00926 	beq	r2,r3,1178c <_puts_r+0x6c>
   11768:	81400217 	ldw	r5,8(r16)
   1176c:	01800074 	movhi	r6,1
   11770:	01c00044 	movi	r7,1
   11774:	28800117 	ldw	r2,4(r5)
   11778:	3198e404 	addi	r6,r6,25488
   1177c:	8009883a 	mov	r4,r16
   11780:	103ee83a 	callr	r2
   11784:	10bfffe0 	cmpeqi	r2,r2,-1
   11788:	0085c83a 	sub	r2,zero,r2
   1178c:	dfc00217 	ldw	ra,8(sp)
   11790:	dc400117 	ldw	r17,4(sp)
   11794:	dc000017 	ldw	r16,0(sp)
   11798:	dec00304 	addi	sp,sp,12
   1179c:	f800283a 	ret

000117a0 <puts>:
   117a0:	00800074 	movhi	r2,1
   117a4:	109dc604 	addi	r2,r2,30488
   117a8:	200b883a 	mov	r5,r4
   117ac:	11000017 	ldw	r4,0(r2)
   117b0:	00117201 	jmpi	11720 <_puts_r>

000117b4 <strlen>:
   117b4:	2005883a 	mov	r2,r4
   117b8:	10c00007 	ldb	r3,0(r2)
   117bc:	18000226 	beq	r3,zero,117c8 <strlen+0x14>
   117c0:	10800044 	addi	r2,r2,1
   117c4:	003ffc06 	br	117b8 <__alt_data_end+0xffff1db8>
   117c8:	1105c83a 	sub	r2,r2,r4
   117cc:	f800283a 	ret

000117d0 <print_repeat>:
   117d0:	defffb04 	addi	sp,sp,-20
   117d4:	dc800315 	stw	r18,12(sp)
   117d8:	dc400215 	stw	r17,8(sp)
   117dc:	dc000115 	stw	r16,4(sp)
   117e0:	dfc00415 	stw	ra,16(sp)
   117e4:	2025883a 	mov	r18,r4
   117e8:	2823883a 	mov	r17,r5
   117ec:	d9800005 	stb	r6,0(sp)
   117f0:	3821883a 	mov	r16,r7
   117f4:	04000a0e 	bge	zero,r16,11820 <print_repeat+0x50>
   117f8:	88800117 	ldw	r2,4(r17)
   117fc:	01c00044 	movi	r7,1
   11800:	d80d883a 	mov	r6,sp
   11804:	880b883a 	mov	r5,r17
   11808:	9009883a 	mov	r4,r18
   1180c:	103ee83a 	callr	r2
   11810:	843fffc4 	addi	r16,r16,-1
   11814:	103ff726 	beq	r2,zero,117f4 <__alt_data_end+0xffff1df4>
   11818:	00bfffc4 	movi	r2,-1
   1181c:	00000106 	br	11824 <print_repeat+0x54>
   11820:	0005883a 	mov	r2,zero
   11824:	dfc00417 	ldw	ra,16(sp)
   11828:	dc800317 	ldw	r18,12(sp)
   1182c:	dc400217 	ldw	r17,8(sp)
   11830:	dc000117 	ldw	r16,4(sp)
   11834:	dec00504 	addi	sp,sp,20
   11838:	f800283a 	ret

0001183c <___vfprintf_internal_r>:
   1183c:	deffe504 	addi	sp,sp,-108
   11840:	d8c00804 	addi	r3,sp,32
   11844:	ddc01815 	stw	r23,96(sp)
   11848:	dd801715 	stw	r22,92(sp)
   1184c:	dd401615 	stw	r21,88(sp)
   11850:	dd001515 	stw	r20,84(sp)
   11854:	dcc01415 	stw	r19,80(sp)
   11858:	dc801315 	stw	r18,76(sp)
   1185c:	dc401215 	stw	r17,72(sp)
   11860:	dc001115 	stw	r16,68(sp)
   11864:	dfc01a15 	stw	ra,104(sp)
   11868:	df001915 	stw	fp,100(sp)
   1186c:	2029883a 	mov	r20,r4
   11870:	2823883a 	mov	r17,r5
   11874:	382d883a 	mov	r22,r7
   11878:	d9800f15 	stw	r6,60(sp)
   1187c:	0021883a 	mov	r16,zero
   11880:	d8000e15 	stw	zero,56(sp)
   11884:	d8000a15 	stw	zero,40(sp)
   11888:	002b883a 	mov	r21,zero
   1188c:	0027883a 	mov	r19,zero
   11890:	0025883a 	mov	r18,zero
   11894:	d8000c15 	stw	zero,48(sp)
   11898:	d8000b15 	stw	zero,44(sp)
   1189c:	002f883a 	mov	r23,zero
   118a0:	d8c00915 	stw	r3,36(sp)
   118a4:	d8c00f17 	ldw	r3,60(sp)
   118a8:	19000003 	ldbu	r4,0(r3)
   118ac:	20803fcc 	andi	r2,r4,255
   118b0:	1080201c 	xori	r2,r2,128
   118b4:	10bfe004 	addi	r2,r2,-128
   118b8:	10011e26 	beq	r2,zero,11d34 <___vfprintf_internal_r+0x4f8>
   118bc:	00c00044 	movi	r3,1
   118c0:	b8c01426 	beq	r23,r3,11914 <___vfprintf_internal_r+0xd8>
   118c4:	1dc00216 	blt	r3,r23,118d0 <___vfprintf_internal_r+0x94>
   118c8:	b8000626 	beq	r23,zero,118e4 <___vfprintf_internal_r+0xa8>
   118cc:	00011506 	br	11d24 <___vfprintf_internal_r+0x4e8>
   118d0:	01400084 	movi	r5,2
   118d4:	b9401d26 	beq	r23,r5,1194c <___vfprintf_internal_r+0x110>
   118d8:	014000c4 	movi	r5,3
   118dc:	b9402b26 	beq	r23,r5,1198c <___vfprintf_internal_r+0x150>
   118e0:	00011006 	br	11d24 <___vfprintf_internal_r+0x4e8>
   118e4:	01400944 	movi	r5,37
   118e8:	1140fc26 	beq	r2,r5,11cdc <___vfprintf_internal_r+0x4a0>
   118ec:	88800117 	ldw	r2,4(r17)
   118f0:	d9000005 	stb	r4,0(sp)
   118f4:	01c00044 	movi	r7,1
   118f8:	d80d883a 	mov	r6,sp
   118fc:	880b883a 	mov	r5,r17
   11900:	a009883a 	mov	r4,r20
   11904:	103ee83a 	callr	r2
   11908:	1000d81e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   1190c:	84000044 	addi	r16,r16,1
   11910:	00010406 	br	11d24 <___vfprintf_internal_r+0x4e8>
   11914:	01400c04 	movi	r5,48
   11918:	1140fa26 	beq	r2,r5,11d04 <___vfprintf_internal_r+0x4c8>
   1191c:	01400944 	movi	r5,37
   11920:	11400a1e 	bne	r2,r5,1194c <___vfprintf_internal_r+0x110>
   11924:	d8800005 	stb	r2,0(sp)
   11928:	88800117 	ldw	r2,4(r17)
   1192c:	b80f883a 	mov	r7,r23
   11930:	d80d883a 	mov	r6,sp
   11934:	880b883a 	mov	r5,r17
   11938:	a009883a 	mov	r4,r20
   1193c:	103ee83a 	callr	r2
   11940:	1000ca1e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11944:	84000044 	addi	r16,r16,1
   11948:	0000f506 	br	11d20 <___vfprintf_internal_r+0x4e4>
   1194c:	25fff404 	addi	r23,r4,-48
   11950:	bdc03fcc 	andi	r23,r23,255
   11954:	00c00244 	movi	r3,9
   11958:	1dc00936 	bltu	r3,r23,11980 <___vfprintf_internal_r+0x144>
   1195c:	00bfffc4 	movi	r2,-1
   11960:	90800426 	beq	r18,r2,11974 <___vfprintf_internal_r+0x138>
   11964:	01400284 	movi	r5,10
   11968:	9009883a 	mov	r4,r18
   1196c:	00116700 	call	11670 <__mulsi3>
   11970:	00000106 	br	11978 <___vfprintf_internal_r+0x13c>
   11974:	0005883a 	mov	r2,zero
   11978:	b8a5883a 	add	r18,r23,r2
   1197c:	0000e206 	br	11d08 <___vfprintf_internal_r+0x4cc>
   11980:	01400b84 	movi	r5,46
   11984:	1140e426 	beq	r2,r5,11d18 <___vfprintf_internal_r+0x4dc>
   11988:	05c00084 	movi	r23,2
   1198c:	213ff404 	addi	r4,r4,-48
   11990:	27003fcc 	andi	fp,r4,255
   11994:	00c00244 	movi	r3,9
   11998:	1f000936 	bltu	r3,fp,119c0 <___vfprintf_internal_r+0x184>
   1199c:	00bfffc4 	movi	r2,-1
   119a0:	98800426 	beq	r19,r2,119b4 <___vfprintf_internal_r+0x178>
   119a4:	01400284 	movi	r5,10
   119a8:	9809883a 	mov	r4,r19
   119ac:	00116700 	call	11670 <__mulsi3>
   119b0:	00000106 	br	119b8 <___vfprintf_internal_r+0x17c>
   119b4:	0005883a 	mov	r2,zero
   119b8:	e0a7883a 	add	r19,fp,r2
   119bc:	0000d906 	br	11d24 <___vfprintf_internal_r+0x4e8>
   119c0:	00c01b04 	movi	r3,108
   119c4:	10c0d226 	beq	r2,r3,11d10 <___vfprintf_internal_r+0x4d4>
   119c8:	013fffc4 	movi	r4,-1
   119cc:	99000226 	beq	r19,r4,119d8 <___vfprintf_internal_r+0x19c>
   119d0:	d8000b15 	stw	zero,44(sp)
   119d4:	00000106 	br	119dc <___vfprintf_internal_r+0x1a0>
   119d8:	04c00044 	movi	r19,1
   119dc:	01001a44 	movi	r4,105
   119e0:	11001626 	beq	r2,r4,11a3c <___vfprintf_internal_r+0x200>
   119e4:	20800916 	blt	r4,r2,11a0c <___vfprintf_internal_r+0x1d0>
   119e8:	010018c4 	movi	r4,99
   119ec:	11008826 	beq	r2,r4,11c10 <___vfprintf_internal_r+0x3d4>
   119f0:	01001904 	movi	r4,100
   119f4:	11001126 	beq	r2,r4,11a3c <___vfprintf_internal_r+0x200>
   119f8:	01001604 	movi	r4,88
   119fc:	1100c81e 	bne	r2,r4,11d20 <___vfprintf_internal_r+0x4e4>
   11a00:	00c00044 	movi	r3,1
   11a04:	d8c00e15 	stw	r3,56(sp)
   11a08:	00001506 	br	11a60 <___vfprintf_internal_r+0x224>
   11a0c:	01001cc4 	movi	r4,115
   11a10:	11009826 	beq	r2,r4,11c74 <___vfprintf_internal_r+0x438>
   11a14:	20800416 	blt	r4,r2,11a28 <___vfprintf_internal_r+0x1ec>
   11a18:	01001bc4 	movi	r4,111
   11a1c:	1100c01e 	bne	r2,r4,11d20 <___vfprintf_internal_r+0x4e4>
   11a20:	05400204 	movi	r21,8
   11a24:	00000f06 	br	11a64 <___vfprintf_internal_r+0x228>
   11a28:	01001d44 	movi	r4,117
   11a2c:	11000d26 	beq	r2,r4,11a64 <___vfprintf_internal_r+0x228>
   11a30:	01001e04 	movi	r4,120
   11a34:	11000a26 	beq	r2,r4,11a60 <___vfprintf_internal_r+0x224>
   11a38:	0000b906 	br	11d20 <___vfprintf_internal_r+0x4e4>
   11a3c:	d8c00a17 	ldw	r3,40(sp)
   11a40:	b7000104 	addi	fp,r22,4
   11a44:	18000726 	beq	r3,zero,11a64 <___vfprintf_internal_r+0x228>
   11a48:	df000d15 	stw	fp,52(sp)
   11a4c:	b5c00017 	ldw	r23,0(r22)
   11a50:	b800080e 	bge	r23,zero,11a74 <___vfprintf_internal_r+0x238>
   11a54:	05efc83a 	sub	r23,zero,r23
   11a58:	02400044 	movi	r9,1
   11a5c:	00000606 	br	11a78 <___vfprintf_internal_r+0x23c>
   11a60:	05400404 	movi	r21,16
   11a64:	b0c00104 	addi	r3,r22,4
   11a68:	d8c00d15 	stw	r3,52(sp)
   11a6c:	b5c00017 	ldw	r23,0(r22)
   11a70:	d8000a15 	stw	zero,40(sp)
   11a74:	0013883a 	mov	r9,zero
   11a78:	d839883a 	mov	fp,sp
   11a7c:	b8001726 	beq	r23,zero,11adc <___vfprintf_internal_r+0x2a0>
   11a80:	a80b883a 	mov	r5,r21
   11a84:	b809883a 	mov	r4,r23
   11a88:	da401015 	stw	r9,64(sp)
   11a8c:	0010a200 	call	10a20 <__udivsi3>
   11a90:	a80b883a 	mov	r5,r21
   11a94:	1009883a 	mov	r4,r2
   11a98:	102d883a 	mov	r22,r2
   11a9c:	00116700 	call	11670 <__mulsi3>
   11aa0:	b885c83a 	sub	r2,r23,r2
   11aa4:	00c00244 	movi	r3,9
   11aa8:	da401017 	ldw	r9,64(sp)
   11aac:	18800216 	blt	r3,r2,11ab8 <___vfprintf_internal_r+0x27c>
   11ab0:	10800c04 	addi	r2,r2,48
   11ab4:	00000506 	br	11acc <___vfprintf_internal_r+0x290>
   11ab8:	d8c00e17 	ldw	r3,56(sp)
   11abc:	18000226 	beq	r3,zero,11ac8 <___vfprintf_internal_r+0x28c>
   11ac0:	10800dc4 	addi	r2,r2,55
   11ac4:	00000106 	br	11acc <___vfprintf_internal_r+0x290>
   11ac8:	108015c4 	addi	r2,r2,87
   11acc:	e0800005 	stb	r2,0(fp)
   11ad0:	b02f883a 	mov	r23,r22
   11ad4:	e7000044 	addi	fp,fp,1
   11ad8:	003fe806 	br	11a7c <__alt_data_end+0xffff207c>
   11adc:	e6efc83a 	sub	r23,fp,sp
   11ae0:	9dc5c83a 	sub	r2,r19,r23
   11ae4:	0080090e 	bge	zero,r2,11b0c <___vfprintf_internal_r+0x2d0>
   11ae8:	e085883a 	add	r2,fp,r2
   11aec:	01400c04 	movi	r5,48
   11af0:	d8c00917 	ldw	r3,36(sp)
   11af4:	e009883a 	mov	r4,fp
   11af8:	e0c0032e 	bgeu	fp,r3,11b08 <___vfprintf_internal_r+0x2cc>
   11afc:	e7000044 	addi	fp,fp,1
   11b00:	21400005 	stb	r5,0(r4)
   11b04:	e0bffa1e 	bne	fp,r2,11af0 <__alt_data_end+0xffff20f0>
   11b08:	e6efc83a 	sub	r23,fp,sp
   11b0c:	d8c00b17 	ldw	r3,44(sp)
   11b10:	4dd1883a 	add	r8,r9,r23
   11b14:	922dc83a 	sub	r22,r18,r8
   11b18:	18001626 	beq	r3,zero,11b74 <___vfprintf_internal_r+0x338>
   11b1c:	48000a26 	beq	r9,zero,11b48 <___vfprintf_internal_r+0x30c>
   11b20:	00800b44 	movi	r2,45
   11b24:	d8800805 	stb	r2,32(sp)
   11b28:	88800117 	ldw	r2,4(r17)
   11b2c:	01c00044 	movi	r7,1
   11b30:	d9800804 	addi	r6,sp,32
   11b34:	880b883a 	mov	r5,r17
   11b38:	a009883a 	mov	r4,r20
   11b3c:	103ee83a 	callr	r2
   11b40:	10004a1e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11b44:	84000044 	addi	r16,r16,1
   11b48:	0580070e 	bge	zero,r22,11b68 <___vfprintf_internal_r+0x32c>
   11b4c:	b00f883a 	mov	r7,r22
   11b50:	01800c04 	movi	r6,48
   11b54:	880b883a 	mov	r5,r17
   11b58:	a009883a 	mov	r4,r20
   11b5c:	00117d00 	call	117d0 <print_repeat>
   11b60:	1000421e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11b64:	85a1883a 	add	r16,r16,r22
   11b68:	e02d883a 	mov	r22,fp
   11b6c:	bf2fc83a 	sub	r23,r23,fp
   11b70:	00002006 	br	11bf4 <___vfprintf_internal_r+0x3b8>
   11b74:	0580090e 	bge	zero,r22,11b9c <___vfprintf_internal_r+0x360>
   11b78:	b00f883a 	mov	r7,r22
   11b7c:	01800804 	movi	r6,32
   11b80:	880b883a 	mov	r5,r17
   11b84:	a009883a 	mov	r4,r20
   11b88:	da401015 	stw	r9,64(sp)
   11b8c:	00117d00 	call	117d0 <print_repeat>
   11b90:	da401017 	ldw	r9,64(sp)
   11b94:	1000351e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11b98:	85a1883a 	add	r16,r16,r22
   11b9c:	483ff226 	beq	r9,zero,11b68 <__alt_data_end+0xffff2168>
   11ba0:	00800b44 	movi	r2,45
   11ba4:	d8800805 	stb	r2,32(sp)
   11ba8:	88800117 	ldw	r2,4(r17)
   11bac:	01c00044 	movi	r7,1
   11bb0:	d9800804 	addi	r6,sp,32
   11bb4:	880b883a 	mov	r5,r17
   11bb8:	a009883a 	mov	r4,r20
   11bbc:	103ee83a 	callr	r2
   11bc0:	10002a1e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11bc4:	84000044 	addi	r16,r16,1
   11bc8:	003fe706 	br	11b68 <__alt_data_end+0xffff2168>
   11bcc:	b5bfffc4 	addi	r22,r22,-1
   11bd0:	b0800003 	ldbu	r2,0(r22)
   11bd4:	01c00044 	movi	r7,1
   11bd8:	d9800804 	addi	r6,sp,32
   11bdc:	d8800805 	stb	r2,32(sp)
   11be0:	88800117 	ldw	r2,4(r17)
   11be4:	880b883a 	mov	r5,r17
   11be8:	a009883a 	mov	r4,r20
   11bec:	103ee83a 	callr	r2
   11bf0:	10001e1e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11bf4:	8585c83a 	sub	r2,r16,r22
   11bf8:	b5c9883a 	add	r4,r22,r23
   11bfc:	e085883a 	add	r2,fp,r2
   11c00:	013ff216 	blt	zero,r4,11bcc <__alt_data_end+0xffff21cc>
   11c04:	1021883a 	mov	r16,r2
   11c08:	dd800d17 	ldw	r22,52(sp)
   11c0c:	00004406 	br	11d20 <___vfprintf_internal_r+0x4e4>
   11c10:	00800044 	movi	r2,1
   11c14:	1480080e 	bge	r2,r18,11c38 <___vfprintf_internal_r+0x3fc>
   11c18:	95ffffc4 	addi	r23,r18,-1
   11c1c:	b80f883a 	mov	r7,r23
   11c20:	01800804 	movi	r6,32
   11c24:	880b883a 	mov	r5,r17
   11c28:	a009883a 	mov	r4,r20
   11c2c:	00117d00 	call	117d0 <print_repeat>
   11c30:	10000e1e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11c34:	85e1883a 	add	r16,r16,r23
   11c38:	b0800017 	ldw	r2,0(r22)
   11c3c:	01c00044 	movi	r7,1
   11c40:	d80d883a 	mov	r6,sp
   11c44:	d8800005 	stb	r2,0(sp)
   11c48:	88800117 	ldw	r2,4(r17)
   11c4c:	880b883a 	mov	r5,r17
   11c50:	a009883a 	mov	r4,r20
   11c54:	b5c00104 	addi	r23,r22,4
   11c58:	103ee83a 	callr	r2
   11c5c:	1000031e 	bne	r2,zero,11c6c <___vfprintf_internal_r+0x430>
   11c60:	84000044 	addi	r16,r16,1
   11c64:	b82d883a 	mov	r22,r23
   11c68:	00002d06 	br	11d20 <___vfprintf_internal_r+0x4e4>
   11c6c:	00bfffc4 	movi	r2,-1
   11c70:	00003106 	br	11d38 <___vfprintf_internal_r+0x4fc>
   11c74:	b5c00017 	ldw	r23,0(r22)
   11c78:	b7000104 	addi	fp,r22,4
   11c7c:	b809883a 	mov	r4,r23
   11c80:	00117b40 	call	117b4 <strlen>
   11c84:	9091c83a 	sub	r8,r18,r2
   11c88:	102d883a 	mov	r22,r2
   11c8c:	0200090e 	bge	zero,r8,11cb4 <___vfprintf_internal_r+0x478>
   11c90:	400f883a 	mov	r7,r8
   11c94:	01800804 	movi	r6,32
   11c98:	880b883a 	mov	r5,r17
   11c9c:	a009883a 	mov	r4,r20
   11ca0:	da001015 	stw	r8,64(sp)
   11ca4:	00117d00 	call	117d0 <print_repeat>
   11ca8:	da001017 	ldw	r8,64(sp)
   11cac:	103fef1e 	bne	r2,zero,11c6c <__alt_data_end+0xffff226c>
   11cb0:	8221883a 	add	r16,r16,r8
   11cb4:	88800117 	ldw	r2,4(r17)
   11cb8:	b00f883a 	mov	r7,r22
   11cbc:	b80d883a 	mov	r6,r23
   11cc0:	880b883a 	mov	r5,r17
   11cc4:	a009883a 	mov	r4,r20
   11cc8:	103ee83a 	callr	r2
   11ccc:	103fe71e 	bne	r2,zero,11c6c <__alt_data_end+0xffff226c>
   11cd0:	85a1883a 	add	r16,r16,r22
   11cd4:	e02d883a 	mov	r22,fp
   11cd8:	00001106 	br	11d20 <___vfprintf_internal_r+0x4e4>
   11cdc:	00c00044 	movi	r3,1
   11ce0:	04ffffc4 	movi	r19,-1
   11ce4:	d8000e15 	stw	zero,56(sp)
   11ce8:	d8c00a15 	stw	r3,40(sp)
   11cec:	05400284 	movi	r21,10
   11cf0:	9825883a 	mov	r18,r19
   11cf4:	d8000c15 	stw	zero,48(sp)
   11cf8:	d8000b15 	stw	zero,44(sp)
   11cfc:	182f883a 	mov	r23,r3
   11d00:	00000806 	br	11d24 <___vfprintf_internal_r+0x4e8>
   11d04:	ddc00b15 	stw	r23,44(sp)
   11d08:	05c00084 	movi	r23,2
   11d0c:	00000506 	br	11d24 <___vfprintf_internal_r+0x4e8>
   11d10:	00c00044 	movi	r3,1
   11d14:	d8c00c15 	stw	r3,48(sp)
   11d18:	05c000c4 	movi	r23,3
   11d1c:	00000106 	br	11d24 <___vfprintf_internal_r+0x4e8>
   11d20:	002f883a 	mov	r23,zero
   11d24:	d8c00f17 	ldw	r3,60(sp)
   11d28:	18c00044 	addi	r3,r3,1
   11d2c:	d8c00f15 	stw	r3,60(sp)
   11d30:	003edc06 	br	118a4 <__alt_data_end+0xffff1ea4>
   11d34:	8005883a 	mov	r2,r16
   11d38:	dfc01a17 	ldw	ra,104(sp)
   11d3c:	df001917 	ldw	fp,100(sp)
   11d40:	ddc01817 	ldw	r23,96(sp)
   11d44:	dd801717 	ldw	r22,92(sp)
   11d48:	dd401617 	ldw	r21,88(sp)
   11d4c:	dd001517 	ldw	r20,84(sp)
   11d50:	dcc01417 	ldw	r19,80(sp)
   11d54:	dc801317 	ldw	r18,76(sp)
   11d58:	dc401217 	ldw	r17,72(sp)
   11d5c:	dc001117 	ldw	r16,68(sp)
   11d60:	dec01b04 	addi	sp,sp,108
   11d64:	f800283a 	ret

00011d68 <__vfprintf_internal>:
   11d68:	00800074 	movhi	r2,1
   11d6c:	109dc604 	addi	r2,r2,30488
   11d70:	300f883a 	mov	r7,r6
   11d74:	280d883a 	mov	r6,r5
   11d78:	200b883a 	mov	r5,r4
   11d7c:	11000017 	ldw	r4,0(r2)
   11d80:	001183c1 	jmpi	1183c <___vfprintf_internal_r>

00011d84 <__sfvwrite_small_dev>:
   11d84:	2880000b 	ldhu	r2,0(r5)
   11d88:	1080020c 	andi	r2,r2,8
   11d8c:	10002126 	beq	r2,zero,11e14 <__sfvwrite_small_dev+0x90>
   11d90:	2880008f 	ldh	r2,2(r5)
   11d94:	defffa04 	addi	sp,sp,-24
   11d98:	dc000015 	stw	r16,0(sp)
   11d9c:	dfc00515 	stw	ra,20(sp)
   11da0:	dd000415 	stw	r20,16(sp)
   11da4:	dcc00315 	stw	r19,12(sp)
   11da8:	dc800215 	stw	r18,8(sp)
   11dac:	dc400115 	stw	r17,4(sp)
   11db0:	2821883a 	mov	r16,r5
   11db4:	10001216 	blt	r2,zero,11e00 <__sfvwrite_small_dev+0x7c>
   11db8:	2027883a 	mov	r19,r4
   11dbc:	3025883a 	mov	r18,r6
   11dc0:	3823883a 	mov	r17,r7
   11dc4:	05010004 	movi	r20,1024
   11dc8:	04400b0e 	bge	zero,r17,11df8 <__sfvwrite_small_dev+0x74>
   11dcc:	880f883a 	mov	r7,r17
   11dd0:	a440010e 	bge	r20,r17,11dd8 <__sfvwrite_small_dev+0x54>
   11dd4:	01c10004 	movi	r7,1024
   11dd8:	8140008f 	ldh	r5,2(r16)
   11ddc:	900d883a 	mov	r6,r18
   11de0:	9809883a 	mov	r4,r19
   11de4:	0011e3c0 	call	11e3c <_write_r>
   11de8:	0080050e 	bge	zero,r2,11e00 <__sfvwrite_small_dev+0x7c>
   11dec:	88a3c83a 	sub	r17,r17,r2
   11df0:	90a5883a 	add	r18,r18,r2
   11df4:	003ff406 	br	11dc8 <__alt_data_end+0xffff23c8>
   11df8:	0005883a 	mov	r2,zero
   11dfc:	00000706 	br	11e1c <__sfvwrite_small_dev+0x98>
   11e00:	8080000b 	ldhu	r2,0(r16)
   11e04:	10801014 	ori	r2,r2,64
   11e08:	8080000d 	sth	r2,0(r16)
   11e0c:	00bfffc4 	movi	r2,-1
   11e10:	00000206 	br	11e1c <__sfvwrite_small_dev+0x98>
   11e14:	00bfffc4 	movi	r2,-1
   11e18:	f800283a 	ret
   11e1c:	dfc00517 	ldw	ra,20(sp)
   11e20:	dd000417 	ldw	r20,16(sp)
   11e24:	dcc00317 	ldw	r19,12(sp)
   11e28:	dc800217 	ldw	r18,8(sp)
   11e2c:	dc400117 	ldw	r17,4(sp)
   11e30:	dc000017 	ldw	r16,0(sp)
   11e34:	dec00604 	addi	sp,sp,24
   11e38:	f800283a 	ret

00011e3c <_write_r>:
   11e3c:	defffd04 	addi	sp,sp,-12
   11e40:	dc000015 	stw	r16,0(sp)
   11e44:	040000b4 	movhi	r16,2
   11e48:	dc400115 	stw	r17,4(sp)
   11e4c:	8422a704 	addi	r16,r16,-30052
   11e50:	2023883a 	mov	r17,r4
   11e54:	2809883a 	mov	r4,r5
   11e58:	300b883a 	mov	r5,r6
   11e5c:	380d883a 	mov	r6,r7
   11e60:	dfc00215 	stw	ra,8(sp)
   11e64:	80000015 	stw	zero,0(r16)
   11e68:	00120380 	call	12038 <write>
   11e6c:	00ffffc4 	movi	r3,-1
   11e70:	10c0031e 	bne	r2,r3,11e80 <_write_r+0x44>
   11e74:	80c00017 	ldw	r3,0(r16)
   11e78:	18000126 	beq	r3,zero,11e80 <_write_r+0x44>
   11e7c:	88c00015 	stw	r3,0(r17)
   11e80:	dfc00217 	ldw	ra,8(sp)
   11e84:	dc400117 	ldw	r17,4(sp)
   11e88:	dc000017 	ldw	r16,0(sp)
   11e8c:	dec00304 	addi	sp,sp,12
   11e90:	f800283a 	ret

00011e94 <alt_load_section>:
   11e94:	defffc04 	addi	sp,sp,-16
   11e98:	df000315 	stw	fp,12(sp)
   11e9c:	df000304 	addi	fp,sp,12
   11ea0:	e13ffd15 	stw	r4,-12(fp)
   11ea4:	e17ffe15 	stw	r5,-8(fp)
   11ea8:	e1bfff15 	stw	r6,-4(fp)
   11eac:	e0fffe17 	ldw	r3,-8(fp)
   11eb0:	e0bffd17 	ldw	r2,-12(fp)
   11eb4:	18800c26 	beq	r3,r2,11ee8 <alt_load_section+0x54>
   11eb8:	00000806 	br	11edc <alt_load_section+0x48>
   11ebc:	e0bffe17 	ldw	r2,-8(fp)
   11ec0:	10c00104 	addi	r3,r2,4
   11ec4:	e0fffe15 	stw	r3,-8(fp)
   11ec8:	e0fffd17 	ldw	r3,-12(fp)
   11ecc:	19000104 	addi	r4,r3,4
   11ed0:	e13ffd15 	stw	r4,-12(fp)
   11ed4:	18c00017 	ldw	r3,0(r3)
   11ed8:	10c00015 	stw	r3,0(r2)
   11edc:	e0fffe17 	ldw	r3,-8(fp)
   11ee0:	e0bfff17 	ldw	r2,-4(fp)
   11ee4:	18bff51e 	bne	r3,r2,11ebc <__alt_data_end+0xffff24bc>
   11ee8:	0001883a 	nop
   11eec:	e037883a 	mov	sp,fp
   11ef0:	df000017 	ldw	fp,0(sp)
   11ef4:	dec00104 	addi	sp,sp,4
   11ef8:	f800283a 	ret

00011efc <alt_load>:
   11efc:	defffe04 	addi	sp,sp,-8
   11f00:	dfc00115 	stw	ra,4(sp)
   11f04:	df000015 	stw	fp,0(sp)
   11f08:	d839883a 	mov	fp,sp
   11f0c:	01800074 	movhi	r6,1
   11f10:	319dd204 	addi	r6,r6,30536
   11f14:	01400074 	movhi	r5,1
   11f18:	2958fd04 	addi	r5,r5,25588
   11f1c:	01000074 	movhi	r4,1
   11f20:	211dd204 	addi	r4,r4,30536
   11f24:	0011e940 	call	11e94 <alt_load_section>
   11f28:	01800074 	movhi	r6,1
   11f2c:	31808c04 	addi	r6,r6,560
   11f30:	01400074 	movhi	r5,1
   11f34:	29400804 	addi	r5,r5,32
   11f38:	01000074 	movhi	r4,1
   11f3c:	21000804 	addi	r4,r4,32
   11f40:	0011e940 	call	11e94 <alt_load_section>
   11f44:	01800074 	movhi	r6,1
   11f48:	3198fd04 	addi	r6,r6,25588
   11f4c:	01400074 	movhi	r5,1
   11f50:	29582a04 	addi	r5,r5,24744
   11f54:	01000074 	movhi	r4,1
   11f58:	21182a04 	addi	r4,r4,24744
   11f5c:	0011e940 	call	11e94 <alt_load_section>
   11f60:	0014c180 	call	14c18 <alt_dcache_flush_all>
   11f64:	0014e940 	call	14e94 <alt_icache_flush_all>
   11f68:	0001883a 	nop
   11f6c:	e037883a 	mov	sp,fp
   11f70:	dfc00117 	ldw	ra,4(sp)
   11f74:	df000017 	ldw	fp,0(sp)
   11f78:	dec00204 	addi	sp,sp,8
   11f7c:	f800283a 	ret

00011f80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11f80:	defffd04 	addi	sp,sp,-12
   11f84:	dfc00215 	stw	ra,8(sp)
   11f88:	df000115 	stw	fp,4(sp)
   11f8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11f90:	0009883a 	mov	r4,zero
   11f94:	001216c0 	call	1216c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   11f98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11f9c:	00121a40 	call	121a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11fa0:	01800074 	movhi	r6,1
   11fa4:	3198e504 	addi	r6,r6,25492
   11fa8:	01400074 	movhi	r5,1
   11fac:	2958e504 	addi	r5,r5,25492
   11fb0:	01000074 	movhi	r4,1
   11fb4:	2118e504 	addi	r4,r4,25492
   11fb8:	00152380 	call	15238 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11fbc:	0014d440 	call	14d44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11fc0:	01000074 	movhi	r4,1
   11fc4:	21136904 	addi	r4,r4,19876
   11fc8:	0015c540 	call	15c54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11fcc:	d0a4e317 	ldw	r2,-27764(gp)
   11fd0:	d0e4e417 	ldw	r3,-27760(gp)
   11fd4:	d124e517 	ldw	r4,-27756(gp)
   11fd8:	200d883a 	mov	r6,r4
   11fdc:	180b883a 	mov	r5,r3
   11fe0:	1009883a 	mov	r4,r2
   11fe4:	00105c80 	call	105c8 <main>
   11fe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11fec:	01000044 	movi	r4,1
   11ff0:	0014b400 	call	14b40 <close>
  exit (result);
   11ff4:	e13fff17 	ldw	r4,-4(fp)
   11ff8:	0015c680 	call	15c68 <exit>

00011ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ffc:	defffe04 	addi	sp,sp,-8
   12000:	dfc00115 	stw	ra,4(sp)
   12004:	df000015 	stw	fp,0(sp)
   12008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1200c:	d0a00917 	ldw	r2,-32732(gp)
   12010:	10000326 	beq	r2,zero,12020 <alt_get_errno+0x24>
   12014:	d0a00917 	ldw	r2,-32732(gp)
   12018:	103ee83a 	callr	r2
   1201c:	00000106 	br	12024 <alt_get_errno+0x28>
   12020:	d0a4e204 	addi	r2,gp,-27768
}
   12024:	e037883a 	mov	sp,fp
   12028:	dfc00117 	ldw	ra,4(sp)
   1202c:	df000017 	ldw	fp,0(sp)
   12030:	dec00204 	addi	sp,sp,8
   12034:	f800283a 	ret

00012038 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12038:	defff904 	addi	sp,sp,-28
   1203c:	dfc00615 	stw	ra,24(sp)
   12040:	df000515 	stw	fp,20(sp)
   12044:	df000504 	addi	fp,sp,20
   12048:	e13ffd15 	stw	r4,-12(fp)
   1204c:	e17ffe15 	stw	r5,-8(fp)
   12050:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12054:	e0bffd17 	ldw	r2,-12(fp)
   12058:	10000816 	blt	r2,zero,1207c <write+0x44>
   1205c:	01400304 	movi	r5,12
   12060:	e13ffd17 	ldw	r4,-12(fp)
   12064:	00116700 	call	11670 <__mulsi3>
   12068:	1007883a 	mov	r3,r2
   1206c:	00800074 	movhi	r2,1
   12070:	109d6504 	addi	r2,r2,30100
   12074:	1885883a 	add	r2,r3,r2
   12078:	00000106 	br	12080 <write+0x48>
   1207c:	0005883a 	mov	r2,zero
   12080:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12084:	e0bffb17 	ldw	r2,-20(fp)
   12088:	10002126 	beq	r2,zero,12110 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1208c:	e0bffb17 	ldw	r2,-20(fp)
   12090:	10800217 	ldw	r2,8(r2)
   12094:	108000cc 	andi	r2,r2,3
   12098:	10001826 	beq	r2,zero,120fc <write+0xc4>
   1209c:	e0bffb17 	ldw	r2,-20(fp)
   120a0:	10800017 	ldw	r2,0(r2)
   120a4:	10800617 	ldw	r2,24(r2)
   120a8:	10001426 	beq	r2,zero,120fc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   120ac:	e0bffb17 	ldw	r2,-20(fp)
   120b0:	10800017 	ldw	r2,0(r2)
   120b4:	10800617 	ldw	r2,24(r2)
   120b8:	e0ffff17 	ldw	r3,-4(fp)
   120bc:	180d883a 	mov	r6,r3
   120c0:	e17ffe17 	ldw	r5,-8(fp)
   120c4:	e13ffb17 	ldw	r4,-20(fp)
   120c8:	103ee83a 	callr	r2
   120cc:	e0bffc15 	stw	r2,-16(fp)
   120d0:	e0bffc17 	ldw	r2,-16(fp)
   120d4:	1000070e 	bge	r2,zero,120f4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   120d8:	0011ffc0 	call	11ffc <alt_get_errno>
   120dc:	1007883a 	mov	r3,r2
   120e0:	e0bffc17 	ldw	r2,-16(fp)
   120e4:	0085c83a 	sub	r2,zero,r2
   120e8:	18800015 	stw	r2,0(r3)
        return -1;
   120ec:	00bfffc4 	movi	r2,-1
   120f0:	00000c06 	br	12124 <write+0xec>
      }
      return rval;
   120f4:	e0bffc17 	ldw	r2,-16(fp)
   120f8:	00000a06 	br	12124 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   120fc:	0011ffc0 	call	11ffc <alt_get_errno>
   12100:	1007883a 	mov	r3,r2
   12104:	00800344 	movi	r2,13
   12108:	18800015 	stw	r2,0(r3)
   1210c:	00000406 	br	12120 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12110:	0011ffc0 	call	11ffc <alt_get_errno>
   12114:	1007883a 	mov	r3,r2
   12118:	00801444 	movi	r2,81
   1211c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12120:	00bfffc4 	movi	r2,-1
}
   12124:	e037883a 	mov	sp,fp
   12128:	dfc00117 	ldw	ra,4(sp)
   1212c:	df000017 	ldw	fp,0(sp)
   12130:	dec00204 	addi	sp,sp,8
   12134:	f800283a 	ret

00012138 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12138:	defffd04 	addi	sp,sp,-12
   1213c:	dfc00215 	stw	ra,8(sp)
   12140:	df000115 	stw	fp,4(sp)
   12144:	df000104 	addi	fp,sp,4
   12148:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1214c:	d1600604 	addi	r5,gp,-32744
   12150:	e13fff17 	ldw	r4,-4(fp)
   12154:	0014ca00 	call	14ca0 <alt_dev_llist_insert>
}
   12158:	e037883a 	mov	sp,fp
   1215c:	dfc00117 	ldw	ra,4(sp)
   12160:	df000017 	ldw	fp,0(sp)
   12164:	dec00204 	addi	sp,sp,8
   12168:	f800283a 	ret

0001216c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1216c:	defffd04 	addi	sp,sp,-12
   12170:	dfc00215 	stw	ra,8(sp)
   12174:	df000115 	stw	fp,4(sp)
   12178:	df000104 	addi	fp,sp,4
   1217c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   12180:	00159c80 	call	159c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12184:	00800044 	movi	r2,1
   12188:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1218c:	0001883a 	nop
   12190:	e037883a 	mov	sp,fp
   12194:	dfc00117 	ldw	ra,4(sp)
   12198:	df000017 	ldw	fp,0(sp)
   1219c:	dec00204 	addi	sp,sp,8
   121a0:	f800283a 	ret

000121a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   121a4:	defffe04 	addi	sp,sp,-8
   121a8:	dfc00115 	stw	ra,4(sp)
   121ac:	df000015 	stw	fp,0(sp)
   121b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   121b4:	01000074 	movhi	r4,1
   121b8:	21193504 	addi	r4,r4,25812
   121bc:	00124500 	call	12450 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   121c0:	01800044 	movi	r6,1
   121c4:	000b883a 	mov	r5,zero
   121c8:	01000074 	movhi	r4,1
   121cc:	21194d04 	addi	r4,r4,25908
   121d0:	0013f7c0 	call	13f7c <altera_avalon_jtag_uart_init>
   121d4:	01000074 	movhi	r4,1
   121d8:	21194304 	addi	r4,r4,25868
   121dc:	00121380 	call	12138 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   121e0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   121e4:	0001883a 	nop
}
   121e8:	0001883a 	nop
   121ec:	e037883a 	mov	sp,fp
   121f0:	dfc00117 	ldw	ra,4(sp)
   121f4:	df000017 	ldw	fp,0(sp)
   121f8:	dec00204 	addi	sp,sp,8
   121fc:	f800283a 	ret

00012200 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   12200:	defff904 	addi	sp,sp,-28
   12204:	dfc00615 	stw	ra,24(sp)
   12208:	df000515 	stw	fp,20(sp)
   1220c:	df000504 	addi	fp,sp,20
   12210:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   12214:	008000b4 	movhi	r2,2
   12218:	10a1a804 	addi	r2,r2,-31072
   1221c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   12220:	e0bfff17 	ldw	r2,-4(fp)
   12224:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   12228:	e0bffc17 	ldw	r2,-16(fp)
   1222c:	10800717 	ldw	r2,28(r2)
   12230:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   12234:	e0bffd17 	ldw	r2,-12(fp)
   12238:	10800217 	ldw	r2,8(r2)
   1223c:	10800098 	cmpnei	r2,r2,2
   12240:	1000251e 	bne	r2,zero,122d8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   12244:	e0bffd17 	ldw	r2,-12(fp)
   12248:	10c00017 	ldw	r3,0(r2)
   1224c:	e0bffd17 	ldw	r2,-12(fp)
   12250:	10800117 	ldw	r2,4(r2)
   12254:	e13ffe04 	addi	r4,fp,-8
   12258:	200f883a 	mov	r7,r4
   1225c:	100d883a 	mov	r6,r2
   12260:	180b883a 	mov	r5,r3
   12264:	e13ffc17 	ldw	r4,-16(fp)
   12268:	00129b00 	call	129b0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1226c:	e0bffd17 	ldw	r2,-12(fp)
   12270:	10c00117 	ldw	r3,4(r2)
   12274:	e0bffe17 	ldw	r2,-8(fp)
   12278:	1887c83a 	sub	r3,r3,r2
   1227c:	e0bffd17 	ldw	r2,-12(fp)
   12280:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   12284:	e0bffd17 	ldw	r2,-12(fp)
   12288:	10c00017 	ldw	r3,0(r2)
   1228c:	e0bffe17 	ldw	r2,-8(fp)
   12290:	1887883a 	add	r3,r3,r2
   12294:	e0bffd17 	ldw	r2,-12(fp)
   12298:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   1229c:	e0bffd17 	ldw	r2,-12(fp)
   122a0:	10800117 	ldw	r2,4(r2)
   122a4:	10000c26 	beq	r2,zero,122d8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   122a8:	01400704 	movi	r5,28
   122ac:	e13ffc17 	ldw	r4,-16(fp)
   122b0:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   122b4:	01400084 	movi	r5,2
   122b8:	e13ffc17 	ldw	r4,-16(fp)
   122bc:	0013c0c0 	call	13c0c <alt_avalon_i2c_int_enable>
   122c0:	00000e06 	br	122fc <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   122c4:	e0bffb17 	ldw	r2,-20(fp)
   122c8:	10bfffc4 	addi	r2,r2,-1
   122cc:	e0bffb15 	stw	r2,-20(fp)
   122d0:	e0bffb17 	ldw	r2,-20(fp)
   122d4:	10000426 	beq	r2,zero,122e8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   122d8:	e13ffc17 	ldw	r4,-16(fp)
   122dc:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   122e0:	103ff81e 	bne	r2,zero,122c4 <__alt_data_end+0xffff28c4>
   122e4:	00000106 	br	122ec <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   122e8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   122ec:	e13ffc17 	ldw	r4,-16(fp)
   122f0:	00126140 	call	12614 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   122f4:	e0bffd17 	ldw	r2,-12(fp)
   122f8:	10000215 	stw	zero,8(r2)
}
   122fc:	e037883a 	mov	sp,fp
   12300:	dfc00117 	ldw	ra,4(sp)
   12304:	df000017 	ldw	fp,0(sp)
   12308:	dec00204 	addi	sp,sp,8
   1230c:	f800283a 	ret

00012310 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   12310:	defffc04 	addi	sp,sp,-16
   12314:	dfc00315 	stw	ra,12(sp)
   12318:	df000215 	stw	fp,8(sp)
   1231c:	df000204 	addi	fp,sp,8
   12320:	e13ffe15 	stw	r4,-8(fp)
   12324:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   12330:	e1ffff17 	ldw	r7,-4(fp)
   12334:	000d883a 	mov	r6,zero
   12338:	01400074 	movhi	r5,1
   1233c:	29488004 	addi	r5,r5,8704
   12340:	e13ffe17 	ldw	r4,-8(fp)
   12344:	00123fc0 	call	123fc <alt_avalon_i2c_register_callback>
}
   12348:	0001883a 	nop
   1234c:	e037883a 	mov	sp,fp
   12350:	dfc00117 	ldw	ra,4(sp)
   12354:	df000017 	ldw	fp,0(sp)
   12358:	dec00204 	addi	sp,sp,8
   1235c:	f800283a 	ret

00012360 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   12360:	defff904 	addi	sp,sp,-28
   12364:	dfc00615 	stw	ra,24(sp)
   12368:	df000515 	stw	fp,20(sp)
   1236c:	df000504 	addi	fp,sp,20
   12370:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   12374:	e0bfff17 	ldw	r2,-4(fp)
   12378:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1237c:	014007c4 	movi	r5,31
   12380:	e13ffb17 	ldw	r4,-20(fp)
   12384:	0013ba40 	call	13ba4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12388:	01400704 	movi	r5,28
   1238c:	e13ffb17 	ldw	r4,-20(fp)
   12390:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   12394:	e0bffb17 	ldw	r2,-20(fp)
   12398:	10800617 	ldw	r2,24(r2)
   1239c:	10001126 	beq	r2,zero,123e4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123a0:	0005303a 	rdctl	r2,status
   123a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123a8:	e0fffd17 	ldw	r3,-12(fp)
   123ac:	00bfff84 	movi	r2,-2
   123b0:	1884703a 	and	r2,r3,r2
   123b4:	1001703a 	wrctl	status,r2
  
  return context;
   123b8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   123bc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   123c0:	e0bffb17 	ldw	r2,-20(fp)
   123c4:	10800617 	ldw	r2,24(r2)
   123c8:	e13ffb17 	ldw	r4,-20(fp)
   123cc:	103ee83a 	callr	r2
   123d0:	e0bffc17 	ldw	r2,-16(fp)
   123d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123d8:	e0bffe17 	ldw	r2,-8(fp)
   123dc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   123e0:	0001883a 	nop
   123e4:	0001883a 	nop
}
   123e8:	e037883a 	mov	sp,fp
   123ec:	dfc00117 	ldw	ra,4(sp)
   123f0:	df000017 	ldw	fp,0(sp)
   123f4:	dec00204 	addi	sp,sp,8
   123f8:	f800283a 	ret

000123fc <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   123fc:	defffb04 	addi	sp,sp,-20
   12400:	df000415 	stw	fp,16(sp)
   12404:	df000404 	addi	fp,sp,16
   12408:	e13ffc15 	stw	r4,-16(fp)
   1240c:	e17ffd15 	stw	r5,-12(fp)
   12410:	e1bffe15 	stw	r6,-8(fp)
   12414:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   12418:	e0bffc17 	ldw	r2,-16(fp)
   1241c:	e0fffd17 	ldw	r3,-12(fp)
   12420:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	e0ffff17 	ldw	r3,-4(fp)
   1242c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   12430:	e0bffc17 	ldw	r2,-16(fp)
   12434:	e0fffe17 	ldw	r3,-8(fp)
   12438:	10c00815 	stw	r3,32(r2)

    return ;
   1243c:	0001883a 	nop
}
   12440:	e037883a 	mov	sp,fp
   12444:	df000017 	ldw	fp,0(sp)
   12448:	dec00104 	addi	sp,sp,4
   1244c:	f800283a 	ret

00012450 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   12450:	defff704 	addi	sp,sp,-36
   12454:	dfc00815 	stw	ra,32(sp)
   12458:	df000715 	stw	fp,28(sp)
   1245c:	df000704 	addi	fp,sp,28
   12460:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   12464:	e13fff17 	ldw	r4,-4(fp)
   12468:	00126140 	call	12614 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1246c:	014007c4 	movi	r5,31
   12470:	e13fff17 	ldw	r4,-4(fp)
   12474:	0013ba40 	call	13ba4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   12478:	01400704 	movi	r5,28
   1247c:	e13fff17 	ldw	r4,-4(fp)
   12480:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   12484:	014000c4 	movi	r5,3
   12488:	e13fff17 	ldw	r4,-4(fp)
   1248c:	0013db00 	call	13db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   12490:	014000c4 	movi	r5,3
   12494:	e13fff17 	ldw	r4,-4(fp)
   12498:	0013d000 	call	13d00 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   1249c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   124a0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   124a4:	e0bffb04 	addi	r2,fp,-20
   124a8:	018000b4 	movhi	r6,2
   124ac:	31a1a804 	addi	r6,r6,-31072
   124b0:	100b883a 	mov	r5,r2
   124b4:	e13fff17 	ldw	r4,-4(fp)
   124b8:	00128700 	call	12870 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   124bc:	e0bffb04 	addi	r2,fp,-20
   124c0:	100b883a 	mov	r5,r2
   124c4:	e13fff17 	ldw	r4,-4(fp)
   124c8:	00127100 	call	12710 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   124cc:	d1600204 	addi	r5,gp,-32760
   124d0:	e13fff17 	ldw	r4,-4(fp)
   124d4:	0014ca00 	call	14ca0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   124d8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   124dc:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   124e0:	e0bffa17 	ldw	r2,-24(fp)
   124e4:	10000c1e 	bne	r2,zero,12518 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   124e8:	e0bfff17 	ldw	r2,-4(fp)
   124ec:	10c00417 	ldw	r3,16(r2)
   124f0:	e0bfff17 	ldw	r2,-4(fp)
   124f4:	10800517 	ldw	r2,20(r2)
   124f8:	d8000015 	stw	zero,0(sp)
   124fc:	e1ffff17 	ldw	r7,-4(fp)
   12500:	01800074 	movhi	r6,1
   12504:	3188d804 	addi	r6,r6,9056
   12508:	100b883a 	mov	r5,r2
   1250c:	1809883a 	mov	r4,r3
   12510:	0014eb40 	call	14eb4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   12514:	00000406 	br	12528 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   12518:	01000074 	movhi	r4,1
   1251c:	2118f204 	addi	r4,r4,25544
   12520:	00155380 	call	15538 <alt_printf>
    }

    return;
   12524:	0001883a 	nop

}
   12528:	e037883a 	mov	sp,fp
   1252c:	dfc00117 	ldw	ra,4(sp)
   12530:	df000017 	ldw	fp,0(sp)
   12534:	dec00204 	addi	sp,sp,8
   12538:	f800283a 	ret

0001253c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   1253c:	defffc04 	addi	sp,sp,-16
   12540:	dfc00315 	stw	ra,12(sp)
   12544:	df000215 	stw	fp,8(sp)
   12548:	df000204 	addi	fp,sp,8
   1254c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   12550:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   12554:	d1600204 	addi	r5,gp,-32760
   12558:	e13fff17 	ldw	r4,-4(fp)
   1255c:	0014e040 	call	14e04 <alt_find_dev>
   12560:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   12564:	e0bffe17 	ldw	r2,-8(fp)
}
   12568:	e037883a 	mov	sp,fp
   1256c:	dfc00117 	ldw	ra,4(sp)
   12570:	df000017 	ldw	fp,0(sp)
   12574:	dec00204 	addi	sp,sp,8
   12578:	f800283a 	ret

0001257c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1257c:	defffc04 	addi	sp,sp,-16
   12580:	df000315 	stw	fp,12(sp)
   12584:	df000304 	addi	fp,sp,12
   12588:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   1258c:	e0bfff17 	ldw	r2,-4(fp)
   12590:	10800717 	ldw	r2,28(r2)
   12594:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   12598:	e0bfff17 	ldw	r2,-4(fp)
   1259c:	10800317 	ldw	r2,12(r2)
   125a0:	10800204 	addi	r2,r2,8
   125a4:	10800037 	ldwio	r2,0(r2)
   125a8:	1080004c 	andi	r2,r2,1
   125ac:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   125b0:	e0bffe17 	ldw	r2,-8(fp)
   125b4:	10000226 	beq	r2,zero,125c0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   125b8:	00bffe44 	movi	r2,-7
   125bc:	00001106 	br	12604 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   125c0:	e0bfff17 	ldw	r2,-4(fp)
   125c4:	10c00617 	ldw	r3,24(r2)
   125c8:	00800074 	movhi	r2,1
   125cc:	10888004 	addi	r2,r2,8704
   125d0:	1880021e 	bne	r3,r2,125dc <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   125d4:	e0bffd17 	ldw	r2,-12(fp)
   125d8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   125dc:	e0bfff17 	ldw	r2,-4(fp)
   125e0:	10800317 	ldw	r2,12(r2)
   125e4:	10800204 	addi	r2,r2,8
   125e8:	e0ffff17 	ldw	r3,-4(fp)
   125ec:	18c00317 	ldw	r3,12(r3)
   125f0:	18c00204 	addi	r3,r3,8
   125f4:	18c00037 	ldwio	r3,0(r3)
   125f8:	18c00054 	ori	r3,r3,1
   125fc:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   12600:	0005883a 	mov	r2,zero
}
   12604:	e037883a 	mov	sp,fp
   12608:	df000017 	ldw	fp,0(sp)
   1260c:	dec00104 	addi	sp,sp,4
   12610:	f800283a 	ret

00012614 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   12614:	defffe04 	addi	sp,sp,-8
   12618:	df000115 	stw	fp,4(sp)
   1261c:	df000104 	addi	fp,sp,4
   12620:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   12624:	e0bfff17 	ldw	r2,-4(fp)
   12628:	10800317 	ldw	r2,12(r2)
   1262c:	10800204 	addi	r2,r2,8
   12630:	e0ffff17 	ldw	r3,-4(fp)
   12634:	18c00317 	ldw	r3,12(r3)
   12638:	18c00204 	addi	r3,r3,8
   1263c:	19000037 	ldwio	r4,0(r3)
   12640:	00ffff84 	movi	r3,-2
   12644:	20c6703a 	and	r3,r4,r3
   12648:	10c00035 	stwio	r3,0(r2)

}
   1264c:	0001883a 	nop
   12650:	e037883a 	mov	sp,fp
   12654:	df000017 	ldw	fp,0(sp)
   12658:	dec00104 	addi	sp,sp,4
   1265c:	f800283a 	ret

00012660 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   12660:	defffd04 	addi	sp,sp,-12
   12664:	df000215 	stw	fp,8(sp)
   12668:	df000204 	addi	fp,sp,8
   1266c:	e13ffe15 	stw	r4,-8(fp)
   12670:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   12674:	e0bffe17 	ldw	r2,-8(fp)
   12678:	10c00d17 	ldw	r3,52(r2)
   1267c:	e0bfff17 	ldw	r2,-4(fp)
   12680:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   12684:	e0bffe17 	ldw	r2,-8(fp)
   12688:	10800317 	ldw	r2,12(r2)
   1268c:	10800204 	addi	r2,r2,8
   12690:	10800037 	ldwio	r2,0(r2)
   12694:	1080008c 	andi	r2,r2,2
   12698:	1005d07a 	srai	r2,r2,1
   1269c:	1007883a 	mov	r3,r2
   126a0:	e0bfff17 	ldw	r2,-4(fp)
   126a4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   126a8:	e0bffe17 	ldw	r2,-8(fp)
   126ac:	10800317 	ldw	r2,12(r2)
   126b0:	10800904 	addi	r2,r2,36
   126b4:	10800037 	ldwio	r2,0(r2)
   126b8:	1007883a 	mov	r3,r2
   126bc:	e0bfff17 	ldw	r2,-4(fp)
   126c0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   126c4:	e0bffe17 	ldw	r2,-8(fp)
   126c8:	10800317 	ldw	r2,12(r2)
   126cc:	10800804 	addi	r2,r2,32
   126d0:	10800037 	ldwio	r2,0(r2)
   126d4:	1007883a 	mov	r3,r2
   126d8:	e0bfff17 	ldw	r2,-4(fp)
   126dc:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   126e0:	e0bffe17 	ldw	r2,-8(fp)
   126e4:	10800317 	ldw	r2,12(r2)
   126e8:	10800a04 	addi	r2,r2,40
   126ec:	10800037 	ldwio	r2,0(r2)
   126f0:	1007883a 	mov	r3,r2
   126f4:	e0bfff17 	ldw	r2,-4(fp)
   126f8:	10c0030d 	sth	r3,12(r2)
}
   126fc:	0001883a 	nop
   12700:	e037883a 	mov	sp,fp
   12704:	df000017 	ldw	fp,0(sp)
   12708:	dec00104 	addi	sp,sp,4
   1270c:	f800283a 	ret

00012710 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   12710:	defffd04 	addi	sp,sp,-12
   12714:	df000215 	stw	fp,8(sp)
   12718:	df000204 	addi	fp,sp,8
   1271c:	e13ffe15 	stw	r4,-8(fp)
   12720:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   12724:	e0bfff17 	ldw	r2,-4(fp)
   12728:	10c00017 	ldw	r3,0(r2)
   1272c:	e0bffe17 	ldw	r2,-8(fp)
   12730:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   12734:	e0bffe17 	ldw	r2,-8(fp)
   12738:	10800317 	ldw	r2,12(r2)
   1273c:	10c00204 	addi	r3,r2,8
   12740:	e0bffe17 	ldw	r2,-8(fp)
   12744:	10800317 	ldw	r2,12(r2)
   12748:	10800204 	addi	r2,r2,8
   1274c:	10800037 	ldwio	r2,0(r2)
   12750:	1009883a 	mov	r4,r2
   12754:	00bfff44 	movi	r2,-3
   12758:	2088703a 	and	r4,r4,r2
   1275c:	e0bfff17 	ldw	r2,-4(fp)
   12760:	10800117 	ldw	r2,4(r2)
   12764:	1085883a 	add	r2,r2,r2
   12768:	1080008c 	andi	r2,r2,2
   1276c:	2084b03a 	or	r2,r4,r2
   12770:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   12774:	e0bffe17 	ldw	r2,-8(fp)
   12778:	10800317 	ldw	r2,12(r2)
   1277c:	10800904 	addi	r2,r2,36
   12780:	e0ffff17 	ldw	r3,-4(fp)
   12784:	18c0020b 	ldhu	r3,8(r3)
   12788:	18ffffcc 	andi	r3,r3,65535
   1278c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   12790:	e0bffe17 	ldw	r2,-8(fp)
   12794:	10800317 	ldw	r2,12(r2)
   12798:	10800804 	addi	r2,r2,32
   1279c:	e0ffff17 	ldw	r3,-4(fp)
   127a0:	18c0028b 	ldhu	r3,10(r3)
   127a4:	18ffffcc 	andi	r3,r3,65535
   127a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	10800317 	ldw	r2,12(r2)
   127b4:	10800a04 	addi	r2,r2,40
   127b8:	e0ffff17 	ldw	r3,-4(fp)
   127bc:	18c0030b 	ldhu	r3,12(r3)
   127c0:	18ffffcc 	andi	r3,r3,65535
   127c4:	10c00035 	stwio	r3,0(r2)
}
   127c8:	0001883a 	nop
   127cc:	e037883a 	mov	sp,fp
   127d0:	df000017 	ldw	fp,0(sp)
   127d4:	dec00104 	addi	sp,sp,4
   127d8:	f800283a 	ret

000127dc <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   127dc:	defffb04 	addi	sp,sp,-20
   127e0:	dfc00415 	stw	ra,16(sp)
   127e4:	df000315 	stw	fp,12(sp)
   127e8:	df000304 	addi	fp,sp,12
   127ec:	e13ffd15 	stw	r4,-12(fp)
   127f0:	e17ffe15 	stw	r5,-8(fp)
   127f4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   127f8:	e0bffe17 	ldw	r2,-8(fp)
   127fc:	1080028b 	ldhu	r2,10(r2)
   12800:	10bfffcc 	andi	r2,r2,65535
   12804:	10000426 	beq	r2,zero,12818 <alt_avalon_i2c_master_config_speed_get+0x3c>
   12808:	e0bffe17 	ldw	r2,-8(fp)
   1280c:	1080020b 	ldhu	r2,8(r2)
   12810:	10bfffcc 	andi	r2,r2,65535
   12814:	1000021e 	bne	r2,zero,12820 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   12818:	00bfff44 	movi	r2,-3
   1281c:	00000f06 	br	1285c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   12820:	e0bffd17 	ldw	r2,-12(fp)
   12824:	11000c17 	ldw	r4,48(r2)
   12828:	e0bffe17 	ldw	r2,-8(fp)
   1282c:	1080028b 	ldhu	r2,10(r2)
   12830:	10ffffcc 	andi	r3,r2,65535
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	1080020b 	ldhu	r2,8(r2)
   1283c:	10bfffcc 	andi	r2,r2,65535
   12840:	1885883a 	add	r2,r3,r2
   12844:	100b883a 	mov	r5,r2
   12848:	0010a200 	call	10a20 <__udivsi3>
   1284c:	1007883a 	mov	r3,r2
   12850:	e0bfff17 	ldw	r2,-4(fp)
   12854:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   12858:	0005883a 	mov	r2,zero
}
   1285c:	e037883a 	mov	sp,fp
   12860:	dfc00117 	ldw	ra,4(sp)
   12864:	df000017 	ldw	fp,0(sp)
   12868:	dec00204 	addi	sp,sp,8
   1286c:	f800283a 	ret

00012870 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   12870:	defff904 	addi	sp,sp,-28
   12874:	dfc00615 	stw	ra,24(sp)
   12878:	df000515 	stw	fp,20(sp)
   1287c:	df000504 	addi	fp,sp,20
   12880:	e13ffd15 	stw	r4,-12(fp)
   12884:	e17ffe15 	stw	r5,-8(fp)
   12888:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   1288c:	e0ffff17 	ldw	r3,-4(fp)
   12890:	008001b4 	movhi	r2,6
   12894:	1086a004 	addi	r2,r2,6784
   12898:	10c00436 	bltu	r2,r3,128ac <alt_avalon_i2c_master_config_speed_set+0x3c>
   1289c:	e0bfff17 	ldw	r2,-4(fp)
   128a0:	10000226 	beq	r2,zero,128ac <alt_avalon_i2c_master_config_speed_set+0x3c>
   128a4:	e0bfff17 	ldw	r2,-4(fp)
   128a8:	1000021e 	bne	r2,zero,128b4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   128ac:	00bfff04 	movi	r2,-4
   128b0:	00002906 	br	12958 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   128b4:	e0bffd17 	ldw	r2,-12(fp)
   128b8:	10c00c17 	ldw	r3,48(r2)
   128bc:	e0bfff17 	ldw	r2,-4(fp)
   128c0:	1085883a 	add	r2,r2,r2
   128c4:	100b883a 	mov	r5,r2
   128c8:	1809883a 	mov	r4,r3
   128cc:	0010a200 	call	10a20 <__udivsi3>
   128d0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   128d4:	e0bffb17 	ldw	r2,-20(fp)
   128d8:	10800f04 	addi	r2,r2,60
   128dc:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   128e0:	e0bffb17 	ldw	r2,-20(fp)
   128e4:	10bff104 	addi	r2,r2,-60
   128e8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   128ec:	e0ffff17 	ldw	r3,-4(fp)
   128f0:	008000b4 	movhi	r2,2
   128f4:	10a1a804 	addi	r2,r2,-31072
   128f8:	10c0042e 	bgeu	r2,r3,1290c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	00c00044 	movi	r3,1
   12904:	10c00115 	stw	r3,4(r2)
   12908:	00000206 	br	12914 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   1290c:	e0bffe17 	ldw	r2,-8(fp)
   12910:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   12914:	e0bffb17 	ldw	r2,-20(fp)
   12918:	1007883a 	mov	r3,r2
   1291c:	e0bffe17 	ldw	r2,-8(fp)
   12920:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   12924:	e0bffc17 	ldw	r2,-16(fp)
   12928:	1007883a 	mov	r3,r2
   1292c:	e0bffe17 	ldw	r2,-8(fp)
   12930:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   12934:	e0bffb17 	ldw	r2,-20(fp)
   12938:	1007883a 	mov	r3,r2
   1293c:	e0bffb17 	ldw	r2,-20(fp)
   12940:	1004d07a 	srli	r2,r2,1
   12944:	1885c83a 	sub	r2,r3,r2
   12948:	1007883a 	mov	r3,r2
   1294c:	e0bffe17 	ldw	r2,-8(fp)
   12950:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   12954:	0005883a 	mov	r2,zero

}
   12958:	e037883a 	mov	sp,fp
   1295c:	dfc00117 	ldw	ra,4(sp)
   12960:	df000017 	ldw	fp,0(sp)
   12964:	dec00204 	addi	sp,sp,8
   12968:	f800283a 	ret

0001296c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   1296c:	defffe04 	addi	sp,sp,-8
   12970:	df000115 	stw	fp,4(sp)
   12974:	df000104 	addi	fp,sp,4
   12978:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1297c:	e0bfff17 	ldw	r2,-4(fp)
   12980:	10800317 	ldw	r2,12(r2)
   12984:	10800504 	addi	r2,r2,20
   12988:	10800037 	ldwio	r2,0(r2)
   1298c:	1080004c 	andi	r2,r2,1
   12990:	10000226 	beq	r2,zero,1299c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   12994:	00800044 	movi	r2,1
   12998:	00000106 	br	129a0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   1299c:	0005883a 	mov	r2,zero
}
   129a0:	e037883a 	mov	sp,fp
   129a4:	df000017 	ldw	fp,0(sp)
   129a8:	dec00104 	addi	sp,sp,4
   129ac:	f800283a 	ret

000129b0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   129b0:	defffb04 	addi	sp,sp,-20
   129b4:	df000415 	stw	fp,16(sp)
   129b8:	df000404 	addi	fp,sp,16
   129bc:	e13ffc15 	stw	r4,-16(fp)
   129c0:	e17ffd15 	stw	r5,-12(fp)
   129c4:	e1bffe15 	stw	r6,-8(fp)
   129c8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   129cc:	e0bfff17 	ldw	r2,-4(fp)
   129d0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   129d4:	00001406 	br	12a28 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   129d8:	e0bfff17 	ldw	r2,-4(fp)
   129dc:	10800017 	ldw	r2,0(r2)
   129e0:	e0fffd17 	ldw	r3,-12(fp)
   129e4:	1885883a 	add	r2,r3,r2
   129e8:	e0fffc17 	ldw	r3,-16(fp)
   129ec:	18c00317 	ldw	r3,12(r3)
   129f0:	18c00104 	addi	r3,r3,4
   129f4:	18c00037 	ldwio	r3,0(r3)
   129f8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   129fc:	e0bfff17 	ldw	r2,-4(fp)
   12a00:	10800017 	ldw	r2,0(r2)
   12a04:	10c00044 	addi	r3,r2,1
   12a08:	e0bfff17 	ldw	r2,-4(fp)
   12a0c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   12a10:	e0bfff17 	ldw	r2,-4(fp)
   12a14:	10c00017 	ldw	r3,0(r2)
   12a18:	e0bffe17 	ldw	r2,-8(fp)
   12a1c:	1880021e 	bne	r3,r2,12a28 <alt_avalon_i2c_rx_read_available+0x78>
   12a20:	e0bffe17 	ldw	r2,-8(fp)
   12a24:	1000061e 	bne	r2,zero,12a40 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   12a28:	e0bffc17 	ldw	r2,-16(fp)
   12a2c:	10800317 	ldw	r2,12(r2)
   12a30:	10800704 	addi	r2,r2,28
   12a34:	10800037 	ldwio	r2,0(r2)
   12a38:	103fe71e 	bne	r2,zero,129d8 <__alt_data_end+0xffff2fd8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   12a3c:	00000106 	br	12a44 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   12a40:	0001883a 	nop
    }
}
   12a44:	0001883a 	nop
   12a48:	e037883a 	mov	sp,fp
   12a4c:	df000017 	ldw	fp,0(sp)
   12a50:	dec00104 	addi	sp,sp,4
   12a54:	f800283a 	ret

00012a58 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   12a58:	defffa04 	addi	sp,sp,-24
   12a5c:	dfc00515 	stw	ra,20(sp)
   12a60:	df000415 	stw	fp,16(sp)
   12a64:	df000404 	addi	fp,sp,16
   12a68:	e13ffe15 	stw	r4,-8(fp)
   12a6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   12a70:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   12a74:	008000b4 	movhi	r2,2
   12a78:	10a1a804 	addi	r2,r2,-31072
   12a7c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   12a80:	00000d06 	br	12ab8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   12a84:	e0bffd17 	ldw	r2,-12(fp)
   12a88:	108002a8 	cmpgeui	r2,r2,10
   12a8c:	1000021e 	bne	r2,zero,12a98 <alt_avalon_i2c_rx_read+0x40>
   12a90:	0109c404 	movi	r4,10000
   12a94:	00149ac0 	call	149ac <alt_busy_sleep>
      if (--timeout == 0)
   12a98:	e0bffd17 	ldw	r2,-12(fp)
   12a9c:	10bfffc4 	addi	r2,r2,-1
   12aa0:	e0bffd15 	stw	r2,-12(fp)
   12aa4:	e0bffd17 	ldw	r2,-12(fp)
   12aa8:	1000031e 	bne	r2,zero,12ab8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   12aac:	00bfff84 	movi	r2,-2
   12ab0:	e0bffc15 	stw	r2,-16(fp)
        break;
   12ab4:	00000506 	br	12acc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   12ab8:	e0bffe17 	ldw	r2,-8(fp)
   12abc:	10800317 	ldw	r2,12(r2)
   12ac0:	10800704 	addi	r2,r2,28
   12ac4:	10800037 	ldwio	r2,0(r2)
   12ac8:	103fee26 	beq	r2,zero,12a84 <__alt_data_end+0xffff3084>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   12acc:	e0bffe17 	ldw	r2,-8(fp)
   12ad0:	10800317 	ldw	r2,12(r2)
   12ad4:	10800104 	addi	r2,r2,4
   12ad8:	10800037 	ldwio	r2,0(r2)
   12adc:	1007883a 	mov	r3,r2
   12ae0:	e0bfff17 	ldw	r2,-4(fp)
   12ae4:	10c00005 	stb	r3,0(r2)
        
    return status;
   12ae8:	e0bffc17 	ldw	r2,-16(fp)
}
   12aec:	e037883a 	mov	sp,fp
   12af0:	dfc00117 	ldw	ra,4(sp)
   12af4:	df000017 	ldw	fp,0(sp)
   12af8:	dec00204 	addi	sp,sp,8
   12afc:	f800283a 	ret

00012b00 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   12b00:	defff804 	addi	sp,sp,-32
   12b04:	dfc00715 	stw	ra,28(sp)
   12b08:	df000615 	stw	fp,24(sp)
   12b0c:	df000604 	addi	fp,sp,24
   12b10:	e13ffc15 	stw	r4,-16(fp)
   12b14:	2809883a 	mov	r4,r5
   12b18:	3007883a 	mov	r3,r6
   12b1c:	3805883a 	mov	r2,r7
   12b20:	e13ffd05 	stb	r4,-12(fp)
   12b24:	e0fffe05 	stb	r3,-8(fp)
   12b28:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   12b2c:	0089c404 	movi	r2,10000
   12b30:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12b34:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   12b38:	00000c06 	br	12b6c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   12b3c:	e0bffa17 	ldw	r2,-24(fp)
   12b40:	108002a8 	cmpgeui	r2,r2,10
   12b44:	1000021e 	bne	r2,zero,12b50 <alt_avalon_i2c_cmd_write+0x50>
   12b48:	0109c404 	movi	r4,10000
   12b4c:	00149ac0 	call	149ac <alt_busy_sleep>
      if (--timeout == 0)
   12b50:	e0bffa17 	ldw	r2,-24(fp)
   12b54:	10bfffc4 	addi	r2,r2,-1
   12b58:	e0bffa15 	stw	r2,-24(fp)
   12b5c:	e0bffa17 	ldw	r2,-24(fp)
   12b60:	1000021e 	bne	r2,zero,12b6c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   12b64:	00bfff84 	movi	r2,-2
   12b68:	00001906 	br	12bd0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   12b6c:	e0bffc17 	ldw	r2,-16(fp)
   12b70:	10800317 	ldw	r2,12(r2)
   12b74:	10800404 	addi	r2,r2,16
   12b78:	10800037 	ldwio	r2,0(r2)
   12b7c:	1080004c 	andi	r2,r2,1
   12b80:	103fee26 	beq	r2,zero,12b3c <__alt_data_end+0xffff313c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	10800317 	ldw	r2,12(r2)
   12b8c:	e13ffd03 	ldbu	r4,-12(fp)
   12b90:	e0fffe03 	ldbu	r3,-8(fp)
   12b94:	1806927a 	slli	r3,r3,9
   12b98:	20c8b03a 	or	r4,r4,r3
   12b9c:	e0ffff03 	ldbu	r3,-4(fp)
   12ba0:	1806923a 	slli	r3,r3,8
   12ba4:	20c6b03a 	or	r3,r4,r3
   12ba8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   12bac:	e0bffb04 	addi	r2,fp,-20
   12bb0:	100b883a 	mov	r5,r2
   12bb4:	e13ffc17 	ldw	r4,-16(fp)
   12bb8:	0012d400 	call	12d40 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   12bbc:	e0bffb04 	addi	r2,fp,-20
   12bc0:	100b883a 	mov	r5,r2
   12bc4:	e13ffc17 	ldw	r4,-16(fp)
   12bc8:	0012d8c0 	call	12d8c <alt_avalon_i2c_check_arblost>
    
    return status;
   12bcc:	e0bffb17 	ldw	r2,-20(fp)
}
   12bd0:	e037883a 	mov	sp,fp
   12bd4:	dfc00117 	ldw	ra,4(sp)
   12bd8:	df000017 	ldw	fp,0(sp)
   12bdc:	dec00204 	addi	sp,sp,8
   12be0:	f800283a 	ret

00012be4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   12be4:	defffa04 	addi	sp,sp,-24
   12be8:	dfc00515 	stw	ra,20(sp)
   12bec:	df000415 	stw	fp,16(sp)
   12bf0:	df000404 	addi	fp,sp,16
   12bf4:	e13ffd15 	stw	r4,-12(fp)
   12bf8:	e17ffe15 	stw	r5,-8(fp)
   12bfc:	3005883a 	mov	r2,r6
   12c00:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   12c04:	e0bffd17 	ldw	r2,-12(fp)
   12c08:	10800d17 	ldw	r2,52(r2)
   12c0c:	10800058 	cmpnei	r2,r2,1
   12c10:	10001c1e 	bne	r2,zero,12c84 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   12c14:	e0bffd17 	ldw	r2,-12(fp)
   12c18:	10800917 	ldw	r2,36(r2)
   12c1c:	109e0014 	ori	r2,r2,30720
   12c20:	1004d1fa 	srli	r2,r2,7
   12c24:	1007883a 	mov	r3,r2
   12c28:	00bfff84 	movi	r2,-2
   12c2c:	1884703a 	and	r2,r3,r2
   12c30:	1007883a 	mov	r3,r2
   12c34:	e0bffe17 	ldw	r2,-8(fp)
   12c38:	1884b03a 	or	r2,r3,r2
   12c3c:	10803fcc 	andi	r2,r2,255
   12c40:	e0ffff03 	ldbu	r3,-4(fp)
   12c44:	000f883a 	mov	r7,zero
   12c48:	180d883a 	mov	r6,r3
   12c4c:	100b883a 	mov	r5,r2
   12c50:	e13ffd17 	ldw	r4,-12(fp)
   12c54:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   12c58:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   12c5c:	e0bffd17 	ldw	r2,-12(fp)
   12c60:	10800917 	ldw	r2,36(r2)
   12c64:	10803fcc 	andi	r2,r2,255
   12c68:	000f883a 	mov	r7,zero
   12c6c:	000d883a 	mov	r6,zero
   12c70:	100b883a 	mov	r5,r2
   12c74:	e13ffd17 	ldw	r4,-12(fp)
   12c78:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   12c7c:	e0bffc15 	stw	r2,-16(fp)
   12c80:	00000e06 	br	12cbc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   12c84:	e0bffd17 	ldw	r2,-12(fp)
   12c88:	10800917 	ldw	r2,36(r2)
   12c8c:	1085883a 	add	r2,r2,r2
   12c90:	1007883a 	mov	r3,r2
   12c94:	e0bffe17 	ldw	r2,-8(fp)
   12c98:	1884b03a 	or	r2,r3,r2
   12c9c:	10803fcc 	andi	r2,r2,255
   12ca0:	e0ffff03 	ldbu	r3,-4(fp)
   12ca4:	000f883a 	mov	r7,zero
   12ca8:	180d883a 	mov	r6,r3
   12cac:	100b883a 	mov	r5,r2
   12cb0:	e13ffd17 	ldw	r4,-12(fp)
   12cb4:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   12cb8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   12cbc:	e0bffc17 	ldw	r2,-16(fp)
}
   12cc0:	e037883a 	mov	sp,fp
   12cc4:	dfc00117 	ldw	ra,4(sp)
   12cc8:	df000017 	ldw	fp,0(sp)
   12ccc:	dec00204 	addi	sp,sp,8
   12cd0:	f800283a 	ret

00012cd4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   12cd4:	defffd04 	addi	sp,sp,-12
   12cd8:	df000215 	stw	fp,8(sp)
   12cdc:	df000204 	addi	fp,sp,8
   12ce0:	e13ffe15 	stw	r4,-8(fp)
   12ce4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   12ce8:	e0bffe17 	ldw	r2,-8(fp)
   12cec:	10c00917 	ldw	r3,36(r2)
   12cf0:	e0bfff17 	ldw	r2,-4(fp)
   12cf4:	10c00015 	stw	r3,0(r2)
}
   12cf8:	0001883a 	nop
   12cfc:	e037883a 	mov	sp,fp
   12d00:	df000017 	ldw	fp,0(sp)
   12d04:	dec00104 	addi	sp,sp,4
   12d08:	f800283a 	ret

00012d0c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   12d0c:	defffd04 	addi	sp,sp,-12
   12d10:	df000215 	stw	fp,8(sp)
   12d14:	df000204 	addi	fp,sp,8
   12d18:	e13ffe15 	stw	r4,-8(fp)
   12d1c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   12d20:	e0bffe17 	ldw	r2,-8(fp)
   12d24:	e0ffff17 	ldw	r3,-4(fp)
   12d28:	10c00915 	stw	r3,36(r2)
}
   12d2c:	0001883a 	nop
   12d30:	e037883a 	mov	sp,fp
   12d34:	df000017 	ldw	fp,0(sp)
   12d38:	dec00104 	addi	sp,sp,4
   12d3c:	f800283a 	ret

00012d40 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   12d40:	defffd04 	addi	sp,sp,-12
   12d44:	df000215 	stw	fp,8(sp)
   12d48:	df000204 	addi	fp,sp,8
   12d4c:	e13ffe15 	stw	r4,-8(fp)
   12d50:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   12d54:	e0bffe17 	ldw	r2,-8(fp)
   12d58:	10800317 	ldw	r2,12(r2)
   12d5c:	10800404 	addi	r2,r2,16
   12d60:	10800037 	ldwio	r2,0(r2)
   12d64:	1080010c 	andi	r2,r2,4
   12d68:	10000326 	beq	r2,zero,12d78 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   12d6c:	e0bfff17 	ldw	r2,-4(fp)
   12d70:	00fffec4 	movi	r3,-5
   12d74:	10c00015 	stw	r3,0(r2)
    }
}
   12d78:	0001883a 	nop
   12d7c:	e037883a 	mov	sp,fp
   12d80:	df000017 	ldw	fp,0(sp)
   12d84:	dec00104 	addi	sp,sp,4
   12d88:	f800283a 	ret

00012d8c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   12d8c:	defffd04 	addi	sp,sp,-12
   12d90:	df000215 	stw	fp,8(sp)
   12d94:	df000204 	addi	fp,sp,8
   12d98:	e13ffe15 	stw	r4,-8(fp)
   12d9c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   12da0:	e0bffe17 	ldw	r2,-8(fp)
   12da4:	10800317 	ldw	r2,12(r2)
   12da8:	10800404 	addi	r2,r2,16
   12dac:	10800037 	ldwio	r2,0(r2)
   12db0:	1080020c 	andi	r2,r2,8
   12db4:	10000326 	beq	r2,zero,12dc4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   12db8:	e0bfff17 	ldw	r2,-4(fp)
   12dbc:	00fffe84 	movi	r3,-6
   12dc0:	10c00015 	stw	r3,0(r2)
    }
}
   12dc4:	0001883a 	nop
   12dc8:	e037883a 	mov	sp,fp
   12dcc:	df000017 	ldw	fp,0(sp)
   12dd0:	dec00104 	addi	sp,sp,4
   12dd4:	f800283a 	ret

00012dd8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   12dd8:	defff804 	addi	sp,sp,-32
   12ddc:	dfc00715 	stw	ra,28(sp)
   12de0:	df000615 	stw	fp,24(sp)
   12de4:	df000604 	addi	fp,sp,24
   12de8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   12dec:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   12df0:	e0bfff17 	ldw	r2,-4(fp)
   12df4:	10800717 	ldw	r2,28(r2)
   12df8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   12dfc:	e0bffb17 	ldw	r2,-20(fp)
   12e00:	10800117 	ldw	r2,4(r2)
   12e04:	10800044 	addi	r2,r2,1
   12e08:	0149c404 	movi	r5,10000
   12e0c:	1009883a 	mov	r4,r2
   12e10:	00116700 	call	11670 <__mulsi3>
   12e14:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   12e18:	e0bffd04 	addi	r2,fp,-12
   12e1c:	100b883a 	mov	r5,r2
   12e20:	e13fff17 	ldw	r4,-4(fp)
   12e24:	0013c700 	call	13c70 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   12e28:	e0bffd17 	ldw	r2,-12(fp)
   12e2c:	100b883a 	mov	r5,r2
   12e30:	e13fff17 	ldw	r4,-4(fp)
   12e34:	0013ba40 	call	13ba4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   12e38:	e0bffc04 	addi	r2,fp,-16
   12e3c:	100b883a 	mov	r5,r2
   12e40:	e13fff17 	ldw	r4,-4(fp)
   12e44:	0012d400 	call	12d40 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   12e48:	e0bffc17 	ldw	r2,-16(fp)
   12e4c:	10002226 	beq	r2,zero,12ed8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   12e50:	e0bffb17 	ldw	r2,-20(fp)
   12e54:	10800217 	ldw	r2,8(r2)
   12e58:	10001d26 	beq	r2,zero,12ed0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   12e5c:	00000d06 	br	12e94 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   12e60:	e0bffa17 	ldw	r2,-24(fp)
   12e64:	108002a8 	cmpgeui	r2,r2,10
   12e68:	1000021e 	bne	r2,zero,12e74 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   12e6c:	0109c404 	movi	r4,10000
   12e70:	00149ac0 	call	149ac <alt_busy_sleep>
              if (--timeout == 0)
   12e74:	e0bffa17 	ldw	r2,-24(fp)
   12e78:	10bfffc4 	addi	r2,r2,-1
   12e7c:	e0bffa15 	stw	r2,-24(fp)
   12e80:	e0bffa17 	ldw	r2,-24(fp)
   12e84:	1000031e 	bne	r2,zero,12e94 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   12e88:	00bfff84 	movi	r2,-2
   12e8c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   12e90:	00000306 	br	12ea0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   12e94:	e13fff17 	ldw	r4,-4(fp)
   12e98:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   12e9c:	103ff01e 	bne	r2,zero,12e60 <__alt_data_end+0xffff3460>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   12ea0:	e0bffb17 	ldw	r2,-20(fp)
   12ea4:	10800017 	ldw	r2,0(r2)
   12ea8:	e0fffe04 	addi	r3,fp,-8
   12eac:	180f883a 	mov	r7,r3
   12eb0:	000d883a 	mov	r6,zero
   12eb4:	100b883a 	mov	r5,r2
   12eb8:	e13fff17 	ldw	r4,-4(fp)
   12ebc:	00129b00 	call	129b0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   12ec0:	e13fff17 	ldw	r4,-4(fp)
   12ec4:	00126140 	call	12614 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   12ec8:	e0bffb17 	ldw	r2,-20(fp)
   12ecc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   12ed0:	e0bffc17 	ldw	r2,-16(fp)
   12ed4:	00000a06 	br	12f00 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   12ed8:	e0bffb17 	ldw	r2,-20(fp)
   12edc:	10800217 	ldw	r2,8(r2)
   12ee0:	10000626 	beq	r2,zero,12efc <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   12ee4:	e0bffd17 	ldw	r2,-12(fp)
   12ee8:	100b883a 	mov	r5,r2
   12eec:	e13fff17 	ldw	r4,-4(fp)
   12ef0:	0013c0c0 	call	13c0c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   12ef4:	00bffe44 	movi	r2,-7
   12ef8:	00000106 	br	12f00 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   12efc:	0005883a 	mov	r2,zero
}
   12f00:	e037883a 	mov	sp,fp
   12f04:	dfc00117 	ldw	ra,4(sp)
   12f08:	df000017 	ldw	fp,0(sp)
   12f0c:	dec00204 	addi	sp,sp,8
   12f10:	f800283a 	ret

00012f14 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   12f14:	defff704 	addi	sp,sp,-36
   12f18:	dfc00815 	stw	ra,32(sp)
   12f1c:	df000715 	stw	fp,28(sp)
   12f20:	df000704 	addi	fp,sp,28
   12f24:	e13ffc15 	stw	r4,-16(fp)
   12f28:	e17ffd15 	stw	r5,-12(fp)
   12f2c:	e1bffe15 	stw	r6,-8(fp)
   12f30:	3805883a 	mov	r2,r7
   12f34:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   12f38:	0089c404 	movi	r2,10000
   12f3c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   12f40:	00002206 	br	12fcc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   12f44:	e0bffb17 	ldw	r2,-20(fp)
   12f48:	108002a8 	cmpgeui	r2,r2,10
   12f4c:	1000021e 	bne	r2,zero,12f58 <alt_avalon_i2c_master_tx+0x44>
   12f50:	0109c404 	movi	r4,10000
   12f54:	00149ac0 	call	149ac <alt_busy_sleep>
      if (use_interrupts)
   12f58:	e0bfff03 	ldbu	r2,-4(fp)
   12f5c:	10000926 	beq	r2,zero,12f84 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   12f60:	00800044 	movi	r2,1
   12f64:	d8800015 	stw	r2,0(sp)
   12f68:	000f883a 	mov	r7,zero
   12f6c:	e1bffe17 	ldw	r6,-8(fp)
   12f70:	e17ffd17 	ldw	r5,-12(fp)
   12f74:	e13ffc17 	ldw	r4,-16(fp)
   12f78:	00134c00 	call	134c0 <alt_avalon_i2c_master_transmit_using_interrupts>
   12f7c:	e0bffa15 	stw	r2,-24(fp)
   12f80:	00000806 	br	12fa4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   12f84:	00800044 	movi	r2,1
   12f88:	d8800015 	stw	r2,0(sp)
   12f8c:	000f883a 	mov	r7,zero
   12f90:	e1bffe17 	ldw	r6,-8(fp)
   12f94:	e17ffd17 	ldw	r5,-12(fp)
   12f98:	e13ffc17 	ldw	r4,-16(fp)
   12f9c:	00133000 	call	13300 <alt_avalon_i2c_master_transmit>
   12fa0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12fa4:	e0bffa17 	ldw	r2,-24(fp)
   12fa8:	10bffea0 	cmpeqi	r2,r2,-6
   12fac:	1000061e 	bne	r2,zero,12fc8 <alt_avalon_i2c_master_tx+0xb4>
   12fb0:	e0bffa17 	ldw	r2,-24(fp)
   12fb4:	10bffee0 	cmpeqi	r2,r2,-5
   12fb8:	1000031e 	bne	r2,zero,12fc8 <alt_avalon_i2c_master_tx+0xb4>
   12fbc:	e0bffa17 	ldw	r2,-24(fp)
   12fc0:	10bffe58 	cmpnei	r2,r2,-7
   12fc4:	1000061e 	bne	r2,zero,12fe0 <alt_avalon_i2c_master_tx+0xcc>
   12fc8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   12fcc:	e0bffb17 	ldw	r2,-20(fp)
   12fd0:	10ffffc4 	addi	r3,r2,-1
   12fd4:	e0fffb15 	stw	r3,-20(fp)
   12fd8:	103fda1e 	bne	r2,zero,12f44 <__alt_data_end+0xffff3544>
   12fdc:	00000106 	br	12fe4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   12fe0:	0001883a 	nop
    }

    return status;
   12fe4:	e0bffa17 	ldw	r2,-24(fp)
}        
   12fe8:	e037883a 	mov	sp,fp
   12fec:	dfc00117 	ldw	ra,4(sp)
   12ff0:	df000017 	ldw	fp,0(sp)
   12ff4:	dec00204 	addi	sp,sp,8
   12ff8:	f800283a 	ret

00012ffc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   12ffc:	defff704 	addi	sp,sp,-36
   13000:	dfc00815 	stw	ra,32(sp)
   13004:	df000715 	stw	fp,28(sp)
   13008:	df000704 	addi	fp,sp,28
   1300c:	e13ffc15 	stw	r4,-16(fp)
   13010:	e17ffd15 	stw	r5,-12(fp)
   13014:	e1bffe15 	stw	r6,-8(fp)
   13018:	3805883a 	mov	r2,r7
   1301c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   13020:	0089c404 	movi	r2,10000
   13024:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   13028:	e0bfff03 	ldbu	r2,-4(fp)
   1302c:	10003426 	beq	r2,zero,13100 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   13030:	00001706 	br	13090 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   13034:	e0bffb17 	ldw	r2,-20(fp)
   13038:	108002a8 	cmpgeui	r2,r2,10
   1303c:	1000021e 	bne	r2,zero,13048 <alt_avalon_i2c_master_rx+0x4c>
   13040:	0109c404 	movi	r4,10000
   13044:	00149ac0 	call	149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   13048:	00800044 	movi	r2,1
   1304c:	d8800015 	stw	r2,0(sp)
   13050:	000f883a 	mov	r7,zero
   13054:	e1bffe17 	ldw	r6,-8(fp)
   13058:	e17ffd17 	ldw	r5,-12(fp)
   1305c:	e13ffc17 	ldw	r4,-16(fp)
   13060:	00138dc0 	call	138dc <alt_avalon_i2c_master_receive_using_interrupts>
   13064:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13068:	e0bffa17 	ldw	r2,-24(fp)
   1306c:	10bffea0 	cmpeqi	r2,r2,-6
   13070:	1000061e 	bne	r2,zero,1308c <alt_avalon_i2c_master_rx+0x90>
   13074:	e0bffa17 	ldw	r2,-24(fp)
   13078:	10bffee0 	cmpeqi	r2,r2,-5
   1307c:	1000031e 	bne	r2,zero,1308c <alt_avalon_i2c_master_rx+0x90>
   13080:	e0bffa17 	ldw	r2,-24(fp)
   13084:	10bffe58 	cmpnei	r2,r2,-7
   13088:	1000221e 	bne	r2,zero,13114 <alt_avalon_i2c_master_rx+0x118>
   1308c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   13090:	e0bffb17 	ldw	r2,-20(fp)
   13094:	10ffffc4 	addi	r3,r2,-1
   13098:	e0fffb15 	stw	r3,-20(fp)
   1309c:	103fe51e 	bne	r2,zero,13034 <__alt_data_end+0xffff3634>
   130a0:	00001f06 	br	13120 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   130a4:	e0bffb17 	ldw	r2,-20(fp)
   130a8:	108002a8 	cmpgeui	r2,r2,10
   130ac:	1000021e 	bne	r2,zero,130b8 <alt_avalon_i2c_master_rx+0xbc>
   130b0:	0109c404 	movi	r4,10000
   130b4:	00149ac0 	call	149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   130b8:	00800044 	movi	r2,1
   130bc:	d8800015 	stw	r2,0(sp)
   130c0:	000f883a 	mov	r7,zero
   130c4:	e1bffe17 	ldw	r6,-8(fp)
   130c8:	e17ffd17 	ldw	r5,-12(fp)
   130cc:	e13ffc17 	ldw	r4,-16(fp)
   130d0:	00136cc0 	call	136cc <alt_avalon_i2c_master_receive>
   130d4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   130d8:	e0bffa17 	ldw	r2,-24(fp)
   130dc:	10bffea0 	cmpeqi	r2,r2,-6
   130e0:	1000061e 	bne	r2,zero,130fc <alt_avalon_i2c_master_rx+0x100>
   130e4:	e0bffa17 	ldw	r2,-24(fp)
   130e8:	10bffee0 	cmpeqi	r2,r2,-5
   130ec:	1000031e 	bne	r2,zero,130fc <alt_avalon_i2c_master_rx+0x100>
   130f0:	e0bffa17 	ldw	r2,-24(fp)
   130f4:	10bffe58 	cmpnei	r2,r2,-7
   130f8:	1000081e 	bne	r2,zero,1311c <alt_avalon_i2c_master_rx+0x120>
   130fc:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   13100:	e0bffb17 	ldw	r2,-20(fp)
   13104:	10ffffc4 	addi	r3,r2,-1
   13108:	e0fffb15 	stw	r3,-20(fp)
   1310c:	103fe51e 	bne	r2,zero,130a4 <__alt_data_end+0xffff36a4>
   13110:	00000306 	br	13120 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   13114:	0001883a 	nop
   13118:	00000106 	br	13120 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   1311c:	0001883a 	nop
      }
    }
    
    return status;
   13120:	e0bffa17 	ldw	r2,-24(fp)
}        
   13124:	e037883a 	mov	sp,fp
   13128:	dfc00117 	ldw	ra,4(sp)
   1312c:	df000017 	ldw	fp,0(sp)
   13130:	dec00204 	addi	sp,sp,8
   13134:	f800283a 	ret

00013138 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   13138:	defff604 	addi	sp,sp,-40
   1313c:	dfc00915 	stw	ra,36(sp)
   13140:	df000815 	stw	fp,32(sp)
   13144:	df000804 	addi	fp,sp,32
   13148:	e13ffb15 	stw	r4,-20(fp)
   1314c:	e17ffc15 	stw	r5,-16(fp)
   13150:	e1bffd15 	stw	r6,-12(fp)
   13154:	e1fffe15 	stw	r7,-8(fp)
   13158:	e0800317 	ldw	r2,12(fp)
   1315c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   13160:	0089c404 	movi	r2,10000
   13164:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   13168:	e0bfff03 	ldbu	r2,-4(fp)
   1316c:	10005626 	beq	r2,zero,132c8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   13170:	00002806 	br	13214 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   13174:	e0bffa17 	ldw	r2,-24(fp)
   13178:	108002a8 	cmpgeui	r2,r2,10
   1317c:	1000021e 	bne	r2,zero,13188 <alt_avalon_i2c_master_tx_rx+0x50>
   13180:	0109c404 	movi	r4,10000
   13184:	00149ac0 	call	149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   13188:	d8000015 	stw	zero,0(sp)
   1318c:	000f883a 	mov	r7,zero
   13190:	e1bffd17 	ldw	r6,-12(fp)
   13194:	e17ffc17 	ldw	r5,-16(fp)
   13198:	e13ffb17 	ldw	r4,-20(fp)
   1319c:	00134c00 	call	134c0 <alt_avalon_i2c_master_transmit_using_interrupts>
   131a0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   131a4:	e0bff917 	ldw	r2,-28(fp)
   131a8:	10bffea0 	cmpeqi	r2,r2,-6
   131ac:	1000191e 	bne	r2,zero,13214 <alt_avalon_i2c_master_tx_rx+0xdc>
   131b0:	e0bff917 	ldw	r2,-28(fp)
   131b4:	10bffee0 	cmpeqi	r2,r2,-5
   131b8:	1000161e 	bne	r2,zero,13214 <alt_avalon_i2c_master_tx_rx+0xdc>
   131bc:	e0bff917 	ldw	r2,-28(fp)
   131c0:	10bffe58 	cmpnei	r2,r2,-7
   131c4:	1000011e 	bne	r2,zero,131cc <alt_avalon_i2c_master_tx_rx+0x94>
   131c8:	00001206 	br	13214 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   131cc:	00800044 	movi	r2,1
   131d0:	d8800015 	stw	r2,0(sp)
   131d4:	01c00044 	movi	r7,1
   131d8:	e1800217 	ldw	r6,8(fp)
   131dc:	e17ffe17 	ldw	r5,-8(fp)
   131e0:	e13ffb17 	ldw	r4,-20(fp)
   131e4:	00138dc0 	call	138dc <alt_avalon_i2c_master_receive_using_interrupts>
   131e8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   131ec:	e0bff917 	ldw	r2,-28(fp)
   131f0:	10bffea0 	cmpeqi	r2,r2,-6
   131f4:	1000061e 	bne	r2,zero,13210 <alt_avalon_i2c_master_tx_rx+0xd8>
   131f8:	e0bff917 	ldw	r2,-28(fp)
   131fc:	10bffee0 	cmpeqi	r2,r2,-5
   13200:	1000031e 	bne	r2,zero,13210 <alt_avalon_i2c_master_tx_rx+0xd8>
   13204:	e0bff917 	ldw	r2,-28(fp)
   13208:	10bffe58 	cmpnei	r2,r2,-7
   1320c:	1000331e 	bne	r2,zero,132dc <alt_avalon_i2c_master_tx_rx+0x1a4>
   13210:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   13214:	e0bffa17 	ldw	r2,-24(fp)
   13218:	10ffffc4 	addi	r3,r2,-1
   1321c:	e0fffa15 	stw	r3,-24(fp)
   13220:	103fd41e 	bne	r2,zero,13174 <__alt_data_end+0xffff3774>
   13224:	00003006 	br	132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   13228:	e0bffa17 	ldw	r2,-24(fp)
   1322c:	108002a8 	cmpgeui	r2,r2,10
   13230:	1000021e 	bne	r2,zero,1323c <alt_avalon_i2c_master_tx_rx+0x104>
   13234:	0109c404 	movi	r4,10000
   13238:	00149ac0 	call	149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   1323c:	d8000015 	stw	zero,0(sp)
   13240:	000f883a 	mov	r7,zero
   13244:	e1bffd17 	ldw	r6,-12(fp)
   13248:	e17ffc17 	ldw	r5,-16(fp)
   1324c:	e13ffb17 	ldw	r4,-20(fp)
   13250:	00133000 	call	13300 <alt_avalon_i2c_master_transmit>
   13254:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   13258:	e0bff917 	ldw	r2,-28(fp)
   1325c:	10bffea0 	cmpeqi	r2,r2,-6
   13260:	1000191e 	bne	r2,zero,132c8 <alt_avalon_i2c_master_tx_rx+0x190>
   13264:	e0bff917 	ldw	r2,-28(fp)
   13268:	10bffee0 	cmpeqi	r2,r2,-5
   1326c:	1000161e 	bne	r2,zero,132c8 <alt_avalon_i2c_master_tx_rx+0x190>
   13270:	e0bff917 	ldw	r2,-28(fp)
   13274:	10bffe58 	cmpnei	r2,r2,-7
   13278:	1000011e 	bne	r2,zero,13280 <alt_avalon_i2c_master_tx_rx+0x148>
   1327c:	00001206 	br	132c8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   13280:	00800044 	movi	r2,1
   13284:	d8800015 	stw	r2,0(sp)
   13288:	01c00044 	movi	r7,1
   1328c:	e1800217 	ldw	r6,8(fp)
   13290:	e17ffe17 	ldw	r5,-8(fp)
   13294:	e13ffb17 	ldw	r4,-20(fp)
   13298:	00136cc0 	call	136cc <alt_avalon_i2c_master_receive>
   1329c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   132a0:	e0bff917 	ldw	r2,-28(fp)
   132a4:	10bffea0 	cmpeqi	r2,r2,-6
   132a8:	1000061e 	bne	r2,zero,132c4 <alt_avalon_i2c_master_tx_rx+0x18c>
   132ac:	e0bff917 	ldw	r2,-28(fp)
   132b0:	10bffee0 	cmpeqi	r2,r2,-5
   132b4:	1000031e 	bne	r2,zero,132c4 <alt_avalon_i2c_master_tx_rx+0x18c>
   132b8:	e0bff917 	ldw	r2,-28(fp)
   132bc:	10bffe58 	cmpnei	r2,r2,-7
   132c0:	1000081e 	bne	r2,zero,132e4 <alt_avalon_i2c_master_tx_rx+0x1ac>
   132c4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   132c8:	e0bffa17 	ldw	r2,-24(fp)
   132cc:	10ffffc4 	addi	r3,r2,-1
   132d0:	e0fffa15 	stw	r3,-24(fp)
   132d4:	103fd41e 	bne	r2,zero,13228 <__alt_data_end+0xffff3828>
   132d8:	00000306 	br	132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   132dc:	0001883a 	nop
   132e0:	00000106 	br	132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   132e4:	0001883a 	nop
      }
    }
    
    return status;
   132e8:	e0bff917 	ldw	r2,-28(fp)
}                                       
   132ec:	e037883a 	mov	sp,fp
   132f0:	dfc00117 	ldw	ra,4(sp)
   132f4:	df000017 	ldw	fp,0(sp)
   132f8:	dec00204 	addi	sp,sp,8
   132fc:	f800283a 	ret

00013300 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   13300:	defff704 	addi	sp,sp,-36
   13304:	dfc00815 	stw	ra,32(sp)
   13308:	df000715 	stw	fp,28(sp)
   1330c:	df000704 	addi	fp,sp,28
   13310:	e13ffb15 	stw	r4,-20(fp)
   13314:	e17ffc15 	stw	r5,-16(fp)
   13318:	e1bffd15 	stw	r6,-12(fp)
   1331c:	3807883a 	mov	r3,r7
   13320:	e0800217 	ldw	r2,8(fp)
   13324:	e0fffe05 	stb	r3,-8(fp)
   13328:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   1332c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   13330:	0149c404 	movi	r5,10000
   13334:	e13ffd17 	ldw	r4,-12(fp)
   13338:	00116700 	call	11670 <__mulsi3>
   1333c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   13340:	e0bffd17 	ldw	r2,-12(fp)
   13344:	1000021e 	bne	r2,zero,13350 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   13348:	0005883a 	mov	r2,zero
   1334c:	00005706 	br	134ac <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   13350:	e0bffe03 	ldbu	r2,-8(fp)
   13354:	10000a1e 	bne	r2,zero,13380 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   13358:	e13ffb17 	ldw	r4,-20(fp)
   1335c:	001257c0 	call	1257c <alt_avalon_i2c_enable>
   13360:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   13364:	e0bffa17 	ldw	r2,-24(fp)
   13368:	10000226 	beq	r2,zero,13374 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   1336c:	e0bffa17 	ldw	r2,-24(fp)
   13370:	00004e06 	br	134ac <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   13374:	01400704 	movi	r5,28
   13378:	e13ffb17 	ldw	r4,-20(fp)
   1337c:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   13380:	e0bffe03 	ldbu	r2,-8(fp)
   13384:	100d883a 	mov	r6,r2
   13388:	000b883a 	mov	r5,zero
   1338c:	e13ffb17 	ldw	r4,-20(fp)
   13390:	0012be40 	call	12be4 <alt_avalon_i2c_send_address>
   13394:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   13398:	e0bffa17 	ldw	r2,-24(fp)
   1339c:	1000271e 	bne	r2,zero,1343c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   133a0:	00000f06 	br	133e0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   133a4:	e0bffc17 	ldw	r2,-16(fp)
   133a8:	10800003 	ldbu	r2,0(r2)
   133ac:	10803fcc 	andi	r2,r2,255
   133b0:	000f883a 	mov	r7,zero
   133b4:	000d883a 	mov	r6,zero
   133b8:	100b883a 	mov	r5,r2
   133bc:	e13ffb17 	ldw	r4,-20(fp)
   133c0:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   133c4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   133c8:	e0bffc17 	ldw	r2,-16(fp)
   133cc:	10800044 	addi	r2,r2,1
   133d0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	10bfffc4 	addi	r2,r2,-1
   133dc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   133e0:	e0bffd17 	ldw	r2,-12(fp)
   133e4:	108000b0 	cmpltui	r2,r2,2
   133e8:	1000021e 	bne	r2,zero,133f4 <alt_avalon_i2c_master_transmit+0xf4>
   133ec:	e0bffa17 	ldw	r2,-24(fp)
   133f0:	103fec26 	beq	r2,zero,133a4 <__alt_data_end+0xffff39a4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   133f4:	e0bffa17 	ldw	r2,-24(fp)
   133f8:	1000101e 	bne	r2,zero,1343c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   133fc:	e0bffc17 	ldw	r2,-16(fp)
   13400:	10800003 	ldbu	r2,0(r2)
   13404:	10803fcc 	andi	r2,r2,255
   13408:	e0ffff03 	ldbu	r3,-4(fp)
   1340c:	180f883a 	mov	r7,r3
   13410:	000d883a 	mov	r6,zero
   13414:	100b883a 	mov	r5,r2
   13418:	e13ffb17 	ldw	r4,-20(fp)
   1341c:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   13420:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   13424:	e0bffc17 	ldw	r2,-16(fp)
   13428:	10800044 	addi	r2,r2,1
   1342c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   13430:	e0bffd17 	ldw	r2,-12(fp)
   13434:	10bfffc4 	addi	r2,r2,-1
   13438:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1343c:	e0bfff03 	ldbu	r2,-4(fp)
   13440:	1000101e 	bne	r2,zero,13484 <alt_avalon_i2c_master_transmit+0x184>
   13444:	e0bffa17 	ldw	r2,-24(fp)
   13448:	10001726 	beq	r2,zero,134a8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1344c:	00000d06 	br	13484 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   13450:	e0bff917 	ldw	r2,-28(fp)
   13454:	108002a8 	cmpgeui	r2,r2,10
   13458:	1000021e 	bne	r2,zero,13464 <alt_avalon_i2c_master_transmit+0x164>
   1345c:	0109c404 	movi	r4,10000
   13460:	00149ac0 	call	149ac <alt_busy_sleep>
            if (--timeout == 0)
   13464:	e0bff917 	ldw	r2,-28(fp)
   13468:	10bfffc4 	addi	r2,r2,-1
   1346c:	e0bff915 	stw	r2,-28(fp)
   13470:	e0bff917 	ldw	r2,-28(fp)
   13474:	1000031e 	bne	r2,zero,13484 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   13478:	00bfff84 	movi	r2,-2
   1347c:	e0bffa15 	stw	r2,-24(fp)
               break;
   13480:	00000306 	br	13490 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   13484:	e13ffb17 	ldw	r4,-20(fp)
   13488:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   1348c:	103ff01e 	bne	r2,zero,13450 <__alt_data_end+0xffff3a50>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   13490:	e0bffa04 	addi	r2,fp,-24
   13494:	100b883a 	mov	r5,r2
   13498:	e13ffb17 	ldw	r4,-20(fp)
   1349c:	0012d400 	call	12d40 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   134a0:	e13ffb17 	ldw	r4,-20(fp)
   134a4:	00126140 	call	12614 <alt_avalon_i2c_disable>
    }


    return status;
   134a8:	e0bffa17 	ldw	r2,-24(fp)
}
   134ac:	e037883a 	mov	sp,fp
   134b0:	dfc00117 	ldw	ra,4(sp)
   134b4:	df000017 	ldw	fp,0(sp)
   134b8:	dec00204 	addi	sp,sp,8
   134bc:	f800283a 	ret

000134c0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   134c0:	defff604 	addi	sp,sp,-40
   134c4:	dfc00915 	stw	ra,36(sp)
   134c8:	df000815 	stw	fp,32(sp)
   134cc:	df000804 	addi	fp,sp,32
   134d0:	e13ffb15 	stw	r4,-20(fp)
   134d4:	e17ffc15 	stw	r5,-16(fp)
   134d8:	e1bffd15 	stw	r6,-12(fp)
   134dc:	3807883a 	mov	r3,r7
   134e0:	e0800217 	ldw	r2,8(fp)
   134e4:	e0fffe05 	stb	r3,-8(fp)
   134e8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   134ec:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   134f0:	0149c404 	movi	r5,10000
   134f4:	e13ffd17 	ldw	r4,-12(fp)
   134f8:	00116700 	call	11670 <__mulsi3>
   134fc:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   13500:	e0bffb17 	ldw	r2,-20(fp)
   13504:	10800717 	ldw	r2,28(r2)
   13508:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   1350c:	e0bffd17 	ldw	r2,-12(fp)
   13510:	1000021e 	bne	r2,zero,1351c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   13514:	0005883a 	mov	r2,zero
   13518:	00006706 	br	136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1351c:	e0bffb17 	ldw	r2,-20(fp)
   13520:	10c00617 	ldw	r3,24(r2)
   13524:	00800074 	movhi	r2,1
   13528:	10888004 	addi	r2,r2,8704
   1352c:	18800226 	beq	r3,r2,13538 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   13530:	00bfff44 	movi	r2,-3
   13534:	00006006 	br	136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   13538:	e0bffe03 	ldbu	r2,-8(fp)
   1353c:	10000a1e 	bne	r2,zero,13568 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   13540:	e13ffb17 	ldw	r4,-20(fp)
   13544:	001257c0 	call	1257c <alt_avalon_i2c_enable>
   13548:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1354c:	e0bff817 	ldw	r2,-32(fp)
   13550:	10000226 	beq	r2,zero,1355c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   13554:	e0bff817 	ldw	r2,-32(fp)
   13558:	00005706 	br	136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1355c:	01400704 	movi	r5,28
   13560:	e13ffb17 	ldw	r4,-20(fp)
   13564:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   13568:	e0bffe03 	ldbu	r2,-8(fp)
   1356c:	100d883a 	mov	r6,r2
   13570:	000b883a 	mov	r5,zero
   13574:	e13ffb17 	ldw	r4,-20(fp)
   13578:	0012be40 	call	12be4 <alt_avalon_i2c_send_address>
   1357c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   13580:	e0bff817 	ldw	r2,-32(fp)
   13584:	1000271e 	bne	r2,zero,13624 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   13588:	00000f06 	br	135c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1358c:	e0bffc17 	ldw	r2,-16(fp)
   13590:	10800003 	ldbu	r2,0(r2)
   13594:	10803fcc 	andi	r2,r2,255
   13598:	000f883a 	mov	r7,zero
   1359c:	000d883a 	mov	r6,zero
   135a0:	100b883a 	mov	r5,r2
   135a4:	e13ffb17 	ldw	r4,-20(fp)
   135a8:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   135ac:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   135b0:	e0bffc17 	ldw	r2,-16(fp)
   135b4:	10800044 	addi	r2,r2,1
   135b8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	10bfffc4 	addi	r2,r2,-1
   135c4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   135c8:	e0bffd17 	ldw	r2,-12(fp)
   135cc:	108000b0 	cmpltui	r2,r2,2
   135d0:	1000021e 	bne	r2,zero,135dc <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   135d4:	e0bff817 	ldw	r2,-32(fp)
   135d8:	103fec26 	beq	r2,zero,1358c <__alt_data_end+0xffff3b8c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   135dc:	e0bff817 	ldw	r2,-32(fp)
   135e0:	1000101e 	bne	r2,zero,13624 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   135e4:	e0bffc17 	ldw	r2,-16(fp)
   135e8:	10800003 	ldbu	r2,0(r2)
   135ec:	10803fcc 	andi	r2,r2,255
   135f0:	e0ffff03 	ldbu	r3,-4(fp)
   135f4:	180f883a 	mov	r7,r3
   135f8:	000d883a 	mov	r6,zero
   135fc:	100b883a 	mov	r5,r2
   13600:	e13ffb17 	ldw	r4,-20(fp)
   13604:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   13608:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   1360c:	e0bffc17 	ldw	r2,-16(fp)
   13610:	10800044 	addi	r2,r2,1
   13614:	e0bffc15 	stw	r2,-16(fp)
            --size;
   13618:	e0bffd17 	ldw	r2,-12(fp)
   1361c:	10bfffc4 	addi	r2,r2,-1
   13620:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   13624:	e0bff817 	ldw	r2,-32(fp)
   13628:	10001426 	beq	r2,zero,1367c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1362c:	00000d06 	br	13664 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   13630:	e0bff917 	ldw	r2,-28(fp)
   13634:	108002a8 	cmpgeui	r2,r2,10
   13638:	1000021e 	bne	r2,zero,13644 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   1363c:	0109c404 	movi	r4,10000
   13640:	00149ac0 	call	149ac <alt_busy_sleep>
            if (--timeout == 0)
   13644:	e0bff917 	ldw	r2,-28(fp)
   13648:	10bfffc4 	addi	r2,r2,-1
   1364c:	e0bff915 	stw	r2,-28(fp)
   13650:	e0bff917 	ldw	r2,-28(fp)
   13654:	1000031e 	bne	r2,zero,13664 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   13658:	00bfff84 	movi	r2,-2
   1365c:	e0bff815 	stw	r2,-32(fp)
               break;
   13660:	00000306 	br	13670 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   13664:	e13ffb17 	ldw	r4,-20(fp)
   13668:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   1366c:	103ff01e 	bne	r2,zero,13630 <__alt_data_end+0xffff3c30>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   13670:	e13ffb17 	ldw	r4,-20(fp)
   13674:	00126140 	call	12614 <alt_avalon_i2c_disable>
   13678:	00000e06 	br	136b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   1367c:	e0bfff03 	ldbu	r2,-4(fp)
   13680:	10000c26 	beq	r2,zero,136b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   13684:	01400704 	movi	r5,28
   13688:	e13ffb17 	ldw	r4,-20(fp)
   1368c:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   13690:	000b883a 	mov	r5,zero
   13694:	e13ffb17 	ldw	r4,-20(fp)
   13698:	0013db00 	call	13db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   1369c:	e0bffa17 	ldw	r2,-24(fp)
   136a0:	00c00044 	movi	r3,1
   136a4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   136a8:	01400044 	movi	r5,1
   136ac:	e13ffb17 	ldw	r4,-20(fp)
   136b0:	0013c0c0 	call	13c0c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   136b4:	e0bff817 	ldw	r2,-32(fp)
}
   136b8:	e037883a 	mov	sp,fp
   136bc:	dfc00117 	ldw	ra,4(sp)
   136c0:	df000017 	ldw	fp,0(sp)
   136c4:	dec00204 	addi	sp,sp,8
   136c8:	f800283a 	ret

000136cc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   136cc:	defff404 	addi	sp,sp,-48
   136d0:	dfc00b15 	stw	ra,44(sp)
   136d4:	df000a15 	stw	fp,40(sp)
   136d8:	df000a04 	addi	fp,sp,40
   136dc:	e13ffb15 	stw	r4,-20(fp)
   136e0:	e17ffc15 	stw	r5,-16(fp)
   136e4:	e1bffd15 	stw	r6,-12(fp)
   136e8:	3807883a 	mov	r3,r7
   136ec:	e0800217 	ldw	r2,8(fp)
   136f0:	e0fffe05 	stb	r3,-8(fp)
   136f4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   136f8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   136fc:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   13700:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   13704:	e0bffd17 	ldw	r2,-12(fp)
   13708:	1000021e 	bne	r2,zero,13714 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   1370c:	0005883a 	mov	r2,zero
   13710:	00006d06 	br	138c8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   13714:	e0bffe03 	ldbu	r2,-8(fp)
   13718:	10000a1e 	bne	r2,zero,13744 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1371c:	e13ffb17 	ldw	r4,-20(fp)
   13720:	001257c0 	call	1257c <alt_avalon_i2c_enable>
   13724:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   13728:	e0bff917 	ldw	r2,-28(fp)
   1372c:	10000226 	beq	r2,zero,13738 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   13730:	e0bff917 	ldw	r2,-28(fp)
   13734:	00006406 	br	138c8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   13738:	01400704 	movi	r5,28
   1373c:	e13ffb17 	ldw	r4,-20(fp)
   13740:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   13744:	e0bffe03 	ldbu	r2,-8(fp)
   13748:	100d883a 	mov	r6,r2
   1374c:	01400044 	movi	r5,1
   13750:	e13ffb17 	ldw	r4,-20(fp)
   13754:	0012be40 	call	12be4 <alt_avalon_i2c_send_address>
   13758:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   1375c:	e0bff917 	ldw	r2,-28(fp)
   13760:	1000341e 	bne	r2,zero,13834 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   13764:	00001906 	br	137cc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   13768:	000f883a 	mov	r7,zero
   1376c:	000d883a 	mov	r6,zero
   13770:	000b883a 	mov	r5,zero
   13774:	e13ffb17 	ldw	r4,-20(fp)
   13778:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   1377c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   13780:	e0bff817 	ldw	r2,-32(fp)
   13784:	10800044 	addi	r2,r2,1
   13788:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   1378c:	e0bff917 	ldw	r2,-28(fp)
   13790:	10000e1e 	bne	r2,zero,137cc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   13794:	e0bffa04 	addi	r2,fp,-24
   13798:	100f883a 	mov	r7,r2
   1379c:	000d883a 	mov	r6,zero
   137a0:	e17ffc17 	ldw	r5,-16(fp)
   137a4:	e13ffb17 	ldw	r4,-20(fp)
   137a8:	00129b00 	call	129b0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   137ac:	e0bffa17 	ldw	r2,-24(fp)
   137b0:	e0fffc17 	ldw	r3,-16(fp)
   137b4:	1885883a 	add	r2,r3,r2
   137b8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   137bc:	e0bffa17 	ldw	r2,-24(fp)
   137c0:	e0fff717 	ldw	r3,-36(fp)
   137c4:	1885883a 	add	r2,r3,r2
   137c8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   137cc:	e0bffd17 	ldw	r2,-12(fp)
   137d0:	10bfffc4 	addi	r2,r2,-1
   137d4:	e0fff817 	ldw	r3,-32(fp)
   137d8:	1880022e 	bgeu	r3,r2,137e4 <alt_avalon_i2c_master_receive+0x118>
   137dc:	e0bff917 	ldw	r2,-28(fp)
   137e0:	103fe126 	beq	r2,zero,13768 <__alt_data_end+0xffff3d68>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   137e4:	e0bff917 	ldw	r2,-28(fp)
   137e8:	1000121e 	bne	r2,zero,13834 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   137ec:	e0bfff03 	ldbu	r2,-4(fp)
   137f0:	100f883a 	mov	r7,r2
   137f4:	000d883a 	mov	r6,zero
   137f8:	000b883a 	mov	r5,zero
   137fc:	e13ffb17 	ldw	r4,-20(fp)
   13800:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   13804:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   13808:	00000a06 	br	13834 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   1380c:	e17ffc17 	ldw	r5,-16(fp)
   13810:	e13ffb17 	ldw	r4,-20(fp)
   13814:	0012a580 	call	12a58 <alt_avalon_i2c_rx_read>
   13818:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   1381c:	e0bffc17 	ldw	r2,-16(fp)
   13820:	10800044 	addi	r2,r2,1
   13824:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   13828:	e0bff717 	ldw	r2,-36(fp)
   1382c:	10800044 	addi	r2,r2,1
   13830:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   13834:	e0fff717 	ldw	r3,-36(fp)
   13838:	e0bffd17 	ldw	r2,-12(fp)
   1383c:	1880022e 	bgeu	r3,r2,13848 <alt_avalon_i2c_master_receive+0x17c>
   13840:	e0bff917 	ldw	r2,-28(fp)
   13844:	103ff126 	beq	r2,zero,1380c <__alt_data_end+0xffff3e0c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   13848:	e0bfff03 	ldbu	r2,-4(fp)
   1384c:	1000021e 	bne	r2,zero,13858 <alt_avalon_i2c_master_receive+0x18c>
   13850:	e0bff917 	ldw	r2,-28(fp)
   13854:	10001b26 	beq	r2,zero,138c4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   13858:	0149c404 	movi	r5,10000
   1385c:	e13ffd17 	ldw	r4,-12(fp)
   13860:	00116700 	call	11670 <__mulsi3>
   13864:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   13868:	00000d06 	br	138a0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   1386c:	e0bff617 	ldw	r2,-40(fp)
   13870:	108002a8 	cmpgeui	r2,r2,10
   13874:	1000021e 	bne	r2,zero,13880 <alt_avalon_i2c_master_receive+0x1b4>
   13878:	0109c404 	movi	r4,10000
   1387c:	00149ac0 	call	149ac <alt_busy_sleep>
            if (--timeout == 0)
   13880:	e0bff617 	ldw	r2,-40(fp)
   13884:	10bfffc4 	addi	r2,r2,-1
   13888:	e0bff615 	stw	r2,-40(fp)
   1388c:	e0bff617 	ldw	r2,-40(fp)
   13890:	1000031e 	bne	r2,zero,138a0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   13894:	00bfff84 	movi	r2,-2
   13898:	e0bff915 	stw	r2,-28(fp)
               break;
   1389c:	00000306 	br	138ac <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   138a0:	e13ffb17 	ldw	r4,-20(fp)
   138a4:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   138a8:	103ff01e 	bne	r2,zero,1386c <__alt_data_end+0xffff3e6c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   138ac:	e0bff904 	addi	r2,fp,-28
   138b0:	100b883a 	mov	r5,r2
   138b4:	e13ffb17 	ldw	r4,-20(fp)
   138b8:	0012d400 	call	12d40 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   138bc:	e13ffb17 	ldw	r4,-20(fp)
   138c0:	00126140 	call	12614 <alt_avalon_i2c_disable>
    }

    return status;
   138c4:	e0bff917 	ldw	r2,-28(fp)
}
   138c8:	e037883a 	mov	sp,fp
   138cc:	dfc00117 	ldw	ra,4(sp)
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00204 	addi	sp,sp,8
   138d8:	f800283a 	ret

000138dc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   138dc:	defff504 	addi	sp,sp,-44
   138e0:	dfc00a15 	stw	ra,40(sp)
   138e4:	df000915 	stw	fp,36(sp)
   138e8:	df000904 	addi	fp,sp,36
   138ec:	e13ffb15 	stw	r4,-20(fp)
   138f0:	e17ffc15 	stw	r5,-16(fp)
   138f4:	e1bffd15 	stw	r6,-12(fp)
   138f8:	3807883a 	mov	r3,r7
   138fc:	e0800217 	ldw	r2,8(fp)
   13900:	e0fffe05 	stb	r3,-8(fp)
   13904:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   13908:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1390c:	e0bffb17 	ldw	r2,-20(fp)
   13910:	10800717 	ldw	r2,28(r2)
   13914:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   13918:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   1391c:	e0bffd17 	ldw	r2,-12(fp)
   13920:	1000021e 	bne	r2,zero,1392c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   13924:	0005883a 	mov	r2,zero
   13928:	00006306 	br	13ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1392c:	e0bffb17 	ldw	r2,-20(fp)
   13930:	10c00617 	ldw	r3,24(r2)
   13934:	00800074 	movhi	r2,1
   13938:	10888004 	addi	r2,r2,8704
   1393c:	18800226 	beq	r3,r2,13948 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   13940:	00bfff44 	movi	r2,-3
   13944:	00005c06 	br	13ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   13948:	e0bffe03 	ldbu	r2,-8(fp)
   1394c:	10000a1e 	bne	r2,zero,13978 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   13950:	e13ffb17 	ldw	r4,-20(fp)
   13954:	001257c0 	call	1257c <alt_avalon_i2c_enable>
   13958:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   1395c:	e0bff717 	ldw	r2,-36(fp)
   13960:	10000226 	beq	r2,zero,1396c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   13964:	e0bff717 	ldw	r2,-36(fp)
   13968:	00005306 	br	13ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   1396c:	01400704 	movi	r5,28
   13970:	e13ffb17 	ldw	r4,-20(fp)
   13974:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   13978:	e0bffe03 	ldbu	r2,-8(fp)
   1397c:	100d883a 	mov	r6,r2
   13980:	01400044 	movi	r5,1
   13984:	e13ffb17 	ldw	r4,-20(fp)
   13988:	0012be40 	call	12be4 <alt_avalon_i2c_send_address>
   1398c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   13990:	e0bff717 	ldw	r2,-36(fp)
   13994:	1000191e 	bne	r2,zero,139fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   13998:	00000906 	br	139c0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1399c:	000f883a 	mov	r7,zero
   139a0:	000d883a 	mov	r6,zero
   139a4:	000b883a 	mov	r5,zero
   139a8:	e13ffb17 	ldw	r4,-20(fp)
   139ac:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   139b0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   139b4:	e0bff917 	ldw	r2,-28(fp)
   139b8:	10800044 	addi	r2,r2,1
   139bc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   139c0:	e0bffd17 	ldw	r2,-12(fp)
   139c4:	10bfffc4 	addi	r2,r2,-1
   139c8:	e0fff917 	ldw	r3,-28(fp)
   139cc:	1880022e 	bgeu	r3,r2,139d8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   139d0:	e0bff717 	ldw	r2,-36(fp)
   139d4:	103ff126 	beq	r2,zero,1399c <__alt_data_end+0xffff3f9c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   139d8:	e0bff717 	ldw	r2,-36(fp)
   139dc:	1000071e 	bne	r2,zero,139fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   139e0:	e0bfff03 	ldbu	r2,-4(fp)
   139e4:	100f883a 	mov	r7,r2
   139e8:	000d883a 	mov	r6,zero
   139ec:	000b883a 	mov	r5,zero
   139f0:	e13ffb17 	ldw	r4,-20(fp)
   139f4:	0012b000 	call	12b00 <alt_avalon_i2c_cmd_write>
   139f8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   139fc:	e0bff717 	ldw	r2,-36(fp)
   13a00:	10001826 	beq	r2,zero,13a64 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   13a04:	0149c404 	movi	r5,10000
   13a08:	e13ffd17 	ldw	r4,-12(fp)
   13a0c:	00116700 	call	11670 <__mulsi3>
   13a10:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   13a14:	00000d06 	br	13a4c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   13a18:	e0bff817 	ldw	r2,-32(fp)
   13a1c:	108002a8 	cmpgeui	r2,r2,10
   13a20:	1000021e 	bne	r2,zero,13a2c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   13a24:	0109c404 	movi	r4,10000
   13a28:	00149ac0 	call	149ac <alt_busy_sleep>
            if (--timeout == 0)
   13a2c:	e0bff817 	ldw	r2,-32(fp)
   13a30:	10bfffc4 	addi	r2,r2,-1
   13a34:	e0bff815 	stw	r2,-32(fp)
   13a38:	e0bff817 	ldw	r2,-32(fp)
   13a3c:	1000031e 	bne	r2,zero,13a4c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   13a40:	00bfff84 	movi	r2,-2
   13a44:	e0bff715 	stw	r2,-36(fp)
               break;
   13a48:	00000306 	br	13a58 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   13a4c:	e13ffb17 	ldw	r4,-20(fp)
   13a50:	001296c0 	call	1296c <alt_avalon_i2c_is_busy>
   13a54:	103ff01e 	bne	r2,zero,13a18 <__alt_data_end+0xffff4018>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   13a58:	e13ffb17 	ldw	r4,-20(fp)
   13a5c:	00126140 	call	12614 <alt_avalon_i2c_disable>
   13a60:	00001406 	br	13ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   13a64:	e0bfff03 	ldbu	r2,-4(fp)
   13a68:	10001226 	beq	r2,zero,13ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   13a6c:	01400704 	movi	r5,28
   13a70:	e13ffb17 	ldw	r4,-20(fp)
   13a74:	0013b680 	call	13b68 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   13a78:	000b883a 	mov	r5,zero
   13a7c:	e13ffb17 	ldw	r4,-20(fp)
   13a80:	0013d000 	call	13d00 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   13a84:	e0bffa17 	ldw	r2,-24(fp)
   13a88:	00c00084 	movi	r3,2
   13a8c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   13a90:	e0bffa17 	ldw	r2,-24(fp)
   13a94:	e0fffc17 	ldw	r3,-16(fp)
   13a98:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   13a9c:	e0bffa17 	ldw	r2,-24(fp)
   13aa0:	e0fffd17 	ldw	r3,-12(fp)
   13aa4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   13aa8:	01400084 	movi	r5,2
   13aac:	e13ffb17 	ldw	r4,-20(fp)
   13ab0:	0013c0c0 	call	13c0c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   13ab4:	e0bff717 	ldw	r2,-36(fp)
}
   13ab8:	e037883a 	mov	sp,fp
   13abc:	dfc00117 	ldw	ra,4(sp)
   13ac0:	df000017 	ldw	fp,0(sp)
   13ac4:	dec00204 	addi	sp,sp,8
   13ac8:	f800283a 	ret

00013acc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   13acc:	defffd04 	addi	sp,sp,-12
   13ad0:	df000215 	stw	fp,8(sp)
   13ad4:	df000204 	addi	fp,sp,8
   13ad8:	e13ffe15 	stw	r4,-8(fp)
   13adc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   13ae0:	e0bffe17 	ldw	r2,-8(fp)
   13ae4:	10800317 	ldw	r2,12(r2)
   13ae8:	10800404 	addi	r2,r2,16
   13aec:	10c00037 	ldwio	r3,0(r2)
   13af0:	e0bffe17 	ldw	r2,-8(fp)
   13af4:	10800317 	ldw	r2,12(r2)
   13af8:	10800304 	addi	r2,r2,12
   13afc:	10800037 	ldwio	r2,0(r2)
   13b00:	1884703a 	and	r2,r3,r2
   13b04:	1007883a 	mov	r3,r2
   13b08:	e0bfff17 	ldw	r2,-4(fp)
   13b0c:	10c00015 	stw	r3,0(r2)
}
   13b10:	0001883a 	nop
   13b14:	e037883a 	mov	sp,fp
   13b18:	df000017 	ldw	fp,0(sp)
   13b1c:	dec00104 	addi	sp,sp,4
   13b20:	f800283a 	ret

00013b24 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   13b24:	defffd04 	addi	sp,sp,-12
   13b28:	df000215 	stw	fp,8(sp)
   13b2c:	df000204 	addi	fp,sp,8
   13b30:	e13ffe15 	stw	r4,-8(fp)
   13b34:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   13b38:	e0bffe17 	ldw	r2,-8(fp)
   13b3c:	10800317 	ldw	r2,12(r2)
   13b40:	10800404 	addi	r2,r2,16
   13b44:	10800037 	ldwio	r2,0(r2)
   13b48:	1007883a 	mov	r3,r2
   13b4c:	e0bfff17 	ldw	r2,-4(fp)
   13b50:	10c00015 	stw	r3,0(r2)
}
   13b54:	0001883a 	nop
   13b58:	e037883a 	mov	sp,fp
   13b5c:	df000017 	ldw	fp,0(sp)
   13b60:	dec00104 	addi	sp,sp,4
   13b64:	f800283a 	ret

00013b68 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   13b68:	defffd04 	addi	sp,sp,-12
   13b6c:	df000215 	stw	fp,8(sp)
   13b70:	df000204 	addi	fp,sp,8
   13b74:	e13ffe15 	stw	r4,-8(fp)
   13b78:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10800317 	ldw	r2,12(r2)
   13b84:	10800404 	addi	r2,r2,16
   13b88:	e0ffff17 	ldw	r3,-4(fp)
   13b8c:	10c00035 	stwio	r3,0(r2)
}
   13b90:	0001883a 	nop
   13b94:	e037883a 	mov	sp,fp
   13b98:	df000017 	ldw	fp,0(sp)
   13b9c:	dec00104 	addi	sp,sp,4
   13ba0:	f800283a 	ret

00013ba4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   13ba4:	defffb04 	addi	sp,sp,-20
   13ba8:	dfc00415 	stw	ra,16(sp)
   13bac:	df000315 	stw	fp,12(sp)
   13bb0:	df000304 	addi	fp,sp,12
   13bb4:	e13ffe15 	stw	r4,-8(fp)
   13bb8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   13bbc:	e17ffd04 	addi	r5,fp,-12
   13bc0:	e13ffe17 	ldw	r4,-8(fp)
   13bc4:	0013c700 	call	13c70 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   13bc8:	e0bfff17 	ldw	r2,-4(fp)
   13bcc:	0086303a 	nor	r3,zero,r2
   13bd0:	e0bffd17 	ldw	r2,-12(fp)
   13bd4:	1884703a 	and	r2,r3,r2
   13bd8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   13bdc:	e0bffe17 	ldw	r2,-8(fp)
   13be0:	10800317 	ldw	r2,12(r2)
   13be4:	10800304 	addi	r2,r2,12
   13be8:	e0fffd17 	ldw	r3,-12(fp)
   13bec:	18c007cc 	andi	r3,r3,31
   13bf0:	10c00035 	stwio	r3,0(r2)
}
   13bf4:	0001883a 	nop
   13bf8:	e037883a 	mov	sp,fp
   13bfc:	dfc00117 	ldw	ra,4(sp)
   13c00:	df000017 	ldw	fp,0(sp)
   13c04:	dec00204 	addi	sp,sp,8
   13c08:	f800283a 	ret

00013c0c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   13c0c:	defffb04 	addi	sp,sp,-20
   13c10:	dfc00415 	stw	ra,16(sp)
   13c14:	df000315 	stw	fp,12(sp)
   13c18:	df000304 	addi	fp,sp,12
   13c1c:	e13ffe15 	stw	r4,-8(fp)
   13c20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   13c24:	e17ffd04 	addi	r5,fp,-12
   13c28:	e13ffe17 	ldw	r4,-8(fp)
   13c2c:	0013c700 	call	13c70 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   13c30:	e0fffd17 	ldw	r3,-12(fp)
   13c34:	e0bfff17 	ldw	r2,-4(fp)
   13c38:	1884b03a 	or	r2,r3,r2
   13c3c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   13c40:	e0bffe17 	ldw	r2,-8(fp)
   13c44:	10800317 	ldw	r2,12(r2)
   13c48:	10800304 	addi	r2,r2,12
   13c4c:	e0fffd17 	ldw	r3,-12(fp)
   13c50:	18c007cc 	andi	r3,r3,31
   13c54:	10c00035 	stwio	r3,0(r2)
}
   13c58:	0001883a 	nop
   13c5c:	e037883a 	mov	sp,fp
   13c60:	dfc00117 	ldw	ra,4(sp)
   13c64:	df000017 	ldw	fp,0(sp)
   13c68:	dec00204 	addi	sp,sp,8
   13c6c:	f800283a 	ret

00013c70 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   13c70:	defffd04 	addi	sp,sp,-12
   13c74:	df000215 	stw	fp,8(sp)
   13c78:	df000204 	addi	fp,sp,8
   13c7c:	e13ffe15 	stw	r4,-8(fp)
   13c80:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   13c84:	e0bffe17 	ldw	r2,-8(fp)
   13c88:	10800317 	ldw	r2,12(r2)
   13c8c:	10800304 	addi	r2,r2,12
   13c90:	10800037 	ldwio	r2,0(r2)
   13c94:	10c007cc 	andi	r3,r2,31
   13c98:	e0bfff17 	ldw	r2,-4(fp)
   13c9c:	10c00015 	stw	r3,0(r2)
}
   13ca0:	0001883a 	nop
   13ca4:	e037883a 	mov	sp,fp
   13ca8:	df000017 	ldw	fp,0(sp)
   13cac:	dec00104 	addi	sp,sp,4
   13cb0:	f800283a 	ret

00013cb4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   13cb4:	defffd04 	addi	sp,sp,-12
   13cb8:	df000215 	stw	fp,8(sp)
   13cbc:	df000204 	addi	fp,sp,8
   13cc0:	e13ffe15 	stw	r4,-8(fp)
   13cc4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   13cc8:	e0bffe17 	ldw	r2,-8(fp)
   13ccc:	10800317 	ldw	r2,12(r2)
   13cd0:	10800204 	addi	r2,r2,8
   13cd4:	10800037 	ldwio	r2,0(r2)
   13cd8:	10800c0c 	andi	r2,r2,48
   13cdc:	1005d13a 	srai	r2,r2,4
   13ce0:	1007883a 	mov	r3,r2
   13ce4:	e0bfff17 	ldw	r2,-4(fp)
   13ce8:	10c00015 	stw	r3,0(r2)
}
   13cec:	0001883a 	nop
   13cf0:	e037883a 	mov	sp,fp
   13cf4:	df000017 	ldw	fp,0(sp)
   13cf8:	dec00104 	addi	sp,sp,4
   13cfc:	f800283a 	ret

00013d00 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   13d00:	defffd04 	addi	sp,sp,-12
   13d04:	df000215 	stw	fp,8(sp)
   13d08:	df000204 	addi	fp,sp,8
   13d0c:	e13ffe15 	stw	r4,-8(fp)
   13d10:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   13d14:	e0bffe17 	ldw	r2,-8(fp)
   13d18:	10800317 	ldw	r2,12(r2)
   13d1c:	10800204 	addi	r2,r2,8
   13d20:	e0fffe17 	ldw	r3,-8(fp)
   13d24:	18c00317 	ldw	r3,12(r3)
   13d28:	18c00204 	addi	r3,r3,8
   13d2c:	18c00037 	ldwio	r3,0(r3)
   13d30:	1809883a 	mov	r4,r3
   13d34:	00fff3c4 	movi	r3,-49
   13d38:	20c8703a 	and	r4,r4,r3
   13d3c:	e0ffff17 	ldw	r3,-4(fp)
   13d40:	1806913a 	slli	r3,r3,4
   13d44:	18c00c0c 	andi	r3,r3,48
   13d48:	20c6b03a 	or	r3,r4,r3
   13d4c:	10c00035 	stwio	r3,0(r2)
}
   13d50:	0001883a 	nop
   13d54:	e037883a 	mov	sp,fp
   13d58:	df000017 	ldw	fp,0(sp)
   13d5c:	dec00104 	addi	sp,sp,4
   13d60:	f800283a 	ret

00013d64 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   13d64:	defffd04 	addi	sp,sp,-12
   13d68:	df000215 	stw	fp,8(sp)
   13d6c:	df000204 	addi	fp,sp,8
   13d70:	e13ffe15 	stw	r4,-8(fp)
   13d74:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   13d78:	e0bffe17 	ldw	r2,-8(fp)
   13d7c:	10800317 	ldw	r2,12(r2)
   13d80:	10800204 	addi	r2,r2,8
   13d84:	10800037 	ldwio	r2,0(r2)
   13d88:	1080030c 	andi	r2,r2,12
   13d8c:	1005d0ba 	srai	r2,r2,2
   13d90:	1007883a 	mov	r3,r2
   13d94:	e0bfff17 	ldw	r2,-4(fp)
   13d98:	10c00015 	stw	r3,0(r2)
}
   13d9c:	0001883a 	nop
   13da0:	e037883a 	mov	sp,fp
   13da4:	df000017 	ldw	fp,0(sp)
   13da8:	dec00104 	addi	sp,sp,4
   13dac:	f800283a 	ret

00013db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   13db0:	defffd04 	addi	sp,sp,-12
   13db4:	df000215 	stw	fp,8(sp)
   13db8:	df000204 	addi	fp,sp,8
   13dbc:	e13ffe15 	stw	r4,-8(fp)
   13dc0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   13dc4:	e0bffe17 	ldw	r2,-8(fp)
   13dc8:	10800317 	ldw	r2,12(r2)
   13dcc:	10c00204 	addi	r3,r2,8
   13dd0:	e0bffe17 	ldw	r2,-8(fp)
   13dd4:	10800317 	ldw	r2,12(r2)
   13dd8:	10800204 	addi	r2,r2,8
   13ddc:	10800037 	ldwio	r2,0(r2)
   13de0:	1009883a 	mov	r4,r2
   13de4:	00bffcc4 	movi	r2,-13
   13de8:	2088703a 	and	r4,r4,r2
   13dec:	e0bfff17 	ldw	r2,-4(fp)
   13df0:	1085883a 	add	r2,r2,r2
   13df4:	1085883a 	add	r2,r2,r2
   13df8:	1080030c 	andi	r2,r2,12
   13dfc:	2084b03a 	or	r2,r4,r2
   13e00:	18800035 	stwio	r2,0(r3)
}
   13e04:	0001883a 	nop
   13e08:	e037883a 	mov	sp,fp
   13e0c:	df000017 	ldw	fp,0(sp)
   13e10:	dec00104 	addi	sp,sp,4
   13e14:	f800283a 	ret

00013e18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13e18:	defffa04 	addi	sp,sp,-24
   13e1c:	dfc00515 	stw	ra,20(sp)
   13e20:	df000415 	stw	fp,16(sp)
   13e24:	df000404 	addi	fp,sp,16
   13e28:	e13ffd15 	stw	r4,-12(fp)
   13e2c:	e17ffe15 	stw	r5,-8(fp)
   13e30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e34:	e0bffd17 	ldw	r2,-12(fp)
   13e38:	10800017 	ldw	r2,0(r2)
   13e3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13e40:	e0bffc17 	ldw	r2,-16(fp)
   13e44:	10c00a04 	addi	r3,r2,40
   13e48:	e0bffd17 	ldw	r2,-12(fp)
   13e4c:	10800217 	ldw	r2,8(r2)
   13e50:	100f883a 	mov	r7,r2
   13e54:	e1bfff17 	ldw	r6,-4(fp)
   13e58:	e17ffe17 	ldw	r5,-8(fp)
   13e5c:	1809883a 	mov	r4,r3
   13e60:	00144400 	call	14440 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13e64:	e037883a 	mov	sp,fp
   13e68:	dfc00117 	ldw	ra,4(sp)
   13e6c:	df000017 	ldw	fp,0(sp)
   13e70:	dec00204 	addi	sp,sp,8
   13e74:	f800283a 	ret

00013e78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13e78:	defffa04 	addi	sp,sp,-24
   13e7c:	dfc00515 	stw	ra,20(sp)
   13e80:	df000415 	stw	fp,16(sp)
   13e84:	df000404 	addi	fp,sp,16
   13e88:	e13ffd15 	stw	r4,-12(fp)
   13e8c:	e17ffe15 	stw	r5,-8(fp)
   13e90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e94:	e0bffd17 	ldw	r2,-12(fp)
   13e98:	10800017 	ldw	r2,0(r2)
   13e9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13ea0:	e0bffc17 	ldw	r2,-16(fp)
   13ea4:	10c00a04 	addi	r3,r2,40
   13ea8:	e0bffd17 	ldw	r2,-12(fp)
   13eac:	10800217 	ldw	r2,8(r2)
   13eb0:	100f883a 	mov	r7,r2
   13eb4:	e1bfff17 	ldw	r6,-4(fp)
   13eb8:	e17ffe17 	ldw	r5,-8(fp)
   13ebc:	1809883a 	mov	r4,r3
   13ec0:	001465c0 	call	1465c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13ec4:	e037883a 	mov	sp,fp
   13ec8:	dfc00117 	ldw	ra,4(sp)
   13ecc:	df000017 	ldw	fp,0(sp)
   13ed0:	dec00204 	addi	sp,sp,8
   13ed4:	f800283a 	ret

00013ed8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13ed8:	defffc04 	addi	sp,sp,-16
   13edc:	dfc00315 	stw	ra,12(sp)
   13ee0:	df000215 	stw	fp,8(sp)
   13ee4:	df000204 	addi	fp,sp,8
   13ee8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13eec:	e0bfff17 	ldw	r2,-4(fp)
   13ef0:	10800017 	ldw	r2,0(r2)
   13ef4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13ef8:	e0bffe17 	ldw	r2,-8(fp)
   13efc:	10c00a04 	addi	r3,r2,40
   13f00:	e0bfff17 	ldw	r2,-4(fp)
   13f04:	10800217 	ldw	r2,8(r2)
   13f08:	100b883a 	mov	r5,r2
   13f0c:	1809883a 	mov	r4,r3
   13f10:	00142e80 	call	142e8 <altera_avalon_jtag_uart_close>
}
   13f14:	e037883a 	mov	sp,fp
   13f18:	dfc00117 	ldw	ra,4(sp)
   13f1c:	df000017 	ldw	fp,0(sp)
   13f20:	dec00204 	addi	sp,sp,8
   13f24:	f800283a 	ret

00013f28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13f28:	defffa04 	addi	sp,sp,-24
   13f2c:	dfc00515 	stw	ra,20(sp)
   13f30:	df000415 	stw	fp,16(sp)
   13f34:	df000404 	addi	fp,sp,16
   13f38:	e13ffd15 	stw	r4,-12(fp)
   13f3c:	e17ffe15 	stw	r5,-8(fp)
   13f40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13f44:	e0bffd17 	ldw	r2,-12(fp)
   13f48:	10800017 	ldw	r2,0(r2)
   13f4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13f50:	e0bffc17 	ldw	r2,-16(fp)
   13f54:	10800a04 	addi	r2,r2,40
   13f58:	e1bfff17 	ldw	r6,-4(fp)
   13f5c:	e17ffe17 	ldw	r5,-8(fp)
   13f60:	1009883a 	mov	r4,r2
   13f64:	00143500 	call	14350 <altera_avalon_jtag_uart_ioctl>
}
   13f68:	e037883a 	mov	sp,fp
   13f6c:	dfc00117 	ldw	ra,4(sp)
   13f70:	df000017 	ldw	fp,0(sp)
   13f74:	dec00204 	addi	sp,sp,8
   13f78:	f800283a 	ret

00013f7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13f7c:	defffa04 	addi	sp,sp,-24
   13f80:	dfc00515 	stw	ra,20(sp)
   13f84:	df000415 	stw	fp,16(sp)
   13f88:	df000404 	addi	fp,sp,16
   13f8c:	e13ffd15 	stw	r4,-12(fp)
   13f90:	e17ffe15 	stw	r5,-8(fp)
   13f94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13f98:	e0bffd17 	ldw	r2,-12(fp)
   13f9c:	00c00044 	movi	r3,1
   13fa0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13fa4:	e0bffd17 	ldw	r2,-12(fp)
   13fa8:	10800017 	ldw	r2,0(r2)
   13fac:	10800104 	addi	r2,r2,4
   13fb0:	1007883a 	mov	r3,r2
   13fb4:	e0bffd17 	ldw	r2,-12(fp)
   13fb8:	10800817 	ldw	r2,32(r2)
   13fbc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	e0ffff17 	ldw	r3,-4(fp)
   13fc8:	d8000015 	stw	zero,0(sp)
   13fcc:	e1fffd17 	ldw	r7,-12(fp)
   13fd0:	01800074 	movhi	r6,1
   13fd4:	31900f04 	addi	r6,r6,16444
   13fd8:	180b883a 	mov	r5,r3
   13fdc:	1009883a 	mov	r4,r2
   13fe0:	0014eb40 	call	14eb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13fe4:	e0bffd17 	ldw	r2,-12(fp)
   13fe8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13fec:	e0bffd17 	ldw	r2,-12(fp)
   13ff0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13ff4:	d0e4e717 	ldw	r3,-27748(gp)
   13ff8:	e1fffd17 	ldw	r7,-12(fp)
   13ffc:	01800074 	movhi	r6,1
   14000:	31909204 	addi	r6,r6,16968
   14004:	180b883a 	mov	r5,r3
   14008:	1009883a 	mov	r4,r2
   1400c:	00148800 	call	14880 <alt_alarm_start>
   14010:	1000040e 	bge	r2,zero,14024 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14014:	e0fffd17 	ldw	r3,-12(fp)
   14018:	00a00034 	movhi	r2,32768
   1401c:	10bfffc4 	addi	r2,r2,-1
   14020:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14024:	0001883a 	nop
   14028:	e037883a 	mov	sp,fp
   1402c:	dfc00117 	ldw	ra,4(sp)
   14030:	df000017 	ldw	fp,0(sp)
   14034:	dec00204 	addi	sp,sp,8
   14038:	f800283a 	ret

0001403c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1403c:	defff804 	addi	sp,sp,-32
   14040:	df000715 	stw	fp,28(sp)
   14044:	df000704 	addi	fp,sp,28
   14048:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1404c:	e0bfff17 	ldw	r2,-4(fp)
   14050:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   14054:	e0bffb17 	ldw	r2,-20(fp)
   14058:	10800017 	ldw	r2,0(r2)
   1405c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14060:	e0bffc17 	ldw	r2,-16(fp)
   14064:	10800104 	addi	r2,r2,4
   14068:	10800037 	ldwio	r2,0(r2)
   1406c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14070:	e0bffd17 	ldw	r2,-12(fp)
   14074:	1080c00c 	andi	r2,r2,768
   14078:	10006d26 	beq	r2,zero,14230 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	1080400c 	andi	r2,r2,256
   14084:	10003526 	beq	r2,zero,1415c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14088:	00800074 	movhi	r2,1
   1408c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14090:	e0bffb17 	ldw	r2,-20(fp)
   14094:	10800a17 	ldw	r2,40(r2)
   14098:	10800044 	addi	r2,r2,1
   1409c:	1081ffcc 	andi	r2,r2,2047
   140a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   140a4:	e0bffb17 	ldw	r2,-20(fp)
   140a8:	10c00b17 	ldw	r3,44(r2)
   140ac:	e0bffe17 	ldw	r2,-8(fp)
   140b0:	18801526 	beq	r3,r2,14108 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   140b4:	e0bffc17 	ldw	r2,-16(fp)
   140b8:	10800037 	ldwio	r2,0(r2)
   140bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   140c0:	e0bff917 	ldw	r2,-28(fp)
   140c4:	10a0000c 	andi	r2,r2,32768
   140c8:	10001126 	beq	r2,zero,14110 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   140cc:	e0bffb17 	ldw	r2,-20(fp)
   140d0:	10800a17 	ldw	r2,40(r2)
   140d4:	e0fff917 	ldw	r3,-28(fp)
   140d8:	1809883a 	mov	r4,r3
   140dc:	e0fffb17 	ldw	r3,-20(fp)
   140e0:	1885883a 	add	r2,r3,r2
   140e4:	10800e04 	addi	r2,r2,56
   140e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140ec:	e0bffb17 	ldw	r2,-20(fp)
   140f0:	10800a17 	ldw	r2,40(r2)
   140f4:	10800044 	addi	r2,r2,1
   140f8:	10c1ffcc 	andi	r3,r2,2047
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14104:	003fe206 	br	14090 <__alt_data_end+0xffff4690>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14108:	0001883a 	nop
   1410c:	00000106 	br	14114 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14110:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14114:	e0bff917 	ldw	r2,-28(fp)
   14118:	10bfffec 	andhi	r2,r2,65535
   1411c:	10000f26 	beq	r2,zero,1415c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14120:	e0bffb17 	ldw	r2,-20(fp)
   14124:	10c00817 	ldw	r3,32(r2)
   14128:	00bfff84 	movi	r2,-2
   1412c:	1886703a 	and	r3,r3,r2
   14130:	e0bffb17 	ldw	r2,-20(fp)
   14134:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14138:	e0bffc17 	ldw	r2,-16(fp)
   1413c:	10800104 	addi	r2,r2,4
   14140:	1007883a 	mov	r3,r2
   14144:	e0bffb17 	ldw	r2,-20(fp)
   14148:	10800817 	ldw	r2,32(r2)
   1414c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14150:	e0bffc17 	ldw	r2,-16(fp)
   14154:	10800104 	addi	r2,r2,4
   14158:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1415c:	e0bffd17 	ldw	r2,-12(fp)
   14160:	1080800c 	andi	r2,r2,512
   14164:	103fbe26 	beq	r2,zero,14060 <__alt_data_end+0xffff4660>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14168:	e0bffd17 	ldw	r2,-12(fp)
   1416c:	1004d43a 	srli	r2,r2,16
   14170:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14174:	00001406 	br	141c8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14178:	e0bffc17 	ldw	r2,-16(fp)
   1417c:	e0fffb17 	ldw	r3,-20(fp)
   14180:	18c00d17 	ldw	r3,52(r3)
   14184:	e13ffb17 	ldw	r4,-20(fp)
   14188:	20c7883a 	add	r3,r4,r3
   1418c:	18c20e04 	addi	r3,r3,2104
   14190:	18c00003 	ldbu	r3,0(r3)
   14194:	18c03fcc 	andi	r3,r3,255
   14198:	18c0201c 	xori	r3,r3,128
   1419c:	18ffe004 	addi	r3,r3,-128
   141a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   141a4:	e0bffb17 	ldw	r2,-20(fp)
   141a8:	10800d17 	ldw	r2,52(r2)
   141ac:	10800044 	addi	r2,r2,1
   141b0:	10c1ffcc 	andi	r3,r2,2047
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   141bc:	e0bffa17 	ldw	r2,-24(fp)
   141c0:	10bfffc4 	addi	r2,r2,-1
   141c4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   141c8:	e0bffa17 	ldw	r2,-24(fp)
   141cc:	10000526 	beq	r2,zero,141e4 <altera_avalon_jtag_uart_irq+0x1a8>
   141d0:	e0bffb17 	ldw	r2,-20(fp)
   141d4:	10c00d17 	ldw	r3,52(r2)
   141d8:	e0bffb17 	ldw	r2,-20(fp)
   141dc:	10800c17 	ldw	r2,48(r2)
   141e0:	18bfe51e 	bne	r3,r2,14178 <__alt_data_end+0xffff4778>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   141e4:	e0bffa17 	ldw	r2,-24(fp)
   141e8:	103f9d26 	beq	r2,zero,14060 <__alt_data_end+0xffff4660>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   141ec:	e0bffb17 	ldw	r2,-20(fp)
   141f0:	10c00817 	ldw	r3,32(r2)
   141f4:	00bfff44 	movi	r2,-3
   141f8:	1886703a 	and	r3,r3,r2
   141fc:	e0bffb17 	ldw	r2,-20(fp)
   14200:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14204:	e0bffb17 	ldw	r2,-20(fp)
   14208:	10800017 	ldw	r2,0(r2)
   1420c:	10800104 	addi	r2,r2,4
   14210:	1007883a 	mov	r3,r2
   14214:	e0bffb17 	ldw	r2,-20(fp)
   14218:	10800817 	ldw	r2,32(r2)
   1421c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14220:	e0bffc17 	ldw	r2,-16(fp)
   14224:	10800104 	addi	r2,r2,4
   14228:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1422c:	003f8c06 	br	14060 <__alt_data_end+0xffff4660>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14230:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   14234:	0001883a 	nop
   14238:	e037883a 	mov	sp,fp
   1423c:	df000017 	ldw	fp,0(sp)
   14240:	dec00104 	addi	sp,sp,4
   14244:	f800283a 	ret

00014248 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14248:	defff804 	addi	sp,sp,-32
   1424c:	df000715 	stw	fp,28(sp)
   14250:	df000704 	addi	fp,sp,28
   14254:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14258:	e0bffb17 	ldw	r2,-20(fp)
   1425c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14260:	e0bff917 	ldw	r2,-28(fp)
   14264:	10800017 	ldw	r2,0(r2)
   14268:	10800104 	addi	r2,r2,4
   1426c:	10800037 	ldwio	r2,0(r2)
   14270:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14274:	e0bffa17 	ldw	r2,-24(fp)
   14278:	1081000c 	andi	r2,r2,1024
   1427c:	10000b26 	beq	r2,zero,142ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14280:	e0bff917 	ldw	r2,-28(fp)
   14284:	10800017 	ldw	r2,0(r2)
   14288:	10800104 	addi	r2,r2,4
   1428c:	1007883a 	mov	r3,r2
   14290:	e0bff917 	ldw	r2,-28(fp)
   14294:	10800817 	ldw	r2,32(r2)
   14298:	10810014 	ori	r2,r2,1024
   1429c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   142a0:	e0bff917 	ldw	r2,-28(fp)
   142a4:	10000915 	stw	zero,36(r2)
   142a8:	00000a06 	br	142d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   142ac:	e0bff917 	ldw	r2,-28(fp)
   142b0:	10c00917 	ldw	r3,36(r2)
   142b4:	00a00034 	movhi	r2,32768
   142b8:	10bfff04 	addi	r2,r2,-4
   142bc:	10c00536 	bltu	r2,r3,142d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   142c0:	e0bff917 	ldw	r2,-28(fp)
   142c4:	10800917 	ldw	r2,36(r2)
   142c8:	10c00044 	addi	r3,r2,1
   142cc:	e0bff917 	ldw	r2,-28(fp)
   142d0:	10c00915 	stw	r3,36(r2)
   142d4:	d0a4e717 	ldw	r2,-27748(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   142d8:	e037883a 	mov	sp,fp
   142dc:	df000017 	ldw	fp,0(sp)
   142e0:	dec00104 	addi	sp,sp,4
   142e4:	f800283a 	ret

000142e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   142e8:	defffd04 	addi	sp,sp,-12
   142ec:	df000215 	stw	fp,8(sp)
   142f0:	df000204 	addi	fp,sp,8
   142f4:	e13ffe15 	stw	r4,-8(fp)
   142f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   142fc:	00000506 	br	14314 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14300:	e0bfff17 	ldw	r2,-4(fp)
   14304:	1090000c 	andi	r2,r2,16384
   14308:	10000226 	beq	r2,zero,14314 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1430c:	00bffd44 	movi	r2,-11
   14310:	00000b06 	br	14340 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14314:	e0bffe17 	ldw	r2,-8(fp)
   14318:	10c00d17 	ldw	r3,52(r2)
   1431c:	e0bffe17 	ldw	r2,-8(fp)
   14320:	10800c17 	ldw	r2,48(r2)
   14324:	18800526 	beq	r3,r2,1433c <altera_avalon_jtag_uart_close+0x54>
   14328:	e0bffe17 	ldw	r2,-8(fp)
   1432c:	10c00917 	ldw	r3,36(r2)
   14330:	e0bffe17 	ldw	r2,-8(fp)
   14334:	10800117 	ldw	r2,4(r2)
   14338:	18bff136 	bltu	r3,r2,14300 <__alt_data_end+0xffff4900>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1433c:	0005883a 	mov	r2,zero
}
   14340:	e037883a 	mov	sp,fp
   14344:	df000017 	ldw	fp,0(sp)
   14348:	dec00104 	addi	sp,sp,4
   1434c:	f800283a 	ret

00014350 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14350:	defffa04 	addi	sp,sp,-24
   14354:	df000515 	stw	fp,20(sp)
   14358:	df000504 	addi	fp,sp,20
   1435c:	e13ffd15 	stw	r4,-12(fp)
   14360:	e17ffe15 	stw	r5,-8(fp)
   14364:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14368:	00bff9c4 	movi	r2,-25
   1436c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14370:	e0bffe17 	ldw	r2,-8(fp)
   14374:	10da8060 	cmpeqi	r3,r2,27137
   14378:	1800031e 	bne	r3,zero,14388 <altera_avalon_jtag_uart_ioctl+0x38>
   1437c:	109a80a0 	cmpeqi	r2,r2,27138
   14380:	1000181e 	bne	r2,zero,143e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   14384:	00002906 	br	1442c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14388:	e0bffd17 	ldw	r2,-12(fp)
   1438c:	10c00117 	ldw	r3,4(r2)
   14390:	00a00034 	movhi	r2,32768
   14394:	10bfffc4 	addi	r2,r2,-1
   14398:	18802126 	beq	r3,r2,14420 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1439c:	e0bfff17 	ldw	r2,-4(fp)
   143a0:	10800017 	ldw	r2,0(r2)
   143a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   143a8:	e0bffc17 	ldw	r2,-16(fp)
   143ac:	10800090 	cmplti	r2,r2,2
   143b0:	1000061e 	bne	r2,zero,143cc <altera_avalon_jtag_uart_ioctl+0x7c>
   143b4:	e0fffc17 	ldw	r3,-16(fp)
   143b8:	00a00034 	movhi	r2,32768
   143bc:	10bfffc4 	addi	r2,r2,-1
   143c0:	18800226 	beq	r3,r2,143cc <altera_avalon_jtag_uart_ioctl+0x7c>
   143c4:	e0bffc17 	ldw	r2,-16(fp)
   143c8:	00000206 	br	143d4 <altera_avalon_jtag_uart_ioctl+0x84>
   143cc:	00a00034 	movhi	r2,32768
   143d0:	10bfff84 	addi	r2,r2,-2
   143d4:	e0fffd17 	ldw	r3,-12(fp)
   143d8:	18800115 	stw	r2,4(r3)
      rc = 0;
   143dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   143e0:	00000f06 	br	14420 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	10c00117 	ldw	r3,4(r2)
   143ec:	00a00034 	movhi	r2,32768
   143f0:	10bfffc4 	addi	r2,r2,-1
   143f4:	18800c26 	beq	r3,r2,14428 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   143f8:	e0bffd17 	ldw	r2,-12(fp)
   143fc:	10c00917 	ldw	r3,36(r2)
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	10800117 	ldw	r2,4(r2)
   14408:	1885803a 	cmpltu	r2,r3,r2
   1440c:	10c03fcc 	andi	r3,r2,255
   14410:	e0bfff17 	ldw	r2,-4(fp)
   14414:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14418:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1441c:	00000206 	br	14428 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14420:	0001883a 	nop
   14424:	00000106 	br	1442c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14428:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1442c:	e0bffb17 	ldw	r2,-20(fp)
}
   14430:	e037883a 	mov	sp,fp
   14434:	df000017 	ldw	fp,0(sp)
   14438:	dec00104 	addi	sp,sp,4
   1443c:	f800283a 	ret

00014440 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14440:	defff304 	addi	sp,sp,-52
   14444:	dfc00c15 	stw	ra,48(sp)
   14448:	df000b15 	stw	fp,44(sp)
   1444c:	df000b04 	addi	fp,sp,44
   14450:	e13ffc15 	stw	r4,-16(fp)
   14454:	e17ffd15 	stw	r5,-12(fp)
   14458:	e1bffe15 	stw	r6,-8(fp)
   1445c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14460:	e0bffd17 	ldw	r2,-12(fp)
   14464:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14468:	00004706 	br	14588 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	10800a17 	ldw	r2,40(r2)
   14474:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14478:	e0bffc17 	ldw	r2,-16(fp)
   1447c:	10800b17 	ldw	r2,44(r2)
   14480:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14484:	e0fff717 	ldw	r3,-36(fp)
   14488:	e0bff817 	ldw	r2,-32(fp)
   1448c:	18800536 	bltu	r3,r2,144a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14490:	e0fff717 	ldw	r3,-36(fp)
   14494:	e0bff817 	ldw	r2,-32(fp)
   14498:	1885c83a 	sub	r2,r3,r2
   1449c:	e0bff615 	stw	r2,-40(fp)
   144a0:	00000406 	br	144b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   144a4:	00c20004 	movi	r3,2048
   144a8:	e0bff817 	ldw	r2,-32(fp)
   144ac:	1885c83a 	sub	r2,r3,r2
   144b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   144b4:	e0bff617 	ldw	r2,-40(fp)
   144b8:	10001e26 	beq	r2,zero,14534 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   144bc:	e0fffe17 	ldw	r3,-8(fp)
   144c0:	e0bff617 	ldw	r2,-40(fp)
   144c4:	1880022e 	bgeu	r3,r2,144d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   144c8:	e0bffe17 	ldw	r2,-8(fp)
   144cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	10c00e04 	addi	r3,r2,56
   144d8:	e0bff817 	ldw	r2,-32(fp)
   144dc:	1885883a 	add	r2,r3,r2
   144e0:	e1bff617 	ldw	r6,-40(fp)
   144e4:	100b883a 	mov	r5,r2
   144e8:	e13ff517 	ldw	r4,-44(fp)
   144ec:	0015cb80 	call	15cb8 <memcpy>
      ptr   += n;
   144f0:	e0fff517 	ldw	r3,-44(fp)
   144f4:	e0bff617 	ldw	r2,-40(fp)
   144f8:	1885883a 	add	r2,r3,r2
   144fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14500:	e0fffe17 	ldw	r3,-8(fp)
   14504:	e0bff617 	ldw	r2,-40(fp)
   14508:	1885c83a 	sub	r2,r3,r2
   1450c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14510:	e0fff817 	ldw	r3,-32(fp)
   14514:	e0bff617 	ldw	r2,-40(fp)
   14518:	1885883a 	add	r2,r3,r2
   1451c:	10c1ffcc 	andi	r3,r2,2047
   14520:	e0bffc17 	ldw	r2,-16(fp)
   14524:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14528:	e0bffe17 	ldw	r2,-8(fp)
   1452c:	00bfcf16 	blt	zero,r2,1446c <__alt_data_end+0xffff4a6c>
   14530:	00000106 	br	14538 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   14534:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14538:	e0fff517 	ldw	r3,-44(fp)
   1453c:	e0bffd17 	ldw	r2,-12(fp)
   14540:	1880141e 	bne	r3,r2,14594 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   14544:	e0bfff17 	ldw	r2,-4(fp)
   14548:	1090000c 	andi	r2,r2,16384
   1454c:	1000131e 	bne	r2,zero,1459c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14550:	0001883a 	nop
   14554:	e0bffc17 	ldw	r2,-16(fp)
   14558:	10c00a17 	ldw	r3,40(r2)
   1455c:	e0bff717 	ldw	r2,-36(fp)
   14560:	1880051e 	bne	r3,r2,14578 <altera_avalon_jtag_uart_read+0x138>
   14564:	e0bffc17 	ldw	r2,-16(fp)
   14568:	10c00917 	ldw	r3,36(r2)
   1456c:	e0bffc17 	ldw	r2,-16(fp)
   14570:	10800117 	ldw	r2,4(r2)
   14574:	18bff736 	bltu	r3,r2,14554 <__alt_data_end+0xffff4b54>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14578:	e0bffc17 	ldw	r2,-16(fp)
   1457c:	10c00a17 	ldw	r3,40(r2)
   14580:	e0bff717 	ldw	r2,-36(fp)
   14584:	18800726 	beq	r3,r2,145a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14588:	e0bffe17 	ldw	r2,-8(fp)
   1458c:	00bfb716 	blt	zero,r2,1446c <__alt_data_end+0xffff4a6c>
   14590:	00000506 	br	145a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14594:	0001883a 	nop
   14598:	00000306 	br	145a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1459c:	0001883a 	nop
   145a0:	00000106 	br	145a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   145a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   145a8:	e0fff517 	ldw	r3,-44(fp)
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	18801826 	beq	r3,r2,14614 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145b4:	0005303a 	rdctl	r2,status
   145b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145bc:	e0fffb17 	ldw	r3,-20(fp)
   145c0:	00bfff84 	movi	r2,-2
   145c4:	1884703a 	and	r2,r3,r2
   145c8:	1001703a 	wrctl	status,r2
  
  return context;
   145cc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   145d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   145d4:	e0bffc17 	ldw	r2,-16(fp)
   145d8:	10800817 	ldw	r2,32(r2)
   145dc:	10c00054 	ori	r3,r2,1
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   145e8:	e0bffc17 	ldw	r2,-16(fp)
   145ec:	10800017 	ldw	r2,0(r2)
   145f0:	10800104 	addi	r2,r2,4
   145f4:	1007883a 	mov	r3,r2
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	10800817 	ldw	r2,32(r2)
   14600:	18800035 	stwio	r2,0(r3)
   14604:	e0bffa17 	ldw	r2,-24(fp)
   14608:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1460c:	e0bff917 	ldw	r2,-28(fp)
   14610:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14614:	e0fff517 	ldw	r3,-44(fp)
   14618:	e0bffd17 	ldw	r2,-12(fp)
   1461c:	18800426 	beq	r3,r2,14630 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14620:	e0fff517 	ldw	r3,-44(fp)
   14624:	e0bffd17 	ldw	r2,-12(fp)
   14628:	1885c83a 	sub	r2,r3,r2
   1462c:	00000606 	br	14648 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14630:	e0bfff17 	ldw	r2,-4(fp)
   14634:	1090000c 	andi	r2,r2,16384
   14638:	10000226 	beq	r2,zero,14644 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1463c:	00bffd44 	movi	r2,-11
   14640:	00000106 	br	14648 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14644:	00bffec4 	movi	r2,-5
}
   14648:	e037883a 	mov	sp,fp
   1464c:	dfc00117 	ldw	ra,4(sp)
   14650:	df000017 	ldw	fp,0(sp)
   14654:	dec00204 	addi	sp,sp,8
   14658:	f800283a 	ret

0001465c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1465c:	defff304 	addi	sp,sp,-52
   14660:	dfc00c15 	stw	ra,48(sp)
   14664:	df000b15 	stw	fp,44(sp)
   14668:	df000b04 	addi	fp,sp,44
   1466c:	e13ffc15 	stw	r4,-16(fp)
   14670:	e17ffd15 	stw	r5,-12(fp)
   14674:	e1bffe15 	stw	r6,-8(fp)
   14678:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1467c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14680:	e0bffd17 	ldw	r2,-12(fp)
   14684:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14688:	00003706 	br	14768 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1468c:	e0bffc17 	ldw	r2,-16(fp)
   14690:	10800c17 	ldw	r2,48(r2)
   14694:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14698:	e0bffc17 	ldw	r2,-16(fp)
   1469c:	10800d17 	ldw	r2,52(r2)
   146a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   146a4:	e0fff917 	ldw	r3,-28(fp)
   146a8:	e0bff517 	ldw	r2,-44(fp)
   146ac:	1880062e 	bgeu	r3,r2,146c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   146b0:	e0fff517 	ldw	r3,-44(fp)
   146b4:	e0bff917 	ldw	r2,-28(fp)
   146b8:	1885c83a 	sub	r2,r3,r2
   146bc:	10bfffc4 	addi	r2,r2,-1
   146c0:	e0bff615 	stw	r2,-40(fp)
   146c4:	00000b06 	br	146f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   146c8:	e0bff517 	ldw	r2,-44(fp)
   146cc:	10000526 	beq	r2,zero,146e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   146d0:	00c20004 	movi	r3,2048
   146d4:	e0bff917 	ldw	r2,-28(fp)
   146d8:	1885c83a 	sub	r2,r3,r2
   146dc:	e0bff615 	stw	r2,-40(fp)
   146e0:	00000406 	br	146f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   146e4:	00c1ffc4 	movi	r3,2047
   146e8:	e0bff917 	ldw	r2,-28(fp)
   146ec:	1885c83a 	sub	r2,r3,r2
   146f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   146f4:	e0bff617 	ldw	r2,-40(fp)
   146f8:	10001e26 	beq	r2,zero,14774 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   146fc:	e0fffe17 	ldw	r3,-8(fp)
   14700:	e0bff617 	ldw	r2,-40(fp)
   14704:	1880022e 	bgeu	r3,r2,14710 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14708:	e0bffe17 	ldw	r2,-8(fp)
   1470c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14710:	e0bffc17 	ldw	r2,-16(fp)
   14714:	10c20e04 	addi	r3,r2,2104
   14718:	e0bff917 	ldw	r2,-28(fp)
   1471c:	1885883a 	add	r2,r3,r2
   14720:	e1bff617 	ldw	r6,-40(fp)
   14724:	e17ffd17 	ldw	r5,-12(fp)
   14728:	1009883a 	mov	r4,r2
   1472c:	0015cb80 	call	15cb8 <memcpy>
      ptr   += n;
   14730:	e0fffd17 	ldw	r3,-12(fp)
   14734:	e0bff617 	ldw	r2,-40(fp)
   14738:	1885883a 	add	r2,r3,r2
   1473c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14740:	e0fffe17 	ldw	r3,-8(fp)
   14744:	e0bff617 	ldw	r2,-40(fp)
   14748:	1885c83a 	sub	r2,r3,r2
   1474c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14750:	e0fff917 	ldw	r3,-28(fp)
   14754:	e0bff617 	ldw	r2,-40(fp)
   14758:	1885883a 	add	r2,r3,r2
   1475c:	10c1ffcc 	andi	r3,r2,2047
   14760:	e0bffc17 	ldw	r2,-16(fp)
   14764:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14768:	e0bffe17 	ldw	r2,-8(fp)
   1476c:	00bfc716 	blt	zero,r2,1468c <__alt_data_end+0xffff4c8c>
   14770:	00000106 	br	14778 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14774:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14778:	0005303a 	rdctl	r2,status
   1477c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14780:	e0fffb17 	ldw	r3,-20(fp)
   14784:	00bfff84 	movi	r2,-2
   14788:	1884703a 	and	r2,r3,r2
   1478c:	1001703a 	wrctl	status,r2
  
  return context;
   14790:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14794:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14798:	e0bffc17 	ldw	r2,-16(fp)
   1479c:	10800817 	ldw	r2,32(r2)
   147a0:	10c00094 	ori	r3,r2,2
   147a4:	e0bffc17 	ldw	r2,-16(fp)
   147a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   147ac:	e0bffc17 	ldw	r2,-16(fp)
   147b0:	10800017 	ldw	r2,0(r2)
   147b4:	10800104 	addi	r2,r2,4
   147b8:	1007883a 	mov	r3,r2
   147bc:	e0bffc17 	ldw	r2,-16(fp)
   147c0:	10800817 	ldw	r2,32(r2)
   147c4:	18800035 	stwio	r2,0(r3)
   147c8:	e0bffa17 	ldw	r2,-24(fp)
   147cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147d0:	e0bff817 	ldw	r2,-32(fp)
   147d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   147d8:	e0bffe17 	ldw	r2,-8(fp)
   147dc:	0080100e 	bge	zero,r2,14820 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   147e0:	e0bfff17 	ldw	r2,-4(fp)
   147e4:	1090000c 	andi	r2,r2,16384
   147e8:	1000101e 	bne	r2,zero,1482c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   147ec:	0001883a 	nop
   147f0:	e0bffc17 	ldw	r2,-16(fp)
   147f4:	10c00d17 	ldw	r3,52(r2)
   147f8:	e0bff517 	ldw	r2,-44(fp)
   147fc:	1880051e 	bne	r3,r2,14814 <altera_avalon_jtag_uart_write+0x1b8>
   14800:	e0bffc17 	ldw	r2,-16(fp)
   14804:	10c00917 	ldw	r3,36(r2)
   14808:	e0bffc17 	ldw	r2,-16(fp)
   1480c:	10800117 	ldw	r2,4(r2)
   14810:	18bff736 	bltu	r3,r2,147f0 <__alt_data_end+0xffff4df0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14814:	e0bffc17 	ldw	r2,-16(fp)
   14818:	10800917 	ldw	r2,36(r2)
   1481c:	1000051e 	bne	r2,zero,14834 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14820:	e0bffe17 	ldw	r2,-8(fp)
   14824:	00bfd016 	blt	zero,r2,14768 <__alt_data_end+0xffff4d68>
   14828:	00000306 	br	14838 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1482c:	0001883a 	nop
   14830:	00000106 	br	14838 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14834:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14838:	e0fffd17 	ldw	r3,-12(fp)
   1483c:	e0bff717 	ldw	r2,-36(fp)
   14840:	18800426 	beq	r3,r2,14854 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14844:	e0fffd17 	ldw	r3,-12(fp)
   14848:	e0bff717 	ldw	r2,-36(fp)
   1484c:	1885c83a 	sub	r2,r3,r2
   14850:	00000606 	br	1486c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14854:	e0bfff17 	ldw	r2,-4(fp)
   14858:	1090000c 	andi	r2,r2,16384
   1485c:	10000226 	beq	r2,zero,14868 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14860:	00bffd44 	movi	r2,-11
   14864:	00000106 	br	1486c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14868:	00bffec4 	movi	r2,-5
}
   1486c:	e037883a 	mov	sp,fp
   14870:	dfc00117 	ldw	ra,4(sp)
   14874:	df000017 	ldw	fp,0(sp)
   14878:	dec00204 	addi	sp,sp,8
   1487c:	f800283a 	ret

00014880 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14880:	defff504 	addi	sp,sp,-44
   14884:	df000a15 	stw	fp,40(sp)
   14888:	df000a04 	addi	fp,sp,40
   1488c:	e13ffc15 	stw	r4,-16(fp)
   14890:	e17ffd15 	stw	r5,-12(fp)
   14894:	e1bffe15 	stw	r6,-8(fp)
   14898:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1489c:	e03ff615 	stw	zero,-40(fp)
   148a0:	d0a4e717 	ldw	r2,-27748(gp)
  
  if (alt_ticks_per_second ())
   148a4:	10003c26 	beq	r2,zero,14998 <alt_alarm_start+0x118>
  {
    if (alarm)
   148a8:	e0bffc17 	ldw	r2,-16(fp)
   148ac:	10003826 	beq	r2,zero,14990 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   148b0:	e0bffc17 	ldw	r2,-16(fp)
   148b4:	e0fffe17 	ldw	r3,-8(fp)
   148b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   148bc:	e0bffc17 	ldw	r2,-16(fp)
   148c0:	e0ffff17 	ldw	r3,-4(fp)
   148c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148c8:	0005303a 	rdctl	r2,status
   148cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148d0:	e0fff917 	ldw	r3,-28(fp)
   148d4:	00bfff84 	movi	r2,-2
   148d8:	1884703a 	and	r2,r3,r2
   148dc:	1001703a 	wrctl	status,r2
  
  return context;
   148e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   148e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   148e8:	d0a4e817 	ldw	r2,-27744(gp)
      
      current_nticks = alt_nticks();
   148ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   148f0:	e0fffd17 	ldw	r3,-12(fp)
   148f4:	e0bff617 	ldw	r2,-40(fp)
   148f8:	1885883a 	add	r2,r3,r2
   148fc:	10c00044 	addi	r3,r2,1
   14900:	e0bffc17 	ldw	r2,-16(fp)
   14904:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14908:	e0bffc17 	ldw	r2,-16(fp)
   1490c:	10c00217 	ldw	r3,8(r2)
   14910:	e0bff617 	ldw	r2,-40(fp)
   14914:	1880042e 	bgeu	r3,r2,14928 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14918:	e0bffc17 	ldw	r2,-16(fp)
   1491c:	00c00044 	movi	r3,1
   14920:	10c00405 	stb	r3,16(r2)
   14924:	00000206 	br	14930 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14928:	e0bffc17 	ldw	r2,-16(fp)
   1492c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14930:	e0bffc17 	ldw	r2,-16(fp)
   14934:	d0e00b04 	addi	r3,gp,-32724
   14938:	e0fffa15 	stw	r3,-24(fp)
   1493c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14940:	e0bffb17 	ldw	r2,-20(fp)
   14944:	e0fffa17 	ldw	r3,-24(fp)
   14948:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1494c:	e0bffa17 	ldw	r2,-24(fp)
   14950:	10c00017 	ldw	r3,0(r2)
   14954:	e0bffb17 	ldw	r2,-20(fp)
   14958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1495c:	e0bffa17 	ldw	r2,-24(fp)
   14960:	10800017 	ldw	r2,0(r2)
   14964:	e0fffb17 	ldw	r3,-20(fp)
   14968:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1496c:	e0bffa17 	ldw	r2,-24(fp)
   14970:	e0fffb17 	ldw	r3,-20(fp)
   14974:	10c00015 	stw	r3,0(r2)
   14978:	e0bff817 	ldw	r2,-32(fp)
   1497c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14980:	e0bff717 	ldw	r2,-36(fp)
   14984:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14988:	0005883a 	mov	r2,zero
   1498c:	00000306 	br	1499c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14990:	00bffa84 	movi	r2,-22
   14994:	00000106 	br	1499c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14998:	00bfde84 	movi	r2,-134
  }
}
   1499c:	e037883a 	mov	sp,fp
   149a0:	df000017 	ldw	fp,0(sp)
   149a4:	dec00104 	addi	sp,sp,4
   149a8:	f800283a 	ret

000149ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   149ac:	defffa04 	addi	sp,sp,-24
   149b0:	dfc00515 	stw	ra,20(sp)
   149b4:	df000415 	stw	fp,16(sp)
   149b8:	df000404 	addi	fp,sp,16
   149bc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   149c0:	00800244 	movi	r2,9
   149c4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   149c8:	014003f4 	movhi	r5,15
   149cc:	29509004 	addi	r5,r5,16960
   149d0:	e13ffd17 	ldw	r4,-12(fp)
   149d4:	00116700 	call	11670 <__mulsi3>
   149d8:	100b883a 	mov	r5,r2
   149dc:	0100bef4 	movhi	r4,763
   149e0:	213c2004 	addi	r4,r4,-3968
   149e4:	0010a200 	call	10a20 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   149e8:	100b883a 	mov	r5,r2
   149ec:	01200034 	movhi	r4,32768
   149f0:	213fffc4 	addi	r4,r4,-1
   149f4:	0010a200 	call	10a20 <__udivsi3>
   149f8:	100b883a 	mov	r5,r2
   149fc:	e13fff17 	ldw	r4,-4(fp)
   14a00:	0010a200 	call	10a20 <__udivsi3>
   14a04:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14a08:	e0bffe17 	ldw	r2,-8(fp)
   14a0c:	10002a26 	beq	r2,zero,14ab8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   14a10:	e03ffc15 	stw	zero,-16(fp)
   14a14:	00001706 	br	14a74 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14a18:	00a00034 	movhi	r2,32768
   14a1c:	10bfffc4 	addi	r2,r2,-1
   14a20:	10bfffc4 	addi	r2,r2,-1
   14a24:	103ffe1e 	bne	r2,zero,14a20 <__alt_data_end+0xffff5020>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   14a28:	014003f4 	movhi	r5,15
   14a2c:	29509004 	addi	r5,r5,16960
   14a30:	e13ffd17 	ldw	r4,-12(fp)
   14a34:	00116700 	call	11670 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14a38:	100b883a 	mov	r5,r2
   14a3c:	0100bef4 	movhi	r4,763
   14a40:	213c2004 	addi	r4,r4,-3968
   14a44:	0010a200 	call	10a20 <__udivsi3>
   14a48:	100b883a 	mov	r5,r2
   14a4c:	01200034 	movhi	r4,32768
   14a50:	213fffc4 	addi	r4,r4,-1
   14a54:	0010a200 	call	10a20 <__udivsi3>
   14a58:	1007883a 	mov	r3,r2
   14a5c:	e0bfff17 	ldw	r2,-4(fp)
   14a60:	10c5c83a 	sub	r2,r2,r3
   14a64:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14a68:	e0bffc17 	ldw	r2,-16(fp)
   14a6c:	10800044 	addi	r2,r2,1
   14a70:	e0bffc15 	stw	r2,-16(fp)
   14a74:	e0fffc17 	ldw	r3,-16(fp)
   14a78:	e0bffe17 	ldw	r2,-8(fp)
   14a7c:	18bfe616 	blt	r3,r2,14a18 <__alt_data_end+0xffff5018>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14a80:	014003f4 	movhi	r5,15
   14a84:	29509004 	addi	r5,r5,16960
   14a88:	e13ffd17 	ldw	r4,-12(fp)
   14a8c:	00116700 	call	11670 <__mulsi3>
   14a90:	100b883a 	mov	r5,r2
   14a94:	0100bef4 	movhi	r4,763
   14a98:	213c2004 	addi	r4,r4,-3968
   14a9c:	0010a200 	call	10a20 <__udivsi3>
   14aa0:	e17fff17 	ldw	r5,-4(fp)
   14aa4:	1009883a 	mov	r4,r2
   14aa8:	00116700 	call	11670 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14aac:	10bfffc4 	addi	r2,r2,-1
   14ab0:	103ffe1e 	bne	r2,zero,14aac <__alt_data_end+0xffff50ac>
   14ab4:	00000d06 	br	14aec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14ab8:	014003f4 	movhi	r5,15
   14abc:	29509004 	addi	r5,r5,16960
   14ac0:	e13ffd17 	ldw	r4,-12(fp)
   14ac4:	00116700 	call	11670 <__mulsi3>
   14ac8:	100b883a 	mov	r5,r2
   14acc:	0100bef4 	movhi	r4,763
   14ad0:	213c2004 	addi	r4,r4,-3968
   14ad4:	0010a200 	call	10a20 <__udivsi3>
   14ad8:	e17fff17 	ldw	r5,-4(fp)
   14adc:	1009883a 	mov	r4,r2
   14ae0:	00116700 	call	11670 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14ae4:	10bfffc4 	addi	r2,r2,-1
   14ae8:	00bffe16 	blt	zero,r2,14ae4 <__alt_data_end+0xffff50e4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   14aec:	0005883a 	mov	r2,zero
}
   14af0:	e037883a 	mov	sp,fp
   14af4:	dfc00117 	ldw	ra,4(sp)
   14af8:	df000017 	ldw	fp,0(sp)
   14afc:	dec00204 	addi	sp,sp,8
   14b00:	f800283a 	ret

00014b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14b04:	defffe04 	addi	sp,sp,-8
   14b08:	dfc00115 	stw	ra,4(sp)
   14b0c:	df000015 	stw	fp,0(sp)
   14b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b14:	d0a00917 	ldw	r2,-32732(gp)
   14b18:	10000326 	beq	r2,zero,14b28 <alt_get_errno+0x24>
   14b1c:	d0a00917 	ldw	r2,-32732(gp)
   14b20:	103ee83a 	callr	r2
   14b24:	00000106 	br	14b2c <alt_get_errno+0x28>
   14b28:	d0a4e204 	addi	r2,gp,-27768
}
   14b2c:	e037883a 	mov	sp,fp
   14b30:	dfc00117 	ldw	ra,4(sp)
   14b34:	df000017 	ldw	fp,0(sp)
   14b38:	dec00204 	addi	sp,sp,8
   14b3c:	f800283a 	ret

00014b40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   14b40:	defffb04 	addi	sp,sp,-20
   14b44:	dfc00415 	stw	ra,16(sp)
   14b48:	df000315 	stw	fp,12(sp)
   14b4c:	df000304 	addi	fp,sp,12
   14b50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14b54:	e0bfff17 	ldw	r2,-4(fp)
   14b58:	10000816 	blt	r2,zero,14b7c <close+0x3c>
   14b5c:	01400304 	movi	r5,12
   14b60:	e13fff17 	ldw	r4,-4(fp)
   14b64:	00116700 	call	11670 <__mulsi3>
   14b68:	1007883a 	mov	r3,r2
   14b6c:	00800074 	movhi	r2,1
   14b70:	109d6504 	addi	r2,r2,30100
   14b74:	1885883a 	add	r2,r3,r2
   14b78:	00000106 	br	14b80 <close+0x40>
   14b7c:	0005883a 	mov	r2,zero
   14b80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   14b84:	e0bffd17 	ldw	r2,-12(fp)
   14b88:	10001926 	beq	r2,zero,14bf0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14b8c:	e0bffd17 	ldw	r2,-12(fp)
   14b90:	10800017 	ldw	r2,0(r2)
   14b94:	10800417 	ldw	r2,16(r2)
   14b98:	10000626 	beq	r2,zero,14bb4 <close+0x74>
   14b9c:	e0bffd17 	ldw	r2,-12(fp)
   14ba0:	10800017 	ldw	r2,0(r2)
   14ba4:	10800417 	ldw	r2,16(r2)
   14ba8:	e13ffd17 	ldw	r4,-12(fp)
   14bac:	103ee83a 	callr	r2
   14bb0:	00000106 	br	14bb8 <close+0x78>
   14bb4:	0005883a 	mov	r2,zero
   14bb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14bbc:	e13fff17 	ldw	r4,-4(fp)
   14bc0:	00157a00 	call	157a0 <alt_release_fd>
    if (rval < 0)
   14bc4:	e0bffe17 	ldw	r2,-8(fp)
   14bc8:	1000070e 	bge	r2,zero,14be8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   14bcc:	0014b040 	call	14b04 <alt_get_errno>
   14bd0:	1007883a 	mov	r3,r2
   14bd4:	e0bffe17 	ldw	r2,-8(fp)
   14bd8:	0085c83a 	sub	r2,zero,r2
   14bdc:	18800015 	stw	r2,0(r3)
      return -1;
   14be0:	00bfffc4 	movi	r2,-1
   14be4:	00000706 	br	14c04 <close+0xc4>
    }
    return 0;
   14be8:	0005883a 	mov	r2,zero
   14bec:	00000506 	br	14c04 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14bf0:	0014b040 	call	14b04 <alt_get_errno>
   14bf4:	1007883a 	mov	r3,r2
   14bf8:	00801444 	movi	r2,81
   14bfc:	18800015 	stw	r2,0(r3)
    return -1;
   14c00:	00bfffc4 	movi	r2,-1
  }
}
   14c04:	e037883a 	mov	sp,fp
   14c08:	dfc00117 	ldw	ra,4(sp)
   14c0c:	df000017 	ldw	fp,0(sp)
   14c10:	dec00204 	addi	sp,sp,8
   14c14:	f800283a 	ret

00014c18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14c18:	deffff04 	addi	sp,sp,-4
   14c1c:	df000015 	stw	fp,0(sp)
   14c20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14c24:	0001883a 	nop
   14c28:	e037883a 	mov	sp,fp
   14c2c:	df000017 	ldw	fp,0(sp)
   14c30:	dec00104 	addi	sp,sp,4
   14c34:	f800283a 	ret

00014c38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   14c38:	defffc04 	addi	sp,sp,-16
   14c3c:	df000315 	stw	fp,12(sp)
   14c40:	df000304 	addi	fp,sp,12
   14c44:	e13ffd15 	stw	r4,-12(fp)
   14c48:	e17ffe15 	stw	r5,-8(fp)
   14c4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   14c50:	e0bfff17 	ldw	r2,-4(fp)
}
   14c54:	e037883a 	mov	sp,fp
   14c58:	df000017 	ldw	fp,0(sp)
   14c5c:	dec00104 	addi	sp,sp,4
   14c60:	f800283a 	ret

00014c64 <alt_get_errno>:
   14c64:	defffe04 	addi	sp,sp,-8
   14c68:	dfc00115 	stw	ra,4(sp)
   14c6c:	df000015 	stw	fp,0(sp)
   14c70:	d839883a 	mov	fp,sp
   14c74:	d0a00917 	ldw	r2,-32732(gp)
   14c78:	10000326 	beq	r2,zero,14c88 <alt_get_errno+0x24>
   14c7c:	d0a00917 	ldw	r2,-32732(gp)
   14c80:	103ee83a 	callr	r2
   14c84:	00000106 	br	14c8c <alt_get_errno+0x28>
   14c88:	d0a4e204 	addi	r2,gp,-27768
   14c8c:	e037883a 	mov	sp,fp
   14c90:	dfc00117 	ldw	ra,4(sp)
   14c94:	df000017 	ldw	fp,0(sp)
   14c98:	dec00204 	addi	sp,sp,8
   14c9c:	f800283a 	ret

00014ca0 <alt_dev_llist_insert>:
   14ca0:	defffa04 	addi	sp,sp,-24
   14ca4:	dfc00515 	stw	ra,20(sp)
   14ca8:	df000415 	stw	fp,16(sp)
   14cac:	df000404 	addi	fp,sp,16
   14cb0:	e13ffe15 	stw	r4,-8(fp)
   14cb4:	e17fff15 	stw	r5,-4(fp)
   14cb8:	e0bffe17 	ldw	r2,-8(fp)
   14cbc:	10000326 	beq	r2,zero,14ccc <alt_dev_llist_insert+0x2c>
   14cc0:	e0bffe17 	ldw	r2,-8(fp)
   14cc4:	10800217 	ldw	r2,8(r2)
   14cc8:	1000061e 	bne	r2,zero,14ce4 <alt_dev_llist_insert+0x44>
   14ccc:	0014c640 	call	14c64 <alt_get_errno>
   14cd0:	1007883a 	mov	r3,r2
   14cd4:	00800584 	movi	r2,22
   14cd8:	18800015 	stw	r2,0(r3)
   14cdc:	00bffa84 	movi	r2,-22
   14ce0:	00001306 	br	14d30 <alt_dev_llist_insert+0x90>
   14ce4:	e0bffe17 	ldw	r2,-8(fp)
   14ce8:	e0ffff17 	ldw	r3,-4(fp)
   14cec:	e0fffc15 	stw	r3,-16(fp)
   14cf0:	e0bffd15 	stw	r2,-12(fp)
   14cf4:	e0bffd17 	ldw	r2,-12(fp)
   14cf8:	e0fffc17 	ldw	r3,-16(fp)
   14cfc:	10c00115 	stw	r3,4(r2)
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	10c00017 	ldw	r3,0(r2)
   14d08:	e0bffd17 	ldw	r2,-12(fp)
   14d0c:	10c00015 	stw	r3,0(r2)
   14d10:	e0bffc17 	ldw	r2,-16(fp)
   14d14:	10800017 	ldw	r2,0(r2)
   14d18:	e0fffd17 	ldw	r3,-12(fp)
   14d1c:	10c00115 	stw	r3,4(r2)
   14d20:	e0bffc17 	ldw	r2,-16(fp)
   14d24:	e0fffd17 	ldw	r3,-12(fp)
   14d28:	10c00015 	stw	r3,0(r2)
   14d2c:	0005883a 	mov	r2,zero
   14d30:	e037883a 	mov	sp,fp
   14d34:	dfc00117 	ldw	ra,4(sp)
   14d38:	df000017 	ldw	fp,0(sp)
   14d3c:	dec00204 	addi	sp,sp,8
   14d40:	f800283a 	ret

00014d44 <_do_ctors>:
   14d44:	defffd04 	addi	sp,sp,-12
   14d48:	dfc00215 	stw	ra,8(sp)
   14d4c:	df000115 	stw	fp,4(sp)
   14d50:	df000104 	addi	fp,sp,4
   14d54:	00800074 	movhi	r2,1
   14d58:	10982904 	addi	r2,r2,24740
   14d5c:	e0bfff15 	stw	r2,-4(fp)
   14d60:	00000606 	br	14d7c <_do_ctors+0x38>
   14d64:	e0bfff17 	ldw	r2,-4(fp)
   14d68:	10800017 	ldw	r2,0(r2)
   14d6c:	103ee83a 	callr	r2
   14d70:	e0bfff17 	ldw	r2,-4(fp)
   14d74:	10bfff04 	addi	r2,r2,-4
   14d78:	e0bfff15 	stw	r2,-4(fp)
   14d7c:	e0ffff17 	ldw	r3,-4(fp)
   14d80:	00800074 	movhi	r2,1
   14d84:	10982a04 	addi	r2,r2,24744
   14d88:	18bff62e 	bgeu	r3,r2,14d64 <__alt_data_end+0xffff5364>
   14d8c:	0001883a 	nop
   14d90:	e037883a 	mov	sp,fp
   14d94:	dfc00117 	ldw	ra,4(sp)
   14d98:	df000017 	ldw	fp,0(sp)
   14d9c:	dec00204 	addi	sp,sp,8
   14da0:	f800283a 	ret

00014da4 <_do_dtors>:
   14da4:	defffd04 	addi	sp,sp,-12
   14da8:	dfc00215 	stw	ra,8(sp)
   14dac:	df000115 	stw	fp,4(sp)
   14db0:	df000104 	addi	fp,sp,4
   14db4:	00800074 	movhi	r2,1
   14db8:	10982904 	addi	r2,r2,24740
   14dbc:	e0bfff15 	stw	r2,-4(fp)
   14dc0:	00000606 	br	14ddc <_do_dtors+0x38>
   14dc4:	e0bfff17 	ldw	r2,-4(fp)
   14dc8:	10800017 	ldw	r2,0(r2)
   14dcc:	103ee83a 	callr	r2
   14dd0:	e0bfff17 	ldw	r2,-4(fp)
   14dd4:	10bfff04 	addi	r2,r2,-4
   14dd8:	e0bfff15 	stw	r2,-4(fp)
   14ddc:	e0ffff17 	ldw	r3,-4(fp)
   14de0:	00800074 	movhi	r2,1
   14de4:	10982a04 	addi	r2,r2,24744
   14de8:	18bff62e 	bgeu	r3,r2,14dc4 <__alt_data_end+0xffff53c4>
   14dec:	0001883a 	nop
   14df0:	e037883a 	mov	sp,fp
   14df4:	dfc00117 	ldw	ra,4(sp)
   14df8:	df000017 	ldw	fp,0(sp)
   14dfc:	dec00204 	addi	sp,sp,8
   14e00:	f800283a 	ret

00014e04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14e04:	defffa04 	addi	sp,sp,-24
   14e08:	dfc00515 	stw	ra,20(sp)
   14e0c:	df000415 	stw	fp,16(sp)
   14e10:	df000404 	addi	fp,sp,16
   14e14:	e13ffe15 	stw	r4,-8(fp)
   14e18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14e1c:	e0bfff17 	ldw	r2,-4(fp)
   14e20:	10800017 	ldw	r2,0(r2)
   14e24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14e28:	e13ffe17 	ldw	r4,-8(fp)
   14e2c:	00117b40 	call	117b4 <strlen>
   14e30:	10800044 	addi	r2,r2,1
   14e34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14e38:	00000d06 	br	14e70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14e3c:	e0bffc17 	ldw	r2,-16(fp)
   14e40:	10800217 	ldw	r2,8(r2)
   14e44:	e0fffd17 	ldw	r3,-12(fp)
   14e48:	180d883a 	mov	r6,r3
   14e4c:	e17ffe17 	ldw	r5,-8(fp)
   14e50:	1009883a 	mov	r4,r2
   14e54:	0015c880 	call	15c88 <memcmp>
   14e58:	1000021e 	bne	r2,zero,14e64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14e5c:	e0bffc17 	ldw	r2,-16(fp)
   14e60:	00000706 	br	14e80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14e64:	e0bffc17 	ldw	r2,-16(fp)
   14e68:	10800017 	ldw	r2,0(r2)
   14e6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14e70:	e0fffc17 	ldw	r3,-16(fp)
   14e74:	e0bfff17 	ldw	r2,-4(fp)
   14e78:	18bff01e 	bne	r3,r2,14e3c <__alt_data_end+0xffff543c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14e7c:	0005883a 	mov	r2,zero
}
   14e80:	e037883a 	mov	sp,fp
   14e84:	dfc00117 	ldw	ra,4(sp)
   14e88:	df000017 	ldw	fp,0(sp)
   14e8c:	dec00204 	addi	sp,sp,8
   14e90:	f800283a 	ret

00014e94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14e94:	deffff04 	addi	sp,sp,-4
   14e98:	df000015 	stw	fp,0(sp)
   14e9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14ea0:	0001883a 	nop
   14ea4:	e037883a 	mov	sp,fp
   14ea8:	df000017 	ldw	fp,0(sp)
   14eac:	dec00104 	addi	sp,sp,4
   14eb0:	f800283a 	ret

00014eb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14eb4:	defff904 	addi	sp,sp,-28
   14eb8:	dfc00615 	stw	ra,24(sp)
   14ebc:	df000515 	stw	fp,20(sp)
   14ec0:	df000504 	addi	fp,sp,20
   14ec4:	e13ffc15 	stw	r4,-16(fp)
   14ec8:	e17ffd15 	stw	r5,-12(fp)
   14ecc:	e1bffe15 	stw	r6,-8(fp)
   14ed0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14ed4:	e0800217 	ldw	r2,8(fp)
   14ed8:	d8800015 	stw	r2,0(sp)
   14edc:	e1ffff17 	ldw	r7,-4(fp)
   14ee0:	e1bffe17 	ldw	r6,-8(fp)
   14ee4:	e17ffd17 	ldw	r5,-12(fp)
   14ee8:	e13ffc17 	ldw	r4,-16(fp)
   14eec:	00150640 	call	15064 <alt_iic_isr_register>
}  
   14ef0:	e037883a 	mov	sp,fp
   14ef4:	dfc00117 	ldw	ra,4(sp)
   14ef8:	df000017 	ldw	fp,0(sp)
   14efc:	dec00204 	addi	sp,sp,8
   14f00:	f800283a 	ret

00014f04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14f04:	defff904 	addi	sp,sp,-28
   14f08:	df000615 	stw	fp,24(sp)
   14f0c:	df000604 	addi	fp,sp,24
   14f10:	e13ffe15 	stw	r4,-8(fp)
   14f14:	e17fff15 	stw	r5,-4(fp)
   14f18:	e0bfff17 	ldw	r2,-4(fp)
   14f1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f20:	0005303a 	rdctl	r2,status
   14f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f28:	e0fffb17 	ldw	r3,-20(fp)
   14f2c:	00bfff84 	movi	r2,-2
   14f30:	1884703a 	and	r2,r3,r2
   14f34:	1001703a 	wrctl	status,r2
  
  return context;
   14f38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14f3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14f40:	00c00044 	movi	r3,1
   14f44:	e0bffa17 	ldw	r2,-24(fp)
   14f48:	1884983a 	sll	r2,r3,r2
   14f4c:	1007883a 	mov	r3,r2
   14f50:	d0a4e617 	ldw	r2,-27752(gp)
   14f54:	1884b03a 	or	r2,r3,r2
   14f58:	d0a4e615 	stw	r2,-27752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14f5c:	d0a4e617 	ldw	r2,-27752(gp)
   14f60:	100170fa 	wrctl	ienable,r2
   14f64:	e0bffc17 	ldw	r2,-16(fp)
   14f68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f6c:	e0bffd17 	ldw	r2,-12(fp)
   14f70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14f74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14f78:	0001883a 	nop
}
   14f7c:	e037883a 	mov	sp,fp
   14f80:	df000017 	ldw	fp,0(sp)
   14f84:	dec00104 	addi	sp,sp,4
   14f88:	f800283a 	ret

00014f8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14f8c:	defff904 	addi	sp,sp,-28
   14f90:	df000615 	stw	fp,24(sp)
   14f94:	df000604 	addi	fp,sp,24
   14f98:	e13ffe15 	stw	r4,-8(fp)
   14f9c:	e17fff15 	stw	r5,-4(fp)
   14fa0:	e0bfff17 	ldw	r2,-4(fp)
   14fa4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fa8:	0005303a 	rdctl	r2,status
   14fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fb0:	e0fffb17 	ldw	r3,-20(fp)
   14fb4:	00bfff84 	movi	r2,-2
   14fb8:	1884703a 	and	r2,r3,r2
   14fbc:	1001703a 	wrctl	status,r2
  
  return context;
   14fc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14fc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14fc8:	00c00044 	movi	r3,1
   14fcc:	e0bffa17 	ldw	r2,-24(fp)
   14fd0:	1884983a 	sll	r2,r3,r2
   14fd4:	0084303a 	nor	r2,zero,r2
   14fd8:	1007883a 	mov	r3,r2
   14fdc:	d0a4e617 	ldw	r2,-27752(gp)
   14fe0:	1884703a 	and	r2,r3,r2
   14fe4:	d0a4e615 	stw	r2,-27752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14fe8:	d0a4e617 	ldw	r2,-27752(gp)
   14fec:	100170fa 	wrctl	ienable,r2
   14ff0:	e0bffc17 	ldw	r2,-16(fp)
   14ff4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15000:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   15004:	0001883a 	nop
}
   15008:	e037883a 	mov	sp,fp
   1500c:	df000017 	ldw	fp,0(sp)
   15010:	dec00104 	addi	sp,sp,4
   15014:	f800283a 	ret

00015018 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15018:	defffc04 	addi	sp,sp,-16
   1501c:	df000315 	stw	fp,12(sp)
   15020:	df000304 	addi	fp,sp,12
   15024:	e13ffe15 	stw	r4,-8(fp)
   15028:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1502c:	000530fa 	rdctl	r2,ienable
   15030:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15034:	00c00044 	movi	r3,1
   15038:	e0bfff17 	ldw	r2,-4(fp)
   1503c:	1884983a 	sll	r2,r3,r2
   15040:	1007883a 	mov	r3,r2
   15044:	e0bffd17 	ldw	r2,-12(fp)
   15048:	1884703a 	and	r2,r3,r2
   1504c:	1004c03a 	cmpne	r2,r2,zero
   15050:	10803fcc 	andi	r2,r2,255
}
   15054:	e037883a 	mov	sp,fp
   15058:	df000017 	ldw	fp,0(sp)
   1505c:	dec00104 	addi	sp,sp,4
   15060:	f800283a 	ret

00015064 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15064:	defff504 	addi	sp,sp,-44
   15068:	dfc00a15 	stw	ra,40(sp)
   1506c:	df000915 	stw	fp,36(sp)
   15070:	df000904 	addi	fp,sp,36
   15074:	e13ffc15 	stw	r4,-16(fp)
   15078:	e17ffd15 	stw	r5,-12(fp)
   1507c:	e1bffe15 	stw	r6,-8(fp)
   15080:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15084:	00bffa84 	movi	r2,-22
   15088:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1508c:	e0bffd17 	ldw	r2,-12(fp)
   15090:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15094:	e0bff817 	ldw	r2,-32(fp)
   15098:	10800808 	cmpgei	r2,r2,32
   1509c:	1000271e 	bne	r2,zero,1513c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150a0:	0005303a 	rdctl	r2,status
   150a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150a8:	e0fffb17 	ldw	r3,-20(fp)
   150ac:	00bfff84 	movi	r2,-2
   150b0:	1884703a 	and	r2,r3,r2
   150b4:	1001703a 	wrctl	status,r2
  
  return context;
   150b8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   150bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   150c0:	008000b4 	movhi	r2,2
   150c4:	10a2af04 	addi	r2,r2,-30020
   150c8:	e0fff817 	ldw	r3,-32(fp)
   150cc:	180690fa 	slli	r3,r3,3
   150d0:	10c5883a 	add	r2,r2,r3
   150d4:	e0fffe17 	ldw	r3,-8(fp)
   150d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   150dc:	008000b4 	movhi	r2,2
   150e0:	10a2af04 	addi	r2,r2,-30020
   150e4:	e0fff817 	ldw	r3,-32(fp)
   150e8:	180690fa 	slli	r3,r3,3
   150ec:	10c5883a 	add	r2,r2,r3
   150f0:	10800104 	addi	r2,r2,4
   150f4:	e0ffff17 	ldw	r3,-4(fp)
   150f8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   150fc:	e0bffe17 	ldw	r2,-8(fp)
   15100:	10000526 	beq	r2,zero,15118 <alt_iic_isr_register+0xb4>
   15104:	e0bff817 	ldw	r2,-32(fp)
   15108:	100b883a 	mov	r5,r2
   1510c:	e13ffc17 	ldw	r4,-16(fp)
   15110:	0014f040 	call	14f04 <alt_ic_irq_enable>
   15114:	00000406 	br	15128 <alt_iic_isr_register+0xc4>
   15118:	e0bff817 	ldw	r2,-32(fp)
   1511c:	100b883a 	mov	r5,r2
   15120:	e13ffc17 	ldw	r4,-16(fp)
   15124:	0014f8c0 	call	14f8c <alt_ic_irq_disable>
   15128:	e0bff715 	stw	r2,-36(fp)
   1512c:	e0bffa17 	ldw	r2,-24(fp)
   15130:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15134:	e0bff917 	ldw	r2,-28(fp)
   15138:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1513c:	e0bff717 	ldw	r2,-36(fp)
}
   15140:	e037883a 	mov	sp,fp
   15144:	dfc00117 	ldw	ra,4(sp)
   15148:	df000017 	ldw	fp,0(sp)
   1514c:	dec00204 	addi	sp,sp,8
   15150:	f800283a 	ret

00015154 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15154:	defff804 	addi	sp,sp,-32
   15158:	dfc00715 	stw	ra,28(sp)
   1515c:	df000615 	stw	fp,24(sp)
   15160:	dc000515 	stw	r16,20(sp)
   15164:	df000604 	addi	fp,sp,24
   15168:	e13ffb15 	stw	r4,-20(fp)
   1516c:	e17ffc15 	stw	r5,-16(fp)
   15170:	e1bffd15 	stw	r6,-12(fp)
   15174:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   15178:	e1bffe17 	ldw	r6,-8(fp)
   1517c:	e17ffd17 	ldw	r5,-12(fp)
   15180:	e13ffc17 	ldw	r4,-16(fp)
   15184:	00153dc0 	call	153dc <open>
   15188:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1518c:	e0bffa17 	ldw	r2,-24(fp)
   15190:	10002216 	blt	r2,zero,1521c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   15194:	04000074 	movhi	r16,1
   15198:	841d6504 	addi	r16,r16,30100
   1519c:	e0bffa17 	ldw	r2,-24(fp)
   151a0:	01400304 	movi	r5,12
   151a4:	1009883a 	mov	r4,r2
   151a8:	00116700 	call	11670 <__mulsi3>
   151ac:	8085883a 	add	r2,r16,r2
   151b0:	10c00017 	ldw	r3,0(r2)
   151b4:	e0bffb17 	ldw	r2,-20(fp)
   151b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   151bc:	04000074 	movhi	r16,1
   151c0:	841d6504 	addi	r16,r16,30100
   151c4:	e0bffa17 	ldw	r2,-24(fp)
   151c8:	01400304 	movi	r5,12
   151cc:	1009883a 	mov	r4,r2
   151d0:	00116700 	call	11670 <__mulsi3>
   151d4:	8085883a 	add	r2,r16,r2
   151d8:	10800104 	addi	r2,r2,4
   151dc:	10c00017 	ldw	r3,0(r2)
   151e0:	e0bffb17 	ldw	r2,-20(fp)
   151e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   151e8:	04000074 	movhi	r16,1
   151ec:	841d6504 	addi	r16,r16,30100
   151f0:	e0bffa17 	ldw	r2,-24(fp)
   151f4:	01400304 	movi	r5,12
   151f8:	1009883a 	mov	r4,r2
   151fc:	00116700 	call	11670 <__mulsi3>
   15200:	8085883a 	add	r2,r16,r2
   15204:	10800204 	addi	r2,r2,8
   15208:	10c00017 	ldw	r3,0(r2)
   1520c:	e0bffb17 	ldw	r2,-20(fp)
   15210:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15214:	e13ffa17 	ldw	r4,-24(fp)
   15218:	00157a00 	call	157a0 <alt_release_fd>
  }
} 
   1521c:	0001883a 	nop
   15220:	e6ffff04 	addi	sp,fp,-4
   15224:	dfc00217 	ldw	ra,8(sp)
   15228:	df000117 	ldw	fp,4(sp)
   1522c:	dc000017 	ldw	r16,0(sp)
   15230:	dec00304 	addi	sp,sp,12
   15234:	f800283a 	ret

00015238 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15238:	defffb04 	addi	sp,sp,-20
   1523c:	dfc00415 	stw	ra,16(sp)
   15240:	df000315 	stw	fp,12(sp)
   15244:	df000304 	addi	fp,sp,12
   15248:	e13ffd15 	stw	r4,-12(fp)
   1524c:	e17ffe15 	stw	r5,-8(fp)
   15250:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15254:	01c07fc4 	movi	r7,511
   15258:	01800044 	movi	r6,1
   1525c:	e17ffd17 	ldw	r5,-12(fp)
   15260:	01000074 	movhi	r4,1
   15264:	211d6804 	addi	r4,r4,30112
   15268:	00151540 	call	15154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1526c:	01c07fc4 	movi	r7,511
   15270:	000d883a 	mov	r6,zero
   15274:	e17ffe17 	ldw	r5,-8(fp)
   15278:	01000074 	movhi	r4,1
   1527c:	211d6504 	addi	r4,r4,30100
   15280:	00151540 	call	15154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15284:	01c07fc4 	movi	r7,511
   15288:	01800044 	movi	r6,1
   1528c:	e17fff17 	ldw	r5,-4(fp)
   15290:	01000074 	movhi	r4,1
   15294:	211d6b04 	addi	r4,r4,30124
   15298:	00151540 	call	15154 <alt_open_fd>
}  
   1529c:	0001883a 	nop
   152a0:	e037883a 	mov	sp,fp
   152a4:	dfc00117 	ldw	ra,4(sp)
   152a8:	df000017 	ldw	fp,0(sp)
   152ac:	dec00204 	addi	sp,sp,8
   152b0:	f800283a 	ret

000152b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   152b4:	defffe04 	addi	sp,sp,-8
   152b8:	dfc00115 	stw	ra,4(sp)
   152bc:	df000015 	stw	fp,0(sp)
   152c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   152c4:	d0a00917 	ldw	r2,-32732(gp)
   152c8:	10000326 	beq	r2,zero,152d8 <alt_get_errno+0x24>
   152cc:	d0a00917 	ldw	r2,-32732(gp)
   152d0:	103ee83a 	callr	r2
   152d4:	00000106 	br	152dc <alt_get_errno+0x28>
   152d8:	d0a4e204 	addi	r2,gp,-27768
}
   152dc:	e037883a 	mov	sp,fp
   152e0:	dfc00117 	ldw	ra,4(sp)
   152e4:	df000017 	ldw	fp,0(sp)
   152e8:	dec00204 	addi	sp,sp,8
   152ec:	f800283a 	ret

000152f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   152f0:	defffb04 	addi	sp,sp,-20
   152f4:	dfc00415 	stw	ra,16(sp)
   152f8:	df000315 	stw	fp,12(sp)
   152fc:	dc000215 	stw	r16,8(sp)
   15300:	df000304 	addi	fp,sp,12
   15304:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15308:	e0bffe17 	ldw	r2,-8(fp)
   1530c:	10800217 	ldw	r2,8(r2)
   15310:	10d00034 	orhi	r3,r2,16384
   15314:	e0bffe17 	ldw	r2,-8(fp)
   15318:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1531c:	e03ffd15 	stw	zero,-12(fp)
   15320:	00002306 	br	153b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15324:	04000074 	movhi	r16,1
   15328:	841d6504 	addi	r16,r16,30100
   1532c:	e0bffd17 	ldw	r2,-12(fp)
   15330:	01400304 	movi	r5,12
   15334:	1009883a 	mov	r4,r2
   15338:	00116700 	call	11670 <__mulsi3>
   1533c:	8085883a 	add	r2,r16,r2
   15340:	10c00017 	ldw	r3,0(r2)
   15344:	e0bffe17 	ldw	r2,-8(fp)
   15348:	10800017 	ldw	r2,0(r2)
   1534c:	1880151e 	bne	r3,r2,153a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15350:	04000074 	movhi	r16,1
   15354:	841d6504 	addi	r16,r16,30100
   15358:	e0bffd17 	ldw	r2,-12(fp)
   1535c:	01400304 	movi	r5,12
   15360:	1009883a 	mov	r4,r2
   15364:	00116700 	call	11670 <__mulsi3>
   15368:	8085883a 	add	r2,r16,r2
   1536c:	10800204 	addi	r2,r2,8
   15370:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15374:	10000b0e 	bge	r2,zero,153a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15378:	01400304 	movi	r5,12
   1537c:	e13ffd17 	ldw	r4,-12(fp)
   15380:	00116700 	call	11670 <__mulsi3>
   15384:	1007883a 	mov	r3,r2
   15388:	00800074 	movhi	r2,1
   1538c:	109d6504 	addi	r2,r2,30100
   15390:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15394:	e0bffe17 	ldw	r2,-8(fp)
   15398:	18800226 	beq	r3,r2,153a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1539c:	00bffcc4 	movi	r2,-13
   153a0:	00000806 	br	153c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   153a4:	e0bffd17 	ldw	r2,-12(fp)
   153a8:	10800044 	addi	r2,r2,1
   153ac:	e0bffd15 	stw	r2,-12(fp)
   153b0:	d0a00817 	ldw	r2,-32736(gp)
   153b4:	1007883a 	mov	r3,r2
   153b8:	e0bffd17 	ldw	r2,-12(fp)
   153bc:	18bfd92e 	bgeu	r3,r2,15324 <__alt_data_end+0xffff5924>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   153c0:	0005883a 	mov	r2,zero
}
   153c4:	e6ffff04 	addi	sp,fp,-4
   153c8:	dfc00217 	ldw	ra,8(sp)
   153cc:	df000117 	ldw	fp,4(sp)
   153d0:	dc000017 	ldw	r16,0(sp)
   153d4:	dec00304 	addi	sp,sp,12
   153d8:	f800283a 	ret

000153dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   153dc:	defff604 	addi	sp,sp,-40
   153e0:	dfc00915 	stw	ra,36(sp)
   153e4:	df000815 	stw	fp,32(sp)
   153e8:	df000804 	addi	fp,sp,32
   153ec:	e13ffd15 	stw	r4,-12(fp)
   153f0:	e17ffe15 	stw	r5,-8(fp)
   153f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   153f8:	00bfffc4 	movi	r2,-1
   153fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15400:	00bffb44 	movi	r2,-19
   15404:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15408:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1540c:	d1600604 	addi	r5,gp,-32744
   15410:	e13ffd17 	ldw	r4,-12(fp)
   15414:	0014e040 	call	14e04 <alt_find_dev>
   15418:	e0bff815 	stw	r2,-32(fp)
   1541c:	e0bff817 	ldw	r2,-32(fp)
   15420:	1000051e 	bne	r2,zero,15438 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15424:	e13ffd17 	ldw	r4,-12(fp)
   15428:	00159ec0 	call	159ec <alt_find_file>
   1542c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15430:	00800044 	movi	r2,1
   15434:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15438:	e0bff817 	ldw	r2,-32(fp)
   1543c:	10002b26 	beq	r2,zero,154ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15440:	e13ff817 	ldw	r4,-32(fp)
   15444:	0015af40 	call	15af4 <alt_get_fd>
   15448:	e0bff915 	stw	r2,-28(fp)
   1544c:	e0bff917 	ldw	r2,-28(fp)
   15450:	1000030e 	bge	r2,zero,15460 <open+0x84>
    {
      status = index;
   15454:	e0bff917 	ldw	r2,-28(fp)
   15458:	e0bffa15 	stw	r2,-24(fp)
   1545c:	00002506 	br	154f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15460:	01400304 	movi	r5,12
   15464:	e13ff917 	ldw	r4,-28(fp)
   15468:	00116700 	call	11670 <__mulsi3>
   1546c:	1007883a 	mov	r3,r2
   15470:	00800074 	movhi	r2,1
   15474:	109d6504 	addi	r2,r2,30100
   15478:	1885883a 	add	r2,r3,r2
   1547c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15480:	e0fffe17 	ldw	r3,-8(fp)
   15484:	00900034 	movhi	r2,16384
   15488:	10bfffc4 	addi	r2,r2,-1
   1548c:	1886703a 	and	r3,r3,r2
   15490:	e0bffc17 	ldw	r2,-16(fp)
   15494:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15498:	e0bffb17 	ldw	r2,-20(fp)
   1549c:	1000051e 	bne	r2,zero,154b4 <open+0xd8>
   154a0:	e13ffc17 	ldw	r4,-16(fp)
   154a4:	00152f00 	call	152f0 <alt_file_locked>
   154a8:	e0bffa15 	stw	r2,-24(fp)
   154ac:	e0bffa17 	ldw	r2,-24(fp)
   154b0:	10001016 	blt	r2,zero,154f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   154b4:	e0bff817 	ldw	r2,-32(fp)
   154b8:	10800317 	ldw	r2,12(r2)
   154bc:	10000826 	beq	r2,zero,154e0 <open+0x104>
   154c0:	e0bff817 	ldw	r2,-32(fp)
   154c4:	10800317 	ldw	r2,12(r2)
   154c8:	e1ffff17 	ldw	r7,-4(fp)
   154cc:	e1bffe17 	ldw	r6,-8(fp)
   154d0:	e17ffd17 	ldw	r5,-12(fp)
   154d4:	e13ffc17 	ldw	r4,-16(fp)
   154d8:	103ee83a 	callr	r2
   154dc:	00000106 	br	154e4 <open+0x108>
   154e0:	0005883a 	mov	r2,zero
   154e4:	e0bffa15 	stw	r2,-24(fp)
   154e8:	00000206 	br	154f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   154ec:	00bffb44 	movi	r2,-19
   154f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   154f4:	e0bffa17 	ldw	r2,-24(fp)
   154f8:	1000090e 	bge	r2,zero,15520 <open+0x144>
  {
    alt_release_fd (index);  
   154fc:	e13ff917 	ldw	r4,-28(fp)
   15500:	00157a00 	call	157a0 <alt_release_fd>
    ALT_ERRNO = -status;
   15504:	00152b40 	call	152b4 <alt_get_errno>
   15508:	1007883a 	mov	r3,r2
   1550c:	e0bffa17 	ldw	r2,-24(fp)
   15510:	0085c83a 	sub	r2,zero,r2
   15514:	18800015 	stw	r2,0(r3)
    return -1;
   15518:	00bfffc4 	movi	r2,-1
   1551c:	00000106 	br	15524 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15520:	e0bff917 	ldw	r2,-28(fp)
}
   15524:	e037883a 	mov	sp,fp
   15528:	dfc00117 	ldw	ra,4(sp)
   1552c:	df000017 	ldw	fp,0(sp)
   15530:	dec00204 	addi	sp,sp,8
   15534:	f800283a 	ret

00015538 <alt_printf>:
   15538:	defff204 	addi	sp,sp,-56
   1553c:	dfc00a15 	stw	ra,40(sp)
   15540:	df000915 	stw	fp,36(sp)
   15544:	df000904 	addi	fp,sp,36
   15548:	e13fff15 	stw	r4,-4(fp)
   1554c:	e1400215 	stw	r5,8(fp)
   15550:	e1800315 	stw	r6,12(fp)
   15554:	e1c00415 	stw	r7,16(fp)
   15558:	e0800204 	addi	r2,fp,8
   1555c:	e0bffe15 	stw	r2,-8(fp)
   15560:	e0bfff17 	ldw	r2,-4(fp)
   15564:	e0bff715 	stw	r2,-36(fp)
   15568:	00006f06 	br	15728 <alt_printf+0x1f0>
   1556c:	e0bff807 	ldb	r2,-32(fp)
   15570:	10800960 	cmpeqi	r2,r2,37
   15574:	1000041e 	bne	r2,zero,15588 <alt_printf+0x50>
   15578:	e0bff807 	ldb	r2,-32(fp)
   1557c:	1009883a 	mov	r4,r2
   15580:	00157640 	call	15764 <alt_putchar>
   15584:	00006806 	br	15728 <alt_printf+0x1f0>
   15588:	e0bff717 	ldw	r2,-36(fp)
   1558c:	10c00044 	addi	r3,r2,1
   15590:	e0fff715 	stw	r3,-36(fp)
   15594:	10800003 	ldbu	r2,0(r2)
   15598:	e0bff805 	stb	r2,-32(fp)
   1559c:	e0bff807 	ldb	r2,-32(fp)
   155a0:	10006926 	beq	r2,zero,15748 <alt_printf+0x210>
   155a4:	e0bff807 	ldb	r2,-32(fp)
   155a8:	10800958 	cmpnei	r2,r2,37
   155ac:	1000041e 	bne	r2,zero,155c0 <alt_printf+0x88>
   155b0:	e0bff807 	ldb	r2,-32(fp)
   155b4:	1009883a 	mov	r4,r2
   155b8:	00157640 	call	15764 <alt_putchar>
   155bc:	00005a06 	br	15728 <alt_printf+0x1f0>
   155c0:	e0bff807 	ldb	r2,-32(fp)
   155c4:	108018d8 	cmpnei	r2,r2,99
   155c8:	1000081e 	bne	r2,zero,155ec <alt_printf+0xb4>
   155cc:	e0bffe17 	ldw	r2,-8(fp)
   155d0:	10c00104 	addi	r3,r2,4
   155d4:	e0fffe15 	stw	r3,-8(fp)
   155d8:	10800017 	ldw	r2,0(r2)
   155dc:	e0bffd15 	stw	r2,-12(fp)
   155e0:	e13ffd17 	ldw	r4,-12(fp)
   155e4:	00157640 	call	15764 <alt_putchar>
   155e8:	00004f06 	br	15728 <alt_printf+0x1f0>
   155ec:	e0bff807 	ldb	r2,-32(fp)
   155f0:	10801e18 	cmpnei	r2,r2,120
   155f4:	1000341e 	bne	r2,zero,156c8 <alt_printf+0x190>
   155f8:	e0bffe17 	ldw	r2,-8(fp)
   155fc:	10c00104 	addi	r3,r2,4
   15600:	e0fffe15 	stw	r3,-8(fp)
   15604:	10800017 	ldw	r2,0(r2)
   15608:	e0bffb15 	stw	r2,-20(fp)
   1560c:	e0bffb17 	ldw	r2,-20(fp)
   15610:	1000031e 	bne	r2,zero,15620 <alt_printf+0xe8>
   15614:	01000c04 	movi	r4,48
   15618:	00157640 	call	15764 <alt_putchar>
   1561c:	00004206 	br	15728 <alt_printf+0x1f0>
   15620:	00800704 	movi	r2,28
   15624:	e0bff915 	stw	r2,-28(fp)
   15628:	00000306 	br	15638 <alt_printf+0x100>
   1562c:	e0bff917 	ldw	r2,-28(fp)
   15630:	10bfff04 	addi	r2,r2,-4
   15634:	e0bff915 	stw	r2,-28(fp)
   15638:	00c003c4 	movi	r3,15
   1563c:	e0bff917 	ldw	r2,-28(fp)
   15640:	1884983a 	sll	r2,r3,r2
   15644:	1007883a 	mov	r3,r2
   15648:	e0bffb17 	ldw	r2,-20(fp)
   1564c:	1884703a 	and	r2,r3,r2
   15650:	103ff626 	beq	r2,zero,1562c <__alt_data_end+0xffff5c2c>
   15654:	00001906 	br	156bc <alt_printf+0x184>
   15658:	00c003c4 	movi	r3,15
   1565c:	e0bff917 	ldw	r2,-28(fp)
   15660:	1884983a 	sll	r2,r3,r2
   15664:	1007883a 	mov	r3,r2
   15668:	e0bffb17 	ldw	r2,-20(fp)
   1566c:	1886703a 	and	r3,r3,r2
   15670:	e0bff917 	ldw	r2,-28(fp)
   15674:	1884d83a 	srl	r2,r3,r2
   15678:	e0bffc15 	stw	r2,-16(fp)
   1567c:	e0bffc17 	ldw	r2,-16(fp)
   15680:	108002a8 	cmpgeui	r2,r2,10
   15684:	1000041e 	bne	r2,zero,15698 <alt_printf+0x160>
   15688:	e0bffc17 	ldw	r2,-16(fp)
   1568c:	10800c04 	addi	r2,r2,48
   15690:	e0bff805 	stb	r2,-32(fp)
   15694:	00000306 	br	156a4 <alt_printf+0x16c>
   15698:	e0bffc17 	ldw	r2,-16(fp)
   1569c:	108015c4 	addi	r2,r2,87
   156a0:	e0bff805 	stb	r2,-32(fp)
   156a4:	e0bff807 	ldb	r2,-32(fp)
   156a8:	1009883a 	mov	r4,r2
   156ac:	00157640 	call	15764 <alt_putchar>
   156b0:	e0bff917 	ldw	r2,-28(fp)
   156b4:	10bfff04 	addi	r2,r2,-4
   156b8:	e0bff915 	stw	r2,-28(fp)
   156bc:	e0bff917 	ldw	r2,-28(fp)
   156c0:	103fe50e 	bge	r2,zero,15658 <__alt_data_end+0xffff5c58>
   156c4:	00001806 	br	15728 <alt_printf+0x1f0>
   156c8:	e0bff807 	ldb	r2,-32(fp)
   156cc:	10801cd8 	cmpnei	r2,r2,115
   156d0:	1000151e 	bne	r2,zero,15728 <alt_printf+0x1f0>
   156d4:	e0bffe17 	ldw	r2,-8(fp)
   156d8:	10c00104 	addi	r3,r2,4
   156dc:	e0fffe15 	stw	r3,-8(fp)
   156e0:	10800017 	ldw	r2,0(r2)
   156e4:	e0bffa15 	stw	r2,-24(fp)
   156e8:	00000906 	br	15710 <alt_printf+0x1d8>
   156ec:	e0bffa17 	ldw	r2,-24(fp)
   156f0:	10c00044 	addi	r3,r2,1
   156f4:	e0fffa15 	stw	r3,-24(fp)
   156f8:	10800003 	ldbu	r2,0(r2)
   156fc:	10803fcc 	andi	r2,r2,255
   15700:	1080201c 	xori	r2,r2,128
   15704:	10bfe004 	addi	r2,r2,-128
   15708:	1009883a 	mov	r4,r2
   1570c:	00157640 	call	15764 <alt_putchar>
   15710:	e0bffa17 	ldw	r2,-24(fp)
   15714:	10800003 	ldbu	r2,0(r2)
   15718:	10803fcc 	andi	r2,r2,255
   1571c:	1080201c 	xori	r2,r2,128
   15720:	10bfe004 	addi	r2,r2,-128
   15724:	103ff11e 	bne	r2,zero,156ec <__alt_data_end+0xffff5cec>
   15728:	e0bff717 	ldw	r2,-36(fp)
   1572c:	10c00044 	addi	r3,r2,1
   15730:	e0fff715 	stw	r3,-36(fp)
   15734:	10800003 	ldbu	r2,0(r2)
   15738:	e0bff805 	stb	r2,-32(fp)
   1573c:	e0bff807 	ldb	r2,-32(fp)
   15740:	103f8a1e 	bne	r2,zero,1556c <__alt_data_end+0xffff5b6c>
   15744:	00000106 	br	1574c <alt_printf+0x214>
   15748:	0001883a 	nop
   1574c:	0001883a 	nop
   15750:	e037883a 	mov	sp,fp
   15754:	dfc00117 	ldw	ra,4(sp)
   15758:	df000017 	ldw	fp,0(sp)
   1575c:	dec00504 	addi	sp,sp,20
   15760:	f800283a 	ret

00015764 <alt_putchar>:
   15764:	defffd04 	addi	sp,sp,-12
   15768:	dfc00215 	stw	ra,8(sp)
   1576c:	df000115 	stw	fp,4(sp)
   15770:	df000104 	addi	fp,sp,4
   15774:	e13fff15 	stw	r4,-4(fp)
   15778:	d0a00117 	ldw	r2,-32764(gp)
   1577c:	10800217 	ldw	r2,8(r2)
   15780:	100b883a 	mov	r5,r2
   15784:	e13fff17 	ldw	r4,-4(fp)
   15788:	0015ce00 	call	15ce0 <putc>
   1578c:	e037883a 	mov	sp,fp
   15790:	dfc00117 	ldw	ra,4(sp)
   15794:	df000017 	ldw	fp,0(sp)
   15798:	dec00204 	addi	sp,sp,8
   1579c:	f800283a 	ret

000157a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   157a0:	defffc04 	addi	sp,sp,-16
   157a4:	dfc00315 	stw	ra,12(sp)
   157a8:	df000215 	stw	fp,8(sp)
   157ac:	dc000115 	stw	r16,4(sp)
   157b0:	df000204 	addi	fp,sp,8
   157b4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   157b8:	e0bffe17 	ldw	r2,-8(fp)
   157bc:	108000d0 	cmplti	r2,r2,3
   157c0:	1000111e 	bne	r2,zero,15808 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   157c4:	04000074 	movhi	r16,1
   157c8:	841d6504 	addi	r16,r16,30100
   157cc:	e0bffe17 	ldw	r2,-8(fp)
   157d0:	01400304 	movi	r5,12
   157d4:	1009883a 	mov	r4,r2
   157d8:	00116700 	call	11670 <__mulsi3>
   157dc:	8085883a 	add	r2,r16,r2
   157e0:	10800204 	addi	r2,r2,8
   157e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   157e8:	04000074 	movhi	r16,1
   157ec:	841d6504 	addi	r16,r16,30100
   157f0:	e0bffe17 	ldw	r2,-8(fp)
   157f4:	01400304 	movi	r5,12
   157f8:	1009883a 	mov	r4,r2
   157fc:	00116700 	call	11670 <__mulsi3>
   15800:	8085883a 	add	r2,r16,r2
   15804:	10000015 	stw	zero,0(r2)
  }
}
   15808:	0001883a 	nop
   1580c:	e6ffff04 	addi	sp,fp,-4
   15810:	dfc00217 	ldw	ra,8(sp)
   15814:	df000117 	ldw	fp,4(sp)
   15818:	dc000017 	ldw	r16,0(sp)
   1581c:	dec00304 	addi	sp,sp,12
   15820:	f800283a 	ret

00015824 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15824:	defffa04 	addi	sp,sp,-24
   15828:	df000515 	stw	fp,20(sp)
   1582c:	df000504 	addi	fp,sp,20
   15830:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15834:	0005303a 	rdctl	r2,status
   15838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1583c:	e0fffc17 	ldw	r3,-16(fp)
   15840:	00bfff84 	movi	r2,-2
   15844:	1884703a 	and	r2,r3,r2
   15848:	1001703a 	wrctl	status,r2
  
  return context;
   1584c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15850:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1585c:	e0bffd17 	ldw	r2,-12(fp)
   15860:	10800017 	ldw	r2,0(r2)
   15864:	e0fffd17 	ldw	r3,-12(fp)
   15868:	18c00117 	ldw	r3,4(r3)
   1586c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15870:	e0bffd17 	ldw	r2,-12(fp)
   15874:	10800117 	ldw	r2,4(r2)
   15878:	e0fffd17 	ldw	r3,-12(fp)
   1587c:	18c00017 	ldw	r3,0(r3)
   15880:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15884:	e0bffd17 	ldw	r2,-12(fp)
   15888:	e0fffd17 	ldw	r3,-12(fp)
   1588c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15890:	e0bffd17 	ldw	r2,-12(fp)
   15894:	e0fffd17 	ldw	r3,-12(fp)
   15898:	10c00015 	stw	r3,0(r2)
   1589c:	e0bffb17 	ldw	r2,-20(fp)
   158a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158a4:	e0bffe17 	ldw	r2,-8(fp)
   158a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   158ac:	0001883a 	nop
   158b0:	e037883a 	mov	sp,fp
   158b4:	df000017 	ldw	fp,0(sp)
   158b8:	dec00104 	addi	sp,sp,4
   158bc:	f800283a 	ret

000158c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   158c0:	defffb04 	addi	sp,sp,-20
   158c4:	dfc00415 	stw	ra,16(sp)
   158c8:	df000315 	stw	fp,12(sp)
   158cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   158d0:	d0a00b17 	ldw	r2,-32724(gp)
   158d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   158d8:	d0a4e817 	ldw	r2,-27744(gp)
   158dc:	10800044 	addi	r2,r2,1
   158e0:	d0a4e815 	stw	r2,-27744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   158e4:	00002e06 	br	159a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   158e8:	e0bffd17 	ldw	r2,-12(fp)
   158ec:	10800017 	ldw	r2,0(r2)
   158f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   158f4:	e0bffd17 	ldw	r2,-12(fp)
   158f8:	10800403 	ldbu	r2,16(r2)
   158fc:	10803fcc 	andi	r2,r2,255
   15900:	10000426 	beq	r2,zero,15914 <alt_tick+0x54>
   15904:	d0a4e817 	ldw	r2,-27744(gp)
   15908:	1000021e 	bne	r2,zero,15914 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1590c:	e0bffd17 	ldw	r2,-12(fp)
   15910:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15914:	e0bffd17 	ldw	r2,-12(fp)
   15918:	10800217 	ldw	r2,8(r2)
   1591c:	d0e4e817 	ldw	r3,-27744(gp)
   15920:	18801d36 	bltu	r3,r2,15998 <alt_tick+0xd8>
   15924:	e0bffd17 	ldw	r2,-12(fp)
   15928:	10800403 	ldbu	r2,16(r2)
   1592c:	10803fcc 	andi	r2,r2,255
   15930:	1000191e 	bne	r2,zero,15998 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15934:	e0bffd17 	ldw	r2,-12(fp)
   15938:	10800317 	ldw	r2,12(r2)
   1593c:	e0fffd17 	ldw	r3,-12(fp)
   15940:	18c00517 	ldw	r3,20(r3)
   15944:	1809883a 	mov	r4,r3
   15948:	103ee83a 	callr	r2
   1594c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15950:	e0bfff17 	ldw	r2,-4(fp)
   15954:	1000031e 	bne	r2,zero,15964 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15958:	e13ffd17 	ldw	r4,-12(fp)
   1595c:	00158240 	call	15824 <alt_alarm_stop>
   15960:	00000d06 	br	15998 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15964:	e0bffd17 	ldw	r2,-12(fp)
   15968:	10c00217 	ldw	r3,8(r2)
   1596c:	e0bfff17 	ldw	r2,-4(fp)
   15970:	1887883a 	add	r3,r3,r2
   15974:	e0bffd17 	ldw	r2,-12(fp)
   15978:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1597c:	e0bffd17 	ldw	r2,-12(fp)
   15980:	10c00217 	ldw	r3,8(r2)
   15984:	d0a4e817 	ldw	r2,-27744(gp)
   15988:	1880032e 	bgeu	r3,r2,15998 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1598c:	e0bffd17 	ldw	r2,-12(fp)
   15990:	00c00044 	movi	r3,1
   15994:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15998:	e0bffe17 	ldw	r2,-8(fp)
   1599c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   159a0:	e0fffd17 	ldw	r3,-12(fp)
   159a4:	d0a00b04 	addi	r2,gp,-32724
   159a8:	18bfcf1e 	bne	r3,r2,158e8 <__alt_data_end+0xffff5ee8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   159ac:	0001883a 	nop
}
   159b0:	0001883a 	nop
   159b4:	e037883a 	mov	sp,fp
   159b8:	dfc00117 	ldw	ra,4(sp)
   159bc:	df000017 	ldw	fp,0(sp)
   159c0:	dec00204 	addi	sp,sp,8
   159c4:	f800283a 	ret

000159c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   159c8:	deffff04 	addi	sp,sp,-4
   159cc:	df000015 	stw	fp,0(sp)
   159d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   159d4:	000170fa 	wrctl	ienable,zero
}
   159d8:	0001883a 	nop
   159dc:	e037883a 	mov	sp,fp
   159e0:	df000017 	ldw	fp,0(sp)
   159e4:	dec00104 	addi	sp,sp,4
   159e8:	f800283a 	ret

000159ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   159ec:	defffb04 	addi	sp,sp,-20
   159f0:	dfc00415 	stw	ra,16(sp)
   159f4:	df000315 	stw	fp,12(sp)
   159f8:	df000304 	addi	fp,sp,12
   159fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15a00:	d0a00417 	ldw	r2,-32752(gp)
   15a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15a08:	00003106 	br	15ad0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15a0c:	e0bffd17 	ldw	r2,-12(fp)
   15a10:	10800217 	ldw	r2,8(r2)
   15a14:	1009883a 	mov	r4,r2
   15a18:	00117b40 	call	117b4 <strlen>
   15a1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15a20:	e0bffd17 	ldw	r2,-12(fp)
   15a24:	10c00217 	ldw	r3,8(r2)
   15a28:	e0bffe17 	ldw	r2,-8(fp)
   15a2c:	10bfffc4 	addi	r2,r2,-1
   15a30:	1885883a 	add	r2,r3,r2
   15a34:	10800003 	ldbu	r2,0(r2)
   15a38:	10803fcc 	andi	r2,r2,255
   15a3c:	1080201c 	xori	r2,r2,128
   15a40:	10bfe004 	addi	r2,r2,-128
   15a44:	10800bd8 	cmpnei	r2,r2,47
   15a48:	1000031e 	bne	r2,zero,15a58 <alt_find_file+0x6c>
    {
      len -= 1;
   15a4c:	e0bffe17 	ldw	r2,-8(fp)
   15a50:	10bfffc4 	addi	r2,r2,-1
   15a54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15a58:	e0bffe17 	ldw	r2,-8(fp)
   15a5c:	e0ffff17 	ldw	r3,-4(fp)
   15a60:	1885883a 	add	r2,r3,r2
   15a64:	10800003 	ldbu	r2,0(r2)
   15a68:	10803fcc 	andi	r2,r2,255
   15a6c:	1080201c 	xori	r2,r2,128
   15a70:	10bfe004 	addi	r2,r2,-128
   15a74:	10800be0 	cmpeqi	r2,r2,47
   15a78:	1000081e 	bne	r2,zero,15a9c <alt_find_file+0xb0>
   15a7c:	e0bffe17 	ldw	r2,-8(fp)
   15a80:	e0ffff17 	ldw	r3,-4(fp)
   15a84:	1885883a 	add	r2,r3,r2
   15a88:	10800003 	ldbu	r2,0(r2)
   15a8c:	10803fcc 	andi	r2,r2,255
   15a90:	1080201c 	xori	r2,r2,128
   15a94:	10bfe004 	addi	r2,r2,-128
   15a98:	10000a1e 	bne	r2,zero,15ac4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15a9c:	e0bffd17 	ldw	r2,-12(fp)
   15aa0:	10800217 	ldw	r2,8(r2)
   15aa4:	e0fffe17 	ldw	r3,-8(fp)
   15aa8:	180d883a 	mov	r6,r3
   15aac:	e17fff17 	ldw	r5,-4(fp)
   15ab0:	1009883a 	mov	r4,r2
   15ab4:	0015c880 	call	15c88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15ab8:	1000021e 	bne	r2,zero,15ac4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15abc:	e0bffd17 	ldw	r2,-12(fp)
   15ac0:	00000706 	br	15ae0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15ac4:	e0bffd17 	ldw	r2,-12(fp)
   15ac8:	10800017 	ldw	r2,0(r2)
   15acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15ad0:	e0fffd17 	ldw	r3,-12(fp)
   15ad4:	d0a00404 	addi	r2,gp,-32752
   15ad8:	18bfcc1e 	bne	r3,r2,15a0c <__alt_data_end+0xffff600c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15adc:	0005883a 	mov	r2,zero
}
   15ae0:	e037883a 	mov	sp,fp
   15ae4:	dfc00117 	ldw	ra,4(sp)
   15ae8:	df000017 	ldw	fp,0(sp)
   15aec:	dec00204 	addi	sp,sp,8
   15af0:	f800283a 	ret

00015af4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15af4:	defffa04 	addi	sp,sp,-24
   15af8:	dfc00515 	stw	ra,20(sp)
   15afc:	df000415 	stw	fp,16(sp)
   15b00:	dc000315 	stw	r16,12(sp)
   15b04:	df000404 	addi	fp,sp,16
   15b08:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15b0c:	00bffa04 	movi	r2,-24
   15b10:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15b14:	e03ffc15 	stw	zero,-16(fp)
   15b18:	00001d06 	br	15b90 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   15b1c:	04000074 	movhi	r16,1
   15b20:	841d6504 	addi	r16,r16,30100
   15b24:	e0bffc17 	ldw	r2,-16(fp)
   15b28:	01400304 	movi	r5,12
   15b2c:	1009883a 	mov	r4,r2
   15b30:	00116700 	call	11670 <__mulsi3>
   15b34:	8085883a 	add	r2,r16,r2
   15b38:	10800017 	ldw	r2,0(r2)
   15b3c:	1000111e 	bne	r2,zero,15b84 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   15b40:	04000074 	movhi	r16,1
   15b44:	841d6504 	addi	r16,r16,30100
   15b48:	e0bffc17 	ldw	r2,-16(fp)
   15b4c:	01400304 	movi	r5,12
   15b50:	1009883a 	mov	r4,r2
   15b54:	00116700 	call	11670 <__mulsi3>
   15b58:	8085883a 	add	r2,r16,r2
   15b5c:	e0fffe17 	ldw	r3,-8(fp)
   15b60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15b64:	d0e00817 	ldw	r3,-32736(gp)
   15b68:	e0bffc17 	ldw	r2,-16(fp)
   15b6c:	1880020e 	bge	r3,r2,15b78 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   15b70:	e0bffc17 	ldw	r2,-16(fp)
   15b74:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15b78:	e0bffc17 	ldw	r2,-16(fp)
   15b7c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   15b80:	00000606 	br	15b9c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15b84:	e0bffc17 	ldw	r2,-16(fp)
   15b88:	10800044 	addi	r2,r2,1
   15b8c:	e0bffc15 	stw	r2,-16(fp)
   15b90:	e0bffc17 	ldw	r2,-16(fp)
   15b94:	10800810 	cmplti	r2,r2,32
   15b98:	103fe01e 	bne	r2,zero,15b1c <__alt_data_end+0xffff611c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15b9c:	e0bffd17 	ldw	r2,-12(fp)
}
   15ba0:	e6ffff04 	addi	sp,fp,-4
   15ba4:	dfc00217 	ldw	ra,8(sp)
   15ba8:	df000117 	ldw	fp,4(sp)
   15bac:	dc000017 	ldw	r16,0(sp)
   15bb0:	dec00304 	addi	sp,sp,12
   15bb4:	f800283a 	ret

00015bb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15bb8:	defffe04 	addi	sp,sp,-8
   15bbc:	df000115 	stw	fp,4(sp)
   15bc0:	df000104 	addi	fp,sp,4
   15bc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   15bc8:	e0bfff17 	ldw	r2,-4(fp)
   15bcc:	10bffe84 	addi	r2,r2,-6
   15bd0:	10c00428 	cmpgeui	r3,r2,16
   15bd4:	18001a1e 	bne	r3,zero,15c40 <alt_exception_cause_generated_bad_addr+0x88>
   15bd8:	100690ba 	slli	r3,r2,2
   15bdc:	00800074 	movhi	r2,1
   15be0:	1096fc04 	addi	r2,r2,23536
   15be4:	1885883a 	add	r2,r3,r2
   15be8:	10800017 	ldw	r2,0(r2)
   15bec:	1000683a 	jmp	r2
   15bf0:	00015c30 	cmpltui	zero,zero,1392
   15bf4:	00015c30 	cmpltui	zero,zero,1392
   15bf8:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15bfc:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c00:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c04:	00015c30 	cmpltui	zero,zero,1392
   15c08:	00015c38 	rdprs	zero,zero,1392
   15c0c:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c10:	00015c30 	cmpltui	zero,zero,1392
   15c14:	00015c30 	cmpltui	zero,zero,1392
   15c18:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c1c:	00015c30 	cmpltui	zero,zero,1392
   15c20:	00015c38 	rdprs	zero,zero,1392
   15c24:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c28:	00015c40 	call	15c4 <__alt_mem_onchip_memory2_0-0xea3c>
   15c2c:	00015c30 	cmpltui	zero,zero,1392
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15c30:	00800044 	movi	r2,1
   15c34:	00000306 	br	15c44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15c38:	0005883a 	mov	r2,zero
   15c3c:	00000106 	br	15c44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   15c40:	0005883a 	mov	r2,zero
  }
}
   15c44:	e037883a 	mov	sp,fp
   15c48:	df000017 	ldw	fp,0(sp)
   15c4c:	dec00104 	addi	sp,sp,4
   15c50:	f800283a 	ret

00015c54 <atexit>:
   15c54:	200b883a 	mov	r5,r4
   15c58:	000f883a 	mov	r7,zero
   15c5c:	000d883a 	mov	r6,zero
   15c60:	0009883a 	mov	r4,zero
   15c64:	0015d8c1 	jmpi	15d8c <__register_exitproc>

00015c68 <exit>:
   15c68:	defffe04 	addi	sp,sp,-8
   15c6c:	000b883a 	mov	r5,zero
   15c70:	dc000015 	stw	r16,0(sp)
   15c74:	dfc00115 	stw	ra,4(sp)
   15c78:	2021883a 	mov	r16,r4
   15c7c:	0015ee40 	call	15ee4 <__call_exitprocs>
   15c80:	8009883a 	mov	r4,r16
   15c84:	00160740 	call	16074 <_exit>

00015c88 <memcmp>:
   15c88:	218d883a 	add	r6,r4,r6
   15c8c:	21800826 	beq	r4,r6,15cb0 <memcmp+0x28>
   15c90:	20800003 	ldbu	r2,0(r4)
   15c94:	28c00003 	ldbu	r3,0(r5)
   15c98:	10c00226 	beq	r2,r3,15ca4 <memcmp+0x1c>
   15c9c:	10c5c83a 	sub	r2,r2,r3
   15ca0:	f800283a 	ret
   15ca4:	21000044 	addi	r4,r4,1
   15ca8:	29400044 	addi	r5,r5,1
   15cac:	003ff706 	br	15c8c <__alt_data_end+0xffff628c>
   15cb0:	0005883a 	mov	r2,zero
   15cb4:	f800283a 	ret

00015cb8 <memcpy>:
   15cb8:	2005883a 	mov	r2,r4
   15cbc:	2007883a 	mov	r3,r4
   15cc0:	218d883a 	add	r6,r4,r6
   15cc4:	19800526 	beq	r3,r6,15cdc <memcpy+0x24>
   15cc8:	29000003 	ldbu	r4,0(r5)
   15ccc:	18c00044 	addi	r3,r3,1
   15cd0:	29400044 	addi	r5,r5,1
   15cd4:	193fffc5 	stb	r4,-1(r3)
   15cd8:	003ffa06 	br	15cc4 <__alt_data_end+0xffff62c4>
   15cdc:	f800283a 	ret

00015ce0 <putc>:
   15ce0:	defffd04 	addi	sp,sp,-12
   15ce4:	00800074 	movhi	r2,1
   15ce8:	dc000115 	stw	r16,4(sp)
   15cec:	dfc00215 	stw	ra,8(sp)
   15cf0:	10876104 	addi	r2,r2,7556
   15cf4:	28800115 	stw	r2,4(r5)
   15cf8:	00800074 	movhi	r2,1
   15cfc:	109dc604 	addi	r2,r2,30488
   15d00:	d9000005 	stb	r4,0(sp)
   15d04:	2021883a 	mov	r16,r4
   15d08:	11000017 	ldw	r4,0(r2)
   15d0c:	01c00044 	movi	r7,1
   15d10:	d80d883a 	mov	r6,sp
   15d14:	0011d840 	call	11d84 <__sfvwrite_small_dev>
   15d18:	00ffffc4 	movi	r3,-1
   15d1c:	10c00126 	beq	r2,r3,15d24 <putc+0x44>
   15d20:	8005883a 	mov	r2,r16
   15d24:	dfc00217 	ldw	ra,8(sp)
   15d28:	dc000117 	ldw	r16,4(sp)
   15d2c:	dec00304 	addi	sp,sp,12
   15d30:	f800283a 	ret

00015d34 <_putc_r>:
   15d34:	defffd04 	addi	sp,sp,-12
   15d38:	00800074 	movhi	r2,1
   15d3c:	dc000115 	stw	r16,4(sp)
   15d40:	dfc00215 	stw	ra,8(sp)
   15d44:	10876104 	addi	r2,r2,7556
   15d48:	30800115 	stw	r2,4(r6)
   15d4c:	00800074 	movhi	r2,1
   15d50:	109dc604 	addi	r2,r2,30488
   15d54:	11000017 	ldw	r4,0(r2)
   15d58:	2821883a 	mov	r16,r5
   15d5c:	01c00044 	movi	r7,1
   15d60:	300b883a 	mov	r5,r6
   15d64:	d80d883a 	mov	r6,sp
   15d68:	dc000005 	stb	r16,0(sp)
   15d6c:	0011d840 	call	11d84 <__sfvwrite_small_dev>
   15d70:	00ffffc4 	movi	r3,-1
   15d74:	10c00126 	beq	r2,r3,15d7c <_putc_r+0x48>
   15d78:	8005883a 	mov	r2,r16
   15d7c:	dfc00217 	ldw	ra,8(sp)
   15d80:	dc000117 	ldw	r16,4(sp)
   15d84:	dec00304 	addi	sp,sp,12
   15d88:	f800283a 	ret

00015d8c <__register_exitproc>:
   15d8c:	00800074 	movhi	r2,1
   15d90:	109dc504 	addi	r2,r2,30484
   15d94:	10c00017 	ldw	r3,0(r2)
   15d98:	defff904 	addi	sp,sp,-28
   15d9c:	dc000015 	stw	r16,0(sp)
   15da0:	1c000c17 	ldw	r16,48(r3)
   15da4:	dd400515 	stw	r21,20(sp)
   15da8:	dd000415 	stw	r20,16(sp)
   15dac:	dcc00315 	stw	r19,12(sp)
   15db0:	dc800215 	stw	r18,8(sp)
   15db4:	dc400115 	stw	r17,4(sp)
   15db8:	dfc00615 	stw	ra,24(sp)
   15dbc:	202b883a 	mov	r21,r4
   15dc0:	2823883a 	mov	r17,r5
   15dc4:	3027883a 	mov	r19,r6
   15dc8:	3825883a 	mov	r18,r7
   15dcc:	1029883a 	mov	r20,r2
   15dd0:	8000021e 	bne	r16,zero,15ddc <__register_exitproc+0x50>
   15dd4:	1c000d04 	addi	r16,r3,52
   15dd8:	1c000c15 	stw	r16,48(r3)
   15ddc:	80800117 	ldw	r2,4(r16)
   15de0:	00c007c4 	movi	r3,31
   15de4:	1880110e 	bge	r3,r2,15e2c <__register_exitproc+0xa0>
   15de8:	00800034 	movhi	r2,0
   15dec:	10800004 	addi	r2,r2,0
   15df0:	1000021e 	bne	r2,zero,15dfc <__register_exitproc+0x70>
   15df4:	00bfffc4 	movi	r2,-1
   15df8:	00003106 	br	15ec0 <__register_exitproc+0x134>
   15dfc:	01002304 	movi	r4,140
   15e00:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   15e04:	1021883a 	mov	r16,r2
   15e08:	103ffa26 	beq	r2,zero,15df4 <__alt_data_end+0xffff63f4>
   15e0c:	10000115 	stw	zero,4(r2)
   15e10:	a0800017 	ldw	r2,0(r20)
   15e14:	10c00c17 	ldw	r3,48(r2)
   15e18:	80c00015 	stw	r3,0(r16)
   15e1c:	14000c15 	stw	r16,48(r2)
   15e20:	80002215 	stw	zero,136(r16)
   15e24:	a8001d26 	beq	r21,zero,15e9c <__register_exitproc+0x110>
   15e28:	00000606 	br	15e44 <__register_exitproc+0xb8>
   15e2c:	a8001b26 	beq	r21,zero,15e9c <__register_exitproc+0x110>
   15e30:	80802217 	ldw	r2,136(r16)
   15e34:	1000091e 	bne	r2,zero,15e5c <__register_exitproc+0xd0>
   15e38:	00800034 	movhi	r2,0
   15e3c:	10800004 	addi	r2,r2,0
   15e40:	103fec26 	beq	r2,zero,15df4 <__alt_data_end+0xffff63f4>
   15e44:	01004204 	movi	r4,264
   15e48:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   15e4c:	103fe926 	beq	r2,zero,15df4 <__alt_data_end+0xffff63f4>
   15e50:	10004015 	stw	zero,256(r2)
   15e54:	10004115 	stw	zero,260(r2)
   15e58:	80802215 	stw	r2,136(r16)
   15e5c:	81400117 	ldw	r5,4(r16)
   15e60:	01000044 	movi	r4,1
   15e64:	2947883a 	add	r3,r5,r5
   15e68:	18c7883a 	add	r3,r3,r3
   15e6c:	10c7883a 	add	r3,r2,r3
   15e70:	1cc00015 	stw	r19,0(r3)
   15e74:	2148983a 	sll	r4,r4,r5
   15e78:	11404017 	ldw	r5,256(r2)
   15e7c:	290ab03a 	or	r5,r5,r4
   15e80:	11404015 	stw	r5,256(r2)
   15e84:	1c802015 	stw	r18,128(r3)
   15e88:	00c00084 	movi	r3,2
   15e8c:	a8c0031e 	bne	r21,r3,15e9c <__register_exitproc+0x110>
   15e90:	10c04117 	ldw	r3,260(r2)
   15e94:	1908b03a 	or	r4,r3,r4
   15e98:	11004115 	stw	r4,260(r2)
   15e9c:	80800117 	ldw	r2,4(r16)
   15ea0:	10c00044 	addi	r3,r2,1
   15ea4:	10800084 	addi	r2,r2,2
   15ea8:	1085883a 	add	r2,r2,r2
   15eac:	1085883a 	add	r2,r2,r2
   15eb0:	80c00115 	stw	r3,4(r16)
   15eb4:	80a1883a 	add	r16,r16,r2
   15eb8:	84400015 	stw	r17,0(r16)
   15ebc:	0005883a 	mov	r2,zero
   15ec0:	dfc00617 	ldw	ra,24(sp)
   15ec4:	dd400517 	ldw	r21,20(sp)
   15ec8:	dd000417 	ldw	r20,16(sp)
   15ecc:	dcc00317 	ldw	r19,12(sp)
   15ed0:	dc800217 	ldw	r18,8(sp)
   15ed4:	dc400117 	ldw	r17,4(sp)
   15ed8:	dc000017 	ldw	r16,0(sp)
   15edc:	dec00704 	addi	sp,sp,28
   15ee0:	f800283a 	ret

00015ee4 <__call_exitprocs>:
   15ee4:	defff504 	addi	sp,sp,-44
   15ee8:	dd000515 	stw	r20,20(sp)
   15eec:	05000074 	movhi	r20,1
   15ef0:	dc800315 	stw	r18,12(sp)
   15ef4:	dfc00a15 	stw	ra,40(sp)
   15ef8:	df000915 	stw	fp,36(sp)
   15efc:	ddc00815 	stw	r23,32(sp)
   15f00:	dd800715 	stw	r22,28(sp)
   15f04:	dd400615 	stw	r21,24(sp)
   15f08:	dcc00415 	stw	r19,16(sp)
   15f0c:	dc400215 	stw	r17,8(sp)
   15f10:	dc000115 	stw	r16,4(sp)
   15f14:	d9000015 	stw	r4,0(sp)
   15f18:	2825883a 	mov	r18,r5
   15f1c:	a51dc504 	addi	r20,r20,30484
   15f20:	a4400017 	ldw	r17,0(r20)
   15f24:	8cc00c17 	ldw	r19,48(r17)
   15f28:	8c400c04 	addi	r17,r17,48
   15f2c:	98004526 	beq	r19,zero,16044 <__call_exitprocs+0x160>
   15f30:	9c000117 	ldw	r16,4(r19)
   15f34:	00900034 	movhi	r2,16384
   15f38:	10bfffc4 	addi	r2,r2,-1
   15f3c:	9d402217 	ldw	r21,136(r19)
   15f40:	85bfffc4 	addi	r22,r16,-1
   15f44:	80a1883a 	add	r16,r16,r2
   15f48:	8421883a 	add	r16,r16,r16
   15f4c:	8421883a 	add	r16,r16,r16
   15f50:	ac2f883a 	add	r23,r21,r16
   15f54:	84000204 	addi	r16,r16,8
   15f58:	9c21883a 	add	r16,r19,r16
   15f5c:	b0002716 	blt	r22,zero,15ffc <__call_exitprocs+0x118>
   15f60:	90000726 	beq	r18,zero,15f80 <__call_exitprocs+0x9c>
   15f64:	a800041e 	bne	r21,zero,15f78 <__call_exitprocs+0x94>
   15f68:	b5bfffc4 	addi	r22,r22,-1
   15f6c:	bdffff04 	addi	r23,r23,-4
   15f70:	843fff04 	addi	r16,r16,-4
   15f74:	003ff906 	br	15f5c <__alt_data_end+0xffff655c>
   15f78:	b9002017 	ldw	r4,128(r23)
   15f7c:	913ffa1e 	bne	r18,r4,15f68 <__alt_data_end+0xffff6568>
   15f80:	99000117 	ldw	r4,4(r19)
   15f84:	82000017 	ldw	r8,0(r16)
   15f88:	213fffc4 	addi	r4,r4,-1
   15f8c:	b100021e 	bne	r22,r4,15f98 <__call_exitprocs+0xb4>
   15f90:	9d800115 	stw	r22,4(r19)
   15f94:	00000106 	br	15f9c <__call_exitprocs+0xb8>
   15f98:	80000015 	stw	zero,0(r16)
   15f9c:	403ff226 	beq	r8,zero,15f68 <__alt_data_end+0xffff6568>
   15fa0:	9f000117 	ldw	fp,4(r19)
   15fa4:	a8000526 	beq	r21,zero,15fbc <__call_exitprocs+0xd8>
   15fa8:	00800044 	movi	r2,1
   15fac:	1592983a 	sll	r9,r2,r22
   15fb0:	a9404017 	ldw	r5,256(r21)
   15fb4:	494a703a 	and	r5,r9,r5
   15fb8:	2800021e 	bne	r5,zero,15fc4 <__call_exitprocs+0xe0>
   15fbc:	403ee83a 	callr	r8
   15fc0:	00000906 	br	15fe8 <__call_exitprocs+0x104>
   15fc4:	a9004117 	ldw	r4,260(r21)
   15fc8:	4908703a 	and	r4,r9,r4
   15fcc:	2000041e 	bne	r4,zero,15fe0 <__call_exitprocs+0xfc>
   15fd0:	b9400017 	ldw	r5,0(r23)
   15fd4:	d9000017 	ldw	r4,0(sp)
   15fd8:	403ee83a 	callr	r8
   15fdc:	00000206 	br	15fe8 <__call_exitprocs+0x104>
   15fe0:	b9000017 	ldw	r4,0(r23)
   15fe4:	403ee83a 	callr	r8
   15fe8:	99000117 	ldw	r4,4(r19)
   15fec:	e13fcc1e 	bne	fp,r4,15f20 <__alt_data_end+0xffff6520>
   15ff0:	89000017 	ldw	r4,0(r17)
   15ff4:	993fdc26 	beq	r19,r4,15f68 <__alt_data_end+0xffff6568>
   15ff8:	003fc906 	br	15f20 <__alt_data_end+0xffff6520>
   15ffc:	00800034 	movhi	r2,0
   16000:	10800004 	addi	r2,r2,0
   16004:	10000f26 	beq	r2,zero,16044 <__call_exitprocs+0x160>
   16008:	99400117 	ldw	r5,4(r19)
   1600c:	99000017 	ldw	r4,0(r19)
   16010:	2800091e 	bne	r5,zero,16038 <__call_exitprocs+0x154>
   16014:	20000826 	beq	r4,zero,16038 <__call_exitprocs+0x154>
   16018:	89000015 	stw	r4,0(r17)
   1601c:	a8000226 	beq	r21,zero,16028 <__call_exitprocs+0x144>
   16020:	a809883a 	mov	r4,r21
   16024:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   16028:	9809883a 	mov	r4,r19
   1602c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   16030:	8cc00017 	ldw	r19,0(r17)
   16034:	003fbd06 	br	15f2c <__alt_data_end+0xffff652c>
   16038:	9823883a 	mov	r17,r19
   1603c:	2027883a 	mov	r19,r4
   16040:	003fba06 	br	15f2c <__alt_data_end+0xffff652c>
   16044:	dfc00a17 	ldw	ra,40(sp)
   16048:	df000917 	ldw	fp,36(sp)
   1604c:	ddc00817 	ldw	r23,32(sp)
   16050:	dd800717 	ldw	r22,28(sp)
   16054:	dd400617 	ldw	r21,24(sp)
   16058:	dd000517 	ldw	r20,20(sp)
   1605c:	dcc00417 	ldw	r19,16(sp)
   16060:	dc800317 	ldw	r18,12(sp)
   16064:	dc400217 	ldw	r17,8(sp)
   16068:	dc000117 	ldw	r16,4(sp)
   1606c:	dec00b04 	addi	sp,sp,44
   16070:	f800283a 	ret

00016074 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16074:	defffd04 	addi	sp,sp,-12
   16078:	df000215 	stw	fp,8(sp)
   1607c:	df000204 	addi	fp,sp,8
   16080:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   16084:	0001883a 	nop
   16088:	e0bfff17 	ldw	r2,-4(fp)
   1608c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   16090:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16094:	10000226 	beq	r2,zero,160a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   16098:	002af070 	cmpltui	zero,zero,43969
   1609c:	00000106 	br	160a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   160a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   160a4:	003fff06 	br	160a4 <__alt_data_end+0xffff66a4>
