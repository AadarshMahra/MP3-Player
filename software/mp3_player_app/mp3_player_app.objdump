
mp3_player_app.elf:     file format elf32-littlenios2
mp3_player_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08010230

Program Header:
    LOAD off    0x00001000 vaddr 0x08010000 paddr 0x08010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08010020 paddr 0x08010020 align 2**12
         filesz 0x000063d4 memsz 0x000063d4 flags r-x
    LOAD off    0x000073f4 vaddr 0x080163f4 paddr 0x08017748 align 2**12
         filesz 0x00001354 memsz 0x00001354 flags rw-
    LOAD off    0x00008a9c vaddr 0x08018a9c paddr 0x08018a9c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08010000  08010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08010020  08010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e78  08010230  08010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  080160a8  080160a8  000070a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001354  080163f4  08017748  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  08018a9c  08018a9c  00008a9c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  08018bbc  08018bbc  00008748  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000878  00000000  00000000  00008770  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c5b7  00000000  00000000  00008fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004429  00000000  00000000  0001559f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000049cf  00000000  00000000  000199c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001634  00000000  00000000  0001e398  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f50  00000000  00000000  0001f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002e3e  00000000  00000000  0002291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0002575c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000600  00000000  00000000  000257a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002855a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002855d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00028569  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002856a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002856b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002856f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00028573  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00028577  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00028582  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0002858d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00028598  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000285a5  2**0
                  CONTENTS, READONLY
 29 .jdi          000065f9  00000000  00000000  000285c8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000658da  00000000  00000000  0002ebc1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08010000 l    d  .entry	00000000 .entry
08010020 l    d  .exceptions	00000000 .exceptions
08010230 l    d  .text	00000000 .text
080160a8 l    d  .rodata	00000000 .rodata
080163f4 l    d  .rwdata	00000000 .rwdata
08018a9c l    d  .bss	00000000 .bss
08018bbc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mp3_player_app_bsp//obj/HAL/src/crt0.o
08010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080117d0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
080163f4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
08011e94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
08011ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08012138 l     F .text	00000034 alt_dev_reg
080164d4 l     O .rwdata	00000038 i2c_0
0801650c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08012200 l     F .text	00000110 optional_irq_callback
08012360 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801403c l     F .text	0000020c altera_avalon_jtag_uart_irq
08014248 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08014b04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08014c38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014c64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08015154 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080152b4 l     F .text	0000003c alt_get_errno
080152f0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08018ab8 g     O .bss	00000004 alt_instruction_exception_handler
08011f80 g     F .text	0000007c alt_main
08011720 g     F .text	00000080 _puts_r
08018abc g     O .bss	00000100 alt_irq
08017748 g       *ABS*	00000000 __flash_rwdata_start
080116d4 g     F .text	0000004c printf
08012a58 g     F .text	000000a8 alt_avalon_i2c_rx_read
08013c70 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
080127dc g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
080134c0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
080114ac g     F .text	00000070 .hidden __fixsfsi
080159c8 g     F .text	00000024 altera_nios2_gen2_irq_init
08010000 g     F .entry	0000000c __reset
08010020 g       *ABS*	00000000 __flash_exceptions_start
08018a9c g     O .bss	00000004 errno
08018aa4 g     O .bss	00000004 alt_argv
0801f714 g       *ABS*	00000000 _gp
08013cb4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
08010fc8 g     F .text	000004e4 .hidden __subsf3
0801296c g     F .text	00000044 alt_avalon_i2c_is_busy
08017594 g     O .rwdata	00000180 alt_fd_list
08012710 g     F .text	000000cc alt_avalon_i2c_master_config_set
08014e04 g     F .text	00000090 alt_find_dev
08015cb8 g     F .text	00000028 memcpy
08015238 g     F .text	0000007c alt_io_redirect
080160a8 g       *ABS*	00000000 __DTOR_END__
08013300 g     F .text	000001c0 alt_avalon_i2c_master_transmit
080117a0 g     F .text	00000014 puts
08015bb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08014440 g     F .text	0000021c altera_avalon_jtag_uart_read
08011698 g     F .text	0000003c _printf_r
08010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08010a20 g     F .text	00000064 .hidden __udivsi3
0801257c g     F .text	00000098 alt_avalon_i2c_enable
08013ba4 g     F .text	00000068 alt_avalon_i2c_int_disable
0801026c g     F .text	000000c4 SGTL5000_Reg_Rd
08017734 g     O .rwdata	00000004 alt_max_fd
080136cc g     F .text	00000210 alt_avalon_i2c_master_receive
08013c0c g     F .text	00000064 alt_avalon_i2c_int_enable
08017714 g     O .rwdata	00000004 _global_impure_ptr
08018bbc g       *ABS*	00000000 __bss_end
08015064 g     F .text	000000f0 alt_iic_isr_register
080158c0 g     F .text	00000108 alt_tick
08013acc g     F .text	00000058 alt_avalon_i2c_int_status_get
08015018 g     F .text	0000004c alt_ic_irq_enabled
08015824 g     F .text	0000009c alt_alarm_stop
080123fc g     F .text	00000054 alt_avalon_i2c_register_callback
08018aac g     O .bss	00000004 alt_irq_active
08012450 g     F .text	000000ec alt_avalon_i2c_init
080100fc g     F .exceptions	000000d4 alt_irq_handler
0801756c g     O .rwdata	00000028 alt_dev_null
08014c18 g     F .text	00000020 alt_dcache_flush_all
08017748 g       *ABS*	00000000 __ram_rwdata_end
0801772c g     O .rwdata	00000008 alt_dev_list
08012038 g     F .text	00000100 write
08015d34 g     F .text	00000058 _putc_r
08012d8c g     F .text	0000004c alt_avalon_i2c_check_arblost
08010adc g     F .text	000000bc .hidden __gtsf2
08013b68 g     F .text	0000003c alt_avalon_i2c_int_clear
080163f4 g       *ABS*	00000000 __ram_rodata_end
0801771c g     O .rwdata	00000008 alt_avalon_i2c_list
08010a84 g     F .text	00000058 .hidden __umodsi3
08018bbc g       *ABS*	00000000 end
08013f7c g     F .text	000000c0 altera_avalon_jtag_uart_init
080101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0801253c g     F .text	00000040 alt_avalon_i2c_open
080160a8 g       *ABS*	00000000 __CTOR_LIST__
0801fa00 g       *ABS*	00000000 __alt_stack_pointer
08012f14 g     F .text	000000e8 alt_avalon_i2c_master_tx
0801160c g     F .text	00000064 .hidden __clzsi2
0801465c g     F .text	00000224 altera_avalon_jtag_uart_write
0801183c g     F .text	0000052c ___vfprintf_internal_r
08015538 g     F .text	0000022c alt_printf
08015ee4 g     F .text	00000190 __call_exitprocs
08012310 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08010230 g     F .text	0000003c _start
08018ab0 g     O .bss	00000004 _alt_tick_rate
080138dc g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
08013d00 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08018ab4 g     O .bss	00000004 _alt_nticks
080121a4 g     F .text	0000005c alt_sys_init
08015d8c g     F .text	00000158 __register_exitproc
08013138 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
080142e8 g     F .text	00000068 altera_avalon_jtag_uart_close
08011670 g     F .text	00000028 .hidden __mulsi3
080163f4 g       *ABS*	00000000 __ram_rwdata_start
080160a8 g       *ABS*	00000000 __ram_rodata_start
080103f4 g     F .text	00000024 clearLED
08013e18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08015af4 g     F .text	000000c4 alt_get_fd
080149ac g     F .text	00000158 alt_busy_sleep
08015c88 g     F .text	00000030 memcmp
080129b0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
08013ed8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08018bbc g       *ABS*	00000000 __alt_stack_base
08013f28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080159ec g     F .text	00000108 alt_find_file
08014ca0 g     F .text	000000a4 alt_dev_llist_insert
08012dd8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
08012d40 g     F .text	0000004c alt_avalon_i2c_check_nack
08011d84 g     F .text	000000b8 __sfvwrite_small_dev
08018a9c g       *ABS*	00000000 __bss_start
080105c8 g     F .text	00000300 main
08012d0c g     F .text	00000034 alt_avalon_i2c_master_target_set
08018aa8 g     O .bss	00000004 alt_envp
08013e78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08013b24 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08017738 g     O .rwdata	00000004 alt_errno
08015ce0 g     F .text	00000054 putc
08010928 g     F .text	00000084 .hidden __divsi3
080104dc g     F .text	000000ec printSignedHex1
080160a8 g       *ABS*	00000000 __CTOR_END__
08010b98 g     F .text	00000430 .hidden __mulsf3
080160a8 g       *ABS*	00000000 __flash_rodata_start
080160a8 g       *ABS*	00000000 __DTOR_LIST__
08010330 g     F .text	000000a0 SGTL5000_Reg_Wr
0801216c g     F .text	00000038 alt_irq_init
080157a0 g     F .text	00000084 alt_release_fd
08016290 g     O .rodata	00000100 .hidden __clz_tab
08015c54 g     F .text	00000014 atexit
08010adc g     F .text	000000bc .hidden __gesf2
08011e3c g     F .text	00000058 _write_r
08017718 g     O .rwdata	00000004 _impure_ptr
08018aa0 g     O .bss	00000004 alt_argc
08014da4 g     F .text	00000060 _do_dtors
08012cd4 g     F .text	00000038 alt_avalon_i2c_master_target_get
08012be4 g     F .text	000000f0 alt_avalon_i2c_send_address
08010020 g       .exceptions	00000000 alt_irq_entry
08017724 g     O .rwdata	00000008 alt_fs_list
08010020 g       *ABS*	00000000 __ram_exceptions_start
080103d0 g     F .text	00000024 setLED
08013db0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08014eb4 g     F .text	00000050 alt_ic_isr_register
08012614 g     F .text	0000004c alt_avalon_i2c_disable
08017748 g       *ABS*	00000000 _edata
08018bbc g       *ABS*	00000000 _end
08010230 g       *ABS*	00000000 __ram_exceptions_end
08014350 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08012660 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08014f8c g     F .text	0000008c alt_ic_irq_disable
08015c68 g     F .text	00000020 exit
0801151c g     F .text	000000f0 .hidden __floatunsisf
080109ac g     F .text	00000074 .hidden __modsi3
0801fa00 g       *ABS*	00000000 __alt_data_end
08010020 g     F .exceptions	00000000 alt_exception
08012870 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08012b00 g     F .text	000000e4 alt_avalon_i2c_cmd_write
080108c8 g     F .text	00000060 .hidden __fixunssfsi
08016074 g     F .text	00000034 _exit
08014880 g     F .text	0000012c alt_alarm_start
08010418 g     F .text	000000c4 printSignedHex0
080117b4 g     F .text	0000001c strlen
080153dc g     F .text	0000015c open
08015764 g     F .text	0000003c alt_putchar
08014e94 g     F .text	00000020 alt_icache_flush_all
0801773c g     O .rwdata	00000004 alt_priority_mask
08014f04 g     F .text	00000088 alt_ic_irq_enable
08011d68 g     F .text	0000001c __vfprintf_internal
08017740 g     O .rwdata	00000008 alt_alarm_list
08014d44 g     F .text	00000060 _do_ctors
08014b40 g     F .text	000000d8 close
08013d64 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08011efc g     F .text	00000084 alt_load
08012ffc g     F .text	0000013c alt_avalon_i2c_master_rx



Disassembly of section .entry:

08010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8010000:	00420074 	movhi	at,2049
    ori r1, r1, %lo(_start)
 8010004:	08408c14 	ori	at,at,560
    jmp r1
 8010008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8010020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8010024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8010028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 801002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8010030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8010034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8010038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 801003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8010040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8010044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8010048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 801004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8010050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8010054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8010058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 801005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8010060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8010064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8010068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 801006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8010070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8010074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8010078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 801007c:	10000326 	beq	r2,zero,801008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8010080:	20000226 	beq	r4,zero,801008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8010084:	80100fc0 	call	80100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8010088:	00000706 	br	80100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 801008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8010090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8010094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8010098:	80101d00 	call	80101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 801009c:	1000021e 	bne	r2,zero,80100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80100f8:	ef80083a 	eret

080100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80100fc:	defff904 	addi	sp,sp,-28
 8010100:	dfc00615 	stw	ra,24(sp)
 8010104:	df000515 	stw	fp,20(sp)
 8010108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 801010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8010110:	0005313a 	rdctl	r2,ipending
 8010114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8010118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 801011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8010120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8010124:	00800044 	movi	r2,1
 8010128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 801012c:	e0fffb17 	ldw	r3,-20(fp)
 8010130:	e0bffc17 	ldw	r2,-16(fp)
 8010134:	1884703a 	and	r2,r3,r2
 8010138:	10001426 	beq	r2,zero,801018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 801013c:	008200b4 	movhi	r2,2050
 8010140:	10a2af04 	addi	r2,r2,-30020
 8010144:	e0fffd17 	ldw	r3,-12(fp)
 8010148:	180690fa 	slli	r3,r3,3
 801014c:	10c5883a 	add	r2,r2,r3
 8010150:	10c00017 	ldw	r3,0(r2)
 8010154:	008200b4 	movhi	r2,2050
 8010158:	10a2af04 	addi	r2,r2,-30020
 801015c:	e13ffd17 	ldw	r4,-12(fp)
 8010160:	200890fa 	slli	r4,r4,3
 8010164:	1105883a 	add	r2,r2,r4
 8010168:	10800104 	addi	r2,r2,4
 801016c:	10800017 	ldw	r2,0(r2)
 8010170:	1009883a 	mov	r4,r2
 8010174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8010178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 801017c:	0005313a 	rdctl	r2,ipending
 8010180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8010184:	e0bfff17 	ldw	r2,-4(fp)
 8010188:	00000706 	br	80101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 801018c:	e0bffc17 	ldw	r2,-16(fp)
 8010190:	1085883a 	add	r2,r2,r2
 8010194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8010198:	e0bffd17 	ldw	r2,-12(fp)
 801019c:	10800044 	addi	r2,r2,1
 80101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80101a4:	003fe106 	br	801012c <__alt_data_end+0xffff072c>

    active = alt_irq_pending ();
 80101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80101ac:	e0bffb17 	ldw	r2,-20(fp)
 80101b0:	103fdb1e 	bne	r2,zero,8010120 <__alt_data_end+0xffff0720>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80101b4:	0001883a 	nop
}
 80101b8:	0001883a 	nop
 80101bc:	e037883a 	mov	sp,fp
 80101c0:	dfc00117 	ldw	ra,4(sp)
 80101c4:	df000017 	ldw	fp,0(sp)
 80101c8:	dec00204 	addi	sp,sp,8
 80101cc:	f800283a 	ret

080101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80101d0:	defffb04 	addi	sp,sp,-20
 80101d4:	dfc00415 	stw	ra,16(sp)
 80101d8:	df000315 	stw	fp,12(sp)
 80101dc:	df000304 	addi	fp,sp,12
 80101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80101e4:	00bfffc4 	movi	r2,-1
 80101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80101f0:	d0a4e917 	ldw	r2,-27740(gp)
 80101f4:	10000726 	beq	r2,zero,8010214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80101f8:	d0a4e917 	ldw	r2,-27740(gp)
 80101fc:	e0fffd17 	ldw	r3,-12(fp)
 8010200:	e1bffe17 	ldw	r6,-8(fp)
 8010204:	e17fff17 	ldw	r5,-4(fp)
 8010208:	1809883a 	mov	r4,r3
 801020c:	103ee83a 	callr	r2
 8010210:	00000206 	br	801021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8010214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8010218:	0005883a 	mov	r2,zero
}
 801021c:	e037883a 	mov	sp,fp
 8010220:	dfc00117 	ldw	ra,4(sp)
 8010224:	df000017 	ldw	fp,0(sp)
 8010228:	dec00204 	addi	sp,sp,8
 801022c:	f800283a 	ret

Disassembly of section .text:

08010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8010230:	06c20074 	movhi	sp,2049
    ori sp, sp, %lo(__alt_stack_pointer)
 8010234:	defe8014 	ori	sp,sp,64000
    movhi gp, %hi(_gp)
 8010238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 801023c:	d6bdc514 	ori	gp,gp,63252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8010240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8010244:	10a2a714 	ori	r2,r2,35484

    movhi r3, %hi(__bss_end)
 8010248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 801024c:	18e2ef14 	ori	r3,r3,35772

    beq r2, r3, 1f
 8010250:	10c00326 	beq	r2,r3,8010260 <_start+0x30>

0:
    stw zero, (r2)
 8010254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8010258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 801025c:	10fffd36 	bltu	r2,r3,8010254 <__alt_data_end+0xffff0854>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8010260:	8011efc0 	call	8011efc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8010264:	8011f800 	call	8011f80 <alt_main>

08010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8010268:	003fff06 	br	8010268 <__alt_data_end+0xffff0868>

0801026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 801026c:	defff804 	addi	sp,sp,-32
 8010270:	dfc00715 	stw	ra,28(sp)
 8010274:	df000615 	stw	fp,24(sp)
 8010278:	df000604 	addi	fp,sp,24
 801027c:	e13ffe15 	stw	r4,-8(fp)
 8010280:	2805883a 	mov	r2,r5
 8010284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8010288:	e0bfff0b 	ldhu	r2,-4(fp)
 801028c:	1004d23a 	srli	r2,r2,8
 8010290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 8010294:	e0bfff0b 	ldhu	r2,-4(fp)
 8010298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 801029c:	e13ffd84 	addi	r4,fp,-10
 80102a0:	e0fffd84 	addi	r3,fp,-10
 80102a4:	d8000115 	stw	zero,4(sp)
 80102a8:	00800084 	movi	r2,2
 80102ac:	d8800015 	stw	r2,0(sp)
 80102b0:	200f883a 	mov	r7,r4
 80102b4:	01800084 	movi	r6,2
 80102b8:	180b883a 	mov	r5,r3
 80102bc:	e13ffe17 	ldw	r4,-8(fp)
 80102c0:	80131380 	call	8013138 <alt_avalon_i2c_master_tx_rx>
 80102c4:	e0bffc15 	stw	r2,-16(fp)
	printf("%d\n",status);
 80102c8:	e17ffc17 	ldw	r5,-16(fp)
 80102cc:	01020074 	movhi	r4,2049
 80102d0:	21182a04 	addi	r4,r4,24744
 80102d4:	80116d40 	call	80116d4 <printf>
	if (status != ALT_AVALON_I2C_SUCCESS){
 80102d8:	e0bffc17 	ldw	r2,-16(fp)
 80102dc:	10000626 	beq	r2,zero,80102f8 <SGTL5000_Reg_Rd+0x8c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 80102e0:	e0bfff0b 	ldhu	r2,-4(fp)
 80102e4:	100b883a 	mov	r5,r2
 80102e8:	01020074 	movhi	r4,2049
 80102ec:	21182b04 	addi	r4,r4,24748
 80102f0:	80116d40 	call	80116d4 <printf>
		while (1)
		{
			//hang here
		}
 80102f4:	003fff06 	br	80102f4 <__alt_data_end+0xffff08f4>
	}
	value = (buffer[0] << 8) | buffer[1];
 80102f8:	e0bffd83 	ldbu	r2,-10(fp)
 80102fc:	10803fcc 	andi	r2,r2,255
 8010300:	1004923a 	slli	r2,r2,8
 8010304:	1007883a 	mov	r3,r2
 8010308:	e0bffdc3 	ldbu	r2,-9(fp)
 801030c:	10803fcc 	andi	r2,r2,255
 8010310:	1884b03a 	or	r2,r3,r2
 8010314:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 8010318:	e0bffd0b 	ldhu	r2,-12(fp)
}
 801031c:	e037883a 	mov	sp,fp
 8010320:	dfc00117 	ldw	ra,4(sp)
 8010324:	df000017 	ldw	fp,0(sp)
 8010328:	dec00204 	addi	sp,sp,8
 801032c:	f800283a 	ret

08010330 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 8010330:	defff904 	addi	sp,sp,-28
 8010334:	dfc00615 	stw	ra,24(sp)
 8010338:	df000515 	stw	fp,20(sp)
 801033c:	df000504 	addi	fp,sp,20
 8010340:	e13ffd15 	stw	r4,-12(fp)
 8010344:	2807883a 	mov	r3,r5
 8010348:	3005883a 	mov	r2,r6
 801034c:	e0fffe0d 	sth	r3,-8(fp)
 8010350:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8010354:	e0bffe0b 	ldhu	r2,-8(fp)
 8010358:	1004d23a 	srli	r2,r2,8
 801035c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 8010360:	e0bffe0b 	ldhu	r2,-8(fp)
 8010364:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 8010368:	e0bfff0b 	ldhu	r2,-4(fp)
 801036c:	1004d23a 	srli	r2,r2,8
 8010370:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 8010374:	e0bfff0b 	ldhu	r2,-4(fp)
 8010378:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 801037c:	e0bffc04 	addi	r2,fp,-16
 8010380:	000f883a 	mov	r7,zero
 8010384:	01800104 	movi	r6,4
 8010388:	100b883a 	mov	r5,r2
 801038c:	e13ffd17 	ldw	r4,-12(fp)
 8010390:	8012f140 	call	8012f14 <alt_avalon_i2c_master_tx>
 8010394:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8010398:	e0bffb17 	ldw	r2,-20(fp)
 801039c:	10000626 	beq	r2,zero,80103b8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 80103a0:	e0bffe0b 	ldhu	r2,-8(fp)
 80103a4:	100b883a 	mov	r5,r2
 80103a8:	01020074 	movhi	r4,2049
 80103ac:	21182b04 	addi	r4,r4,24748
 80103b0:	80116d40 	call	80116d4 <printf>
		while (1)
		{
			//hang here
		}
 80103b4:	003fff06 	br	80103b4 <__alt_data_end+0xffff09b4>
	}
	return DATA;
 80103b8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80103bc:	e037883a 	mov	sp,fp
 80103c0:	dfc00117 	ldw	ra,4(sp)
 80103c4:	df000017 	ldw	fp,0(sp)
 80103c8:	dec00204 	addi	sp,sp,8
 80103cc:	f800283a 	ret

080103d0 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
 80103d0:	defffe04 	addi	sp,sp,-8
 80103d4:	df000115 	stw	fp,4(sp)
 80103d8:	df000104 	addi	fp,sp,4
 80103dc:	e13fff15 	stw	r4,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 80103e0:	0001883a 	nop
 80103e4:	e037883a 	mov	sp,fp
 80103e8:	df000017 	ldw	fp,0(sp)
 80103ec:	dec00104 	addi	sp,sp,4
 80103f0:	f800283a 	ret

080103f4 <clearLED>:

void clearLED(int LED)
{
 80103f4:	defffe04 	addi	sp,sp,-8
 80103f8:	df000115 	stw	fp,4(sp)
 80103fc:	df000104 	addi	fp,sp,4
 8010400:	e13fff15 	stw	r4,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 8010404:	0001883a 	nop
 8010408:	e037883a 	mov	sp,fp
 801040c:	df000017 	ldw	fp,0(sp)
 8010410:	dec00104 	addi	sp,sp,4
 8010414:	f800283a 	ret

08010418 <printSignedHex0>:

void printSignedHex0(signed char value)
{
 8010418:	defffc04 	addi	sp,sp,-16
 801041c:	dfc00315 	stw	ra,12(sp)
 8010420:	df000215 	stw	fp,8(sp)
 8010424:	df000204 	addi	fp,sp,8
 8010428:	2005883a 	mov	r2,r4
 801042c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8010430:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 8010434:	e03ffe45 	stb	zero,-7(fp)
	//WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0)
 8010438:	e0bfff07 	ldb	r2,-4(fp)
 801043c:	1000060e 	bge	r2,zero,8010458 <printSignedHex0+0x40>
	{
		setLED(11);
 8010440:	010002c4 	movi	r4,11
 8010444:	80103d00 	call	80103d0 <setLED>
		value = -value;
 8010448:	e0bfff03 	ldbu	r2,-4(fp)
 801044c:	0085c83a 	sub	r2,zero,r2
 8010450:	e0bfff05 	stb	r2,-4(fp)
 8010454:	00000206 	br	8010460 <printSignedHex0+0x48>
	}
	else
	{
		clearLED(11);
 8010458:	010002c4 	movi	r4,11
 801045c:	80103f40 	call	80103f4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8010460:	e0bfff03 	ldbu	r2,-4(fp)
 8010464:	108018c4 	addi	r2,r2,99
 8010468:	10803fcc 	andi	r2,r2,255
 801046c:	108031f0 	cmpltui	r2,r2,199
 8010470:	1000031e 	bne	r2,zero,8010480 <printSignedHex0+0x68>
		setLED(13);
 8010474:	01000344 	movi	r4,13
 8010478:	80103d00 	call	80103d0 <setLED>
 801047c:	00000206 	br	8010488 <printSignedHex0+0x70>
	else
		clearLED(13);
 8010480:	01000344 	movi	r4,13
 8010484:	80103f40 	call	80103f4 <clearLED>

	value = value % 100;
 8010488:	e0bfff07 	ldb	r2,-4(fp)
 801048c:	01401904 	movi	r5,100
 8010490:	1009883a 	mov	r4,r2
 8010494:	80109ac0 	call	80109ac <__modsi3>
 8010498:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 801049c:	e0bfff07 	ldb	r2,-4(fp)
 80104a0:	01400284 	movi	r5,10
 80104a4:	1009883a 	mov	r4,r2
 80104a8:	80109280 	call	8010928 <__divsi3>
 80104ac:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 80104b0:	e0bfff07 	ldb	r2,-4(fp)
 80104b4:	01400284 	movi	r5,10
 80104b8:	1009883a 	mov	r4,r2
 80104bc:	80109ac0 	call	80109ac <__modsi3>
 80104c0:	e0bffe45 	stb	r2,-7(fp)
	//pio_val &= 0x00FF;
	//pio_val |= (tens << 12);
	//pio_val |= (ones << 8);

	//IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}
 80104c4:	0001883a 	nop
 80104c8:	e037883a 	mov	sp,fp
 80104cc:	dfc00117 	ldw	ra,4(sp)
 80104d0:	df000017 	ldw	fp,0(sp)
 80104d4:	dec00204 	addi	sp,sp,8
 80104d8:	f800283a 	ret

080104dc <printSignedHex1>:

void printSignedHex1(signed char value)
{
 80104dc:	defffc04 	addi	sp,sp,-16
 80104e0:	dfc00315 	stw	ra,12(sp)
 80104e4:	df000215 	stw	fp,8(sp)
 80104e8:	df000204 	addi	fp,sp,8
 80104ec:	2005883a 	mov	r2,r4
 80104f0:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 80104f4:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 80104f8:	e03ffe45 	stb	zero,-7(fp)
	//DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0)
 80104fc:	e0bfff07 	ldb	r2,-4(fp)
 8010500:	1000060e 	bge	r2,zero,801051c <printSignedHex1+0x40>
	{
		setLED(10);
 8010504:	01000284 	movi	r4,10
 8010508:	80103d00 	call	80103d0 <setLED>
		value = -value;
 801050c:	e0bfff03 	ldbu	r2,-4(fp)
 8010510:	0085c83a 	sub	r2,zero,r2
 8010514:	e0bfff05 	stb	r2,-4(fp)
 8010518:	00000206 	br	8010524 <printSignedHex1+0x48>
	}
	else
	{
		clearLED(10);
 801051c:	01000284 	movi	r4,10
 8010520:	80103f40 	call	80103f4 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8010524:	e0bfff03 	ldbu	r2,-4(fp)
 8010528:	108018c4 	addi	r2,r2,99
 801052c:	10803fcc 	andi	r2,r2,255
 8010530:	108031f0 	cmpltui	r2,r2,199
 8010534:	1000031e 	bne	r2,zero,8010544 <printSignedHex1+0x68>
		setLED(12);
 8010538:	01000304 	movi	r4,12
 801053c:	80103d00 	call	80103d0 <setLED>
 8010540:	00000206 	br	801054c <printSignedHex1+0x70>
	else
		clearLED(12);
 8010544:	01000304 	movi	r4,12
 8010548:	80103f40 	call	80103f4 <clearLED>

	value = value % 100;
 801054c:	e0bfff07 	ldb	r2,-4(fp)
 8010550:	01401904 	movi	r5,100
 8010554:	1009883a 	mov	r4,r2
 8010558:	80109ac0 	call	80109ac <__modsi3>
 801055c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8010560:	e0bfff07 	ldb	r2,-4(fp)
 8010564:	01400284 	movi	r5,10
 8010568:	1009883a 	mov	r4,r2
 801056c:	80109280 	call	8010928 <__divsi3>
 8010570:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 8010574:	e0bfff07 	ldb	r2,-4(fp)
 8010578:	01400284 	movi	r5,10
 801057c:	1009883a 	mov	r4,r2
 8010580:	80109ac0 	call	80109ac <__modsi3>
 8010584:	e0bffe45 	stb	r2,-7(fp)
	tens = value / 10;
 8010588:	e0bfff07 	ldb	r2,-4(fp)
 801058c:	01400284 	movi	r5,10
 8010590:	1009883a 	mov	r4,r2
 8010594:	80109280 	call	8010928 <__divsi3>
 8010598:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 801059c:	e0bfff07 	ldb	r2,-4(fp)
 80105a0:	01400284 	movi	r5,10
 80105a4:	1009883a 	mov	r4,r2
 80105a8:	80109ac0 	call	80109ac <__modsi3>
 80105ac:	e0bffe45 	stb	r2,-7(fp)
	//pio_val &= 0xFF00;
	//pio_val |= (tens << 4);
	//pio_val |= (ones << 0);

	//IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}
 80105b0:	0001883a 	nop
 80105b4:	e037883a 	mov	sp,fp
 80105b8:	dfc00117 	ldw	ra,4(sp)
 80105bc:	df000017 	ldw	fp,0(sp)
 80105c0:	dec00204 	addi	sp,sp,8
 80105c4:	f800283a 	ret

080105c8 <main>:


int main()
{
 80105c8:	defffc04 	addi	sp,sp,-16
 80105cc:	dfc00315 	stw	ra,12(sp)
 80105d0:	df000215 	stw	fp,8(sp)
 80105d4:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 80105d8:	01020074 	movhi	r4,2049
 80105dc:	21183304 	addi	r4,r4,24780
 80105e0:	801253c0 	call	801253c <alt_avalon_i2c_open>
 80105e4:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 80105e8:	e0bffe17 	ldw	r2,-8(fp)
 80105ec:	1000051e 	bne	r2,zero,8010604 <main+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 80105f0:	01020074 	movhi	r4,2049
 80105f4:	21183604 	addi	r4,r4,24792
 80105f8:	80117a00 	call	80117a0 <puts>
		return 1;
 80105fc:	00800044 	movi	r2,1
 8010600:	0000ac06 	br	80108b4 <main+0x2ec>
	}
	printf ("I2C Test Program\n");
 8010604:	01020074 	movhi	r4,2049
 8010608:	21183e04 	addi	r4,r4,24824
 801060c:	80117a00 	call	80117a0 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 8010610:	01400284 	movi	r5,10
 8010614:	e13ffe17 	ldw	r4,-8(fp)
 8010618:	8012d0c0 	call	8012d0c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 801061c:	000b883a 	mov	r5,zero
 8010620:	e13ffe17 	ldw	r4,-8(fp)
 8010624:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 8010628:	10bfffcc 	andi	r2,r2,65535
 801062c:	100b883a 	mov	r5,r2
 8010630:	01020074 	movhi	r4,2049
 8010634:	21184304 	addi	r4,r4,24844
 8010638:	80116d40 	call	80116d4 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 801063c:	00800384 	movi	r2,14
 8010640:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 8010644:	e0bfff03 	ldbu	r2,-4(fp)
 8010648:	1009883a 	mov	r4,r2
 801064c:	801151c0 	call	801151c <__floatunsisf>
 8010650:	1007883a 	mov	r3,r2
 8010654:	180b883a 	mov	r5,r3
 8010658:	011059f4 	movhi	r4,16743
 801065c:	210d8144 	addi	r4,r4,13829
 8010660:	8010fc80 	call	8010fc8 <__subsf3>
 8010664:	1007883a 	mov	r3,r2
 8010668:	1805883a 	mov	r2,r3
 801066c:	01514034 	movhi	r5,17664
 8010670:	1009883a 	mov	r4,r2
 8010674:	8010b980 	call	8010b98 <__mulsf3>
 8010678:	1007883a 	mov	r3,r2
 801067c:	1805883a 	mov	r2,r3
 8010680:	1009883a 	mov	r4,r2
 8010684:	80108c80 	call	80108c8 <__fixunssfsi>
 8010688:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 801068c:	e0bfff03 	ldbu	r2,-4(fp)
 8010690:	e0ffff8b 	ldhu	r3,-2(fp)
 8010694:	180d883a 	mov	r6,r3
 8010698:	100b883a 	mov	r5,r2
 801069c:	01020074 	movhi	r4,2049
 80106a0:	21184904 	addi	r4,r4,24868
 80106a4:	80116d40 	call	80116d4 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 80106a8:	e0bfff03 	ldbu	r2,-4(fp)
 80106ac:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 80106b0:	1007883a 	mov	r3,r2
 80106b4:	e0bfff8b 	ldhu	r2,-2(fp)
 80106b8:	1884b03a 	or	r2,r3,r2
 80106bc:	10bfffcc 	andi	r2,r2,65535
 80106c0:	100d883a 	mov	r6,r2
 80106c4:	01400c84 	movi	r5,50
 80106c8:	e13ffe17 	ldw	r4,-8(fp)
 80106cc:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 80106d0:	01400c84 	movi	r5,50
 80106d4:	e13ffe17 	ldw	r4,-8(fp)
 80106d8:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 80106dc:	10bfffcc 	andi	r2,r2,65535
 80106e0:	100b883a 	mov	r5,r2
 80106e4:	01020074 	movhi	r4,2049
 80106e8:	21185a04 	addi	r4,r4,24936
 80106ec:	80116d40 	call	80116d4 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 80106f0:	01917f84 	movi	r6,17918
 80106f4:	01400c04 	movi	r5,48
 80106f8:	e13ffe17 	ldw	r4,-8(fp)
 80106fc:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 8010700:	01400c04 	movi	r5,48
 8010704:	e13ffe17 	ldw	r4,-8(fp)
 8010708:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801070c:	10bfffcc 	andi	r2,r2,65535
 8010710:	100b883a 	mov	r5,r2
 8010714:	01020074 	movhi	r4,2049
 8010718:	21186104 	addi	r4,r4,24964
 801071c:	80116d40 	call	80116d4 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 8010720:	01801384 	movi	r6,78
 8010724:	01400a04 	movi	r5,40
 8010728:	e13ffe17 	ldw	r4,-8(fp)
 801072c:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 8010730:	01400a04 	movi	r5,40
 8010734:	e13ffe17 	ldw	r4,-8(fp)
 8010738:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801073c:	10bfffcc 	andi	r2,r2,65535
 8010740:	100b883a 	mov	r5,r2
 8010744:	01020074 	movhi	r4,2049
 8010748:	21186904 	addi	r4,r4,24996
 801074c:	80116d40 	call	80116d4 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 8010750:	018018c4 	movi	r6,99
 8010754:	01400084 	movi	r5,2
 8010758:	e13ffe17 	ldw	r4,-8(fp)
 801075c:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 8010760:	01400084 	movi	r5,2
 8010764:	e13ffe17 	ldw	r4,-8(fp)
 8010768:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801076c:	10bfffcc 	andi	r2,r2,65535
 8010770:	100b883a 	mov	r5,r2
 8010774:	01020074 	movhi	r4,2049
 8010778:	21187004 	addi	r4,r4,25024
 801077c:	80116d40 	call	80116d4 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 8010780:	018001c4 	movi	r6,7
 8010784:	01400104 	movi	r5,4
 8010788:	e13ffe17 	ldw	r4,-8(fp)
 801078c:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 8010790:	01400104 	movi	r5,4
 8010794:	e13ffe17 	ldw	r4,-8(fp)
 8010798:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801079c:	10bfffcc 	andi	r2,r2,65535
 80107a0:	100b883a 	mov	r5,r2
 80107a4:	01020074 	movhi	r4,2049
 80107a8:	21187804 	addi	r4,r4,25056
 80107ac:	80116d40 	call	80116d4 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 80107b0:	01802004 	movi	r6,128
 80107b4:	01400184 	movi	r5,6
 80107b8:	e13ffe17 	ldw	r4,-8(fp)
 80107bc:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 80107c0:	01400184 	movi	r5,6
 80107c4:	e13ffe17 	ldw	r4,-8(fp)
 80107c8:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 80107cc:	10bfffcc 	andi	r2,r2,65535
 80107d0:	100b883a 	mov	r5,r2
 80107d4:	01020074 	movhi	r4,2049
 80107d8:	21187f04 	addi	r4,r4,25084
 80107dc:	80116d40 	call	80116d4 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 80107e0:	01800104 	movi	r6,4
 80107e4:	01400904 	movi	r5,36
 80107e8:	e13ffe17 	ldw	r4,-8(fp)
 80107ec:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 80107f0:	01400904 	movi	r5,36
 80107f4:	e13ffe17 	ldw	r4,-8(fp)
 80107f8:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 80107fc:	10bfffcc 	andi	r2,r2,65535
 8010800:	100b883a 	mov	r5,r2
 8010804:	01020074 	movhi	r4,2049
 8010808:	21188604 	addi	r4,r4,25112
 801080c:	80116d40 	call	80116d4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 8010810:	01800404 	movi	r6,16
 8010814:	01400284 	movi	r5,10
 8010818:	e13ffe17 	ldw	r4,-8(fp)
 801081c:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8010820:	01400284 	movi	r5,10
 8010824:	e13ffe17 	ldw	r4,-8(fp)
 8010828:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801082c:	10bfffcc 	andi	r2,r2,65535
 8010830:	100b883a 	mov	r5,r2
 8010834:	01020074 	movhi	r4,2049
 8010838:	21188d04 	addi	r4,r4,25140
 801083c:	80116d40 	call	80116d4 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8010840:	01400904 	movi	r5,36
 8010844:	e13ffe17 	ldw	r4,-8(fp)
 8010848:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801084c:	10bfffcc 	andi	r2,r2,65535
 8010850:	100b883a 	mov	r5,r2
 8010854:	01020074 	movhi	r4,2049
 8010858:	21188604 	addi	r4,r4,25112
 801085c:	80116d40 	call	80116d4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8010860:	000d883a 	mov	r6,zero
 8010864:	01400384 	movi	r5,14
 8010868:	e13ffe17 	ldw	r4,-8(fp)
 801086c:	80103300 	call	8010330 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8010870:	01400384 	movi	r5,14
 8010874:	e13ffe17 	ldw	r4,-8(fp)
 8010878:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801087c:	10bfffcc 	andi	r2,r2,65535
 8010880:	100b883a 	mov	r5,r2
 8010884:	01020074 	movhi	r4,2049
 8010888:	21189404 	addi	r4,r4,25168
 801088c:	80116d40 	call	80116d4 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8010890:	01400504 	movi	r5,20
 8010894:	e13ffe17 	ldw	r4,-8(fp)
 8010898:	801026c0 	call	801026c <SGTL5000_Reg_Rd>
 801089c:	10bfffcc 	andi	r2,r2,65535
 80108a0:	100b883a 	mov	r5,r2
 80108a4:	01020074 	movhi	r4,2049
 80108a8:	21189c04 	addi	r4,r4,25200
 80108ac:	80116d40 	call	80116d4 <printf>


	return 0;
 80108b0:	0005883a 	mov	r2,zero
}
 80108b4:	e037883a 	mov	sp,fp
 80108b8:	dfc00117 	ldw	ra,4(sp)
 80108bc:	df000017 	ldw	fp,0(sp)
 80108c0:	dec00204 	addi	sp,sp,8
 80108c4:	f800283a 	ret

080108c8 <__fixunssfsi>:
 80108c8:	defffd04 	addi	sp,sp,-12
 80108cc:	dc000015 	stw	r16,0(sp)
 80108d0:	0413c034 	movhi	r16,20224
 80108d4:	800b883a 	mov	r5,r16
 80108d8:	dc400115 	stw	r17,4(sp)
 80108dc:	dfc00215 	stw	ra,8(sp)
 80108e0:	2023883a 	mov	r17,r4
 80108e4:	8010adc0 	call	8010adc <__gesf2>
 80108e8:	1000070e 	bge	r2,zero,8010908 <__fixunssfsi+0x40>
 80108ec:	8809883a 	mov	r4,r17
 80108f0:	80114ac0 	call	80114ac <__fixsfsi>
 80108f4:	dfc00217 	ldw	ra,8(sp)
 80108f8:	dc400117 	ldw	r17,4(sp)
 80108fc:	dc000017 	ldw	r16,0(sp)
 8010900:	dec00304 	addi	sp,sp,12
 8010904:	f800283a 	ret
 8010908:	800b883a 	mov	r5,r16
 801090c:	8809883a 	mov	r4,r17
 8010910:	8010fc80 	call	8010fc8 <__subsf3>
 8010914:	1009883a 	mov	r4,r2
 8010918:	80114ac0 	call	80114ac <__fixsfsi>
 801091c:	00e00034 	movhi	r3,32768
 8010920:	10c5883a 	add	r2,r2,r3
 8010924:	003ff306 	br	80108f4 <__alt_data_end+0xffff0ef4>

08010928 <__divsi3>:
 8010928:	20001b16 	blt	r4,zero,8010998 <__divsi3+0x70>
 801092c:	000f883a 	mov	r7,zero
 8010930:	28001616 	blt	r5,zero,801098c <__divsi3+0x64>
 8010934:	200d883a 	mov	r6,r4
 8010938:	29001a2e 	bgeu	r5,r4,80109a4 <__divsi3+0x7c>
 801093c:	00800804 	movi	r2,32
 8010940:	00c00044 	movi	r3,1
 8010944:	00000106 	br	801094c <__divsi3+0x24>
 8010948:	10000d26 	beq	r2,zero,8010980 <__divsi3+0x58>
 801094c:	294b883a 	add	r5,r5,r5
 8010950:	10bfffc4 	addi	r2,r2,-1
 8010954:	18c7883a 	add	r3,r3,r3
 8010958:	293ffb36 	bltu	r5,r4,8010948 <__alt_data_end+0xffff0f48>
 801095c:	0005883a 	mov	r2,zero
 8010960:	18000726 	beq	r3,zero,8010980 <__divsi3+0x58>
 8010964:	0005883a 	mov	r2,zero
 8010968:	31400236 	bltu	r6,r5,8010974 <__divsi3+0x4c>
 801096c:	314dc83a 	sub	r6,r6,r5
 8010970:	10c4b03a 	or	r2,r2,r3
 8010974:	1806d07a 	srli	r3,r3,1
 8010978:	280ad07a 	srli	r5,r5,1
 801097c:	183ffa1e 	bne	r3,zero,8010968 <__alt_data_end+0xffff0f68>
 8010980:	38000126 	beq	r7,zero,8010988 <__divsi3+0x60>
 8010984:	0085c83a 	sub	r2,zero,r2
 8010988:	f800283a 	ret
 801098c:	014bc83a 	sub	r5,zero,r5
 8010990:	39c0005c 	xori	r7,r7,1
 8010994:	003fe706 	br	8010934 <__alt_data_end+0xffff0f34>
 8010998:	0109c83a 	sub	r4,zero,r4
 801099c:	01c00044 	movi	r7,1
 80109a0:	003fe306 	br	8010930 <__alt_data_end+0xffff0f30>
 80109a4:	00c00044 	movi	r3,1
 80109a8:	003fee06 	br	8010964 <__alt_data_end+0xffff0f64>

080109ac <__modsi3>:
 80109ac:	20001716 	blt	r4,zero,8010a0c <__modsi3+0x60>
 80109b0:	000f883a 	mov	r7,zero
 80109b4:	2005883a 	mov	r2,r4
 80109b8:	28001216 	blt	r5,zero,8010a04 <__modsi3+0x58>
 80109bc:	2900162e 	bgeu	r5,r4,8010a18 <__modsi3+0x6c>
 80109c0:	01800804 	movi	r6,32
 80109c4:	00c00044 	movi	r3,1
 80109c8:	00000106 	br	80109d0 <__modsi3+0x24>
 80109cc:	30000a26 	beq	r6,zero,80109f8 <__modsi3+0x4c>
 80109d0:	294b883a 	add	r5,r5,r5
 80109d4:	31bfffc4 	addi	r6,r6,-1
 80109d8:	18c7883a 	add	r3,r3,r3
 80109dc:	293ffb36 	bltu	r5,r4,80109cc <__alt_data_end+0xffff0fcc>
 80109e0:	18000526 	beq	r3,zero,80109f8 <__modsi3+0x4c>
 80109e4:	1806d07a 	srli	r3,r3,1
 80109e8:	11400136 	bltu	r2,r5,80109f0 <__modsi3+0x44>
 80109ec:	1145c83a 	sub	r2,r2,r5
 80109f0:	280ad07a 	srli	r5,r5,1
 80109f4:	183ffb1e 	bne	r3,zero,80109e4 <__alt_data_end+0xffff0fe4>
 80109f8:	38000126 	beq	r7,zero,8010a00 <__modsi3+0x54>
 80109fc:	0085c83a 	sub	r2,zero,r2
 8010a00:	f800283a 	ret
 8010a04:	014bc83a 	sub	r5,zero,r5
 8010a08:	003fec06 	br	80109bc <__alt_data_end+0xffff0fbc>
 8010a0c:	0109c83a 	sub	r4,zero,r4
 8010a10:	01c00044 	movi	r7,1
 8010a14:	003fe706 	br	80109b4 <__alt_data_end+0xffff0fb4>
 8010a18:	00c00044 	movi	r3,1
 8010a1c:	003ff106 	br	80109e4 <__alt_data_end+0xffff0fe4>

08010a20 <__udivsi3>:
 8010a20:	200d883a 	mov	r6,r4
 8010a24:	2900152e 	bgeu	r5,r4,8010a7c <__udivsi3+0x5c>
 8010a28:	28001416 	blt	r5,zero,8010a7c <__udivsi3+0x5c>
 8010a2c:	00800804 	movi	r2,32
 8010a30:	00c00044 	movi	r3,1
 8010a34:	00000206 	br	8010a40 <__udivsi3+0x20>
 8010a38:	10000e26 	beq	r2,zero,8010a74 <__udivsi3+0x54>
 8010a3c:	28000516 	blt	r5,zero,8010a54 <__udivsi3+0x34>
 8010a40:	294b883a 	add	r5,r5,r5
 8010a44:	10bfffc4 	addi	r2,r2,-1
 8010a48:	18c7883a 	add	r3,r3,r3
 8010a4c:	293ffa36 	bltu	r5,r4,8010a38 <__alt_data_end+0xffff1038>
 8010a50:	18000826 	beq	r3,zero,8010a74 <__udivsi3+0x54>
 8010a54:	0005883a 	mov	r2,zero
 8010a58:	31400236 	bltu	r6,r5,8010a64 <__udivsi3+0x44>
 8010a5c:	314dc83a 	sub	r6,r6,r5
 8010a60:	10c4b03a 	or	r2,r2,r3
 8010a64:	1806d07a 	srli	r3,r3,1
 8010a68:	280ad07a 	srli	r5,r5,1
 8010a6c:	183ffa1e 	bne	r3,zero,8010a58 <__alt_data_end+0xffff1058>
 8010a70:	f800283a 	ret
 8010a74:	0005883a 	mov	r2,zero
 8010a78:	f800283a 	ret
 8010a7c:	00c00044 	movi	r3,1
 8010a80:	003ff406 	br	8010a54 <__alt_data_end+0xffff1054>

08010a84 <__umodsi3>:
 8010a84:	2005883a 	mov	r2,r4
 8010a88:	2900122e 	bgeu	r5,r4,8010ad4 <__umodsi3+0x50>
 8010a8c:	28001116 	blt	r5,zero,8010ad4 <__umodsi3+0x50>
 8010a90:	01800804 	movi	r6,32
 8010a94:	00c00044 	movi	r3,1
 8010a98:	00000206 	br	8010aa4 <__umodsi3+0x20>
 8010a9c:	30000c26 	beq	r6,zero,8010ad0 <__umodsi3+0x4c>
 8010aa0:	28000516 	blt	r5,zero,8010ab8 <__umodsi3+0x34>
 8010aa4:	294b883a 	add	r5,r5,r5
 8010aa8:	31bfffc4 	addi	r6,r6,-1
 8010aac:	18c7883a 	add	r3,r3,r3
 8010ab0:	293ffa36 	bltu	r5,r4,8010a9c <__alt_data_end+0xffff109c>
 8010ab4:	18000626 	beq	r3,zero,8010ad0 <__umodsi3+0x4c>
 8010ab8:	1806d07a 	srli	r3,r3,1
 8010abc:	11400136 	bltu	r2,r5,8010ac4 <__umodsi3+0x40>
 8010ac0:	1145c83a 	sub	r2,r2,r5
 8010ac4:	280ad07a 	srli	r5,r5,1
 8010ac8:	183ffb1e 	bne	r3,zero,8010ab8 <__alt_data_end+0xffff10b8>
 8010acc:	f800283a 	ret
 8010ad0:	f800283a 	ret
 8010ad4:	00c00044 	movi	r3,1
 8010ad8:	003ff706 	br	8010ab8 <__alt_data_end+0xffff10b8>

08010adc <__gesf2>:
 8010adc:	2004d5fa 	srli	r2,r4,23
 8010ae0:	2806d5fa 	srli	r3,r5,23
 8010ae4:	01802034 	movhi	r6,128
 8010ae8:	31bfffc4 	addi	r6,r6,-1
 8010aec:	10803fcc 	andi	r2,r2,255
 8010af0:	01c03fc4 	movi	r7,255
 8010af4:	3110703a 	and	r8,r6,r4
 8010af8:	18c03fcc 	andi	r3,r3,255
 8010afc:	314c703a 	and	r6,r6,r5
 8010b00:	2008d7fa 	srli	r4,r4,31
 8010b04:	280ad7fa 	srli	r5,r5,31
 8010b08:	11c01926 	beq	r2,r7,8010b70 <__gesf2+0x94>
 8010b0c:	01c03fc4 	movi	r7,255
 8010b10:	19c00f26 	beq	r3,r7,8010b50 <__gesf2+0x74>
 8010b14:	1000061e 	bne	r2,zero,8010b30 <__gesf2+0x54>
 8010b18:	400f003a 	cmpeq	r7,r8,zero
 8010b1c:	1800071e 	bne	r3,zero,8010b3c <__gesf2+0x60>
 8010b20:	3000061e 	bne	r6,zero,8010b3c <__gesf2+0x60>
 8010b24:	0005883a 	mov	r2,zero
 8010b28:	40000e1e 	bne	r8,zero,8010b64 <__gesf2+0x88>
 8010b2c:	f800283a 	ret
 8010b30:	18000a1e 	bne	r3,zero,8010b5c <__gesf2+0x80>
 8010b34:	30000b26 	beq	r6,zero,8010b64 <__gesf2+0x88>
 8010b38:	000f883a 	mov	r7,zero
 8010b3c:	29403fcc 	andi	r5,r5,255
 8010b40:	38000726 	beq	r7,zero,8010b60 <__gesf2+0x84>
 8010b44:	28000826 	beq	r5,zero,8010b68 <__gesf2+0x8c>
 8010b48:	00800044 	movi	r2,1
 8010b4c:	f800283a 	ret
 8010b50:	303ff026 	beq	r6,zero,8010b14 <__alt_data_end+0xffff1114>
 8010b54:	00bfff84 	movi	r2,-2
 8010b58:	f800283a 	ret
 8010b5c:	29403fcc 	andi	r5,r5,255
 8010b60:	21400526 	beq	r4,r5,8010b78 <__gesf2+0x9c>
 8010b64:	203ff826 	beq	r4,zero,8010b48 <__alt_data_end+0xffff1148>
 8010b68:	00bfffc4 	movi	r2,-1
 8010b6c:	f800283a 	ret
 8010b70:	403fe626 	beq	r8,zero,8010b0c <__alt_data_end+0xffff110c>
 8010b74:	003ff706 	br	8010b54 <__alt_data_end+0xffff1154>
 8010b78:	18bffa16 	blt	r3,r2,8010b64 <__alt_data_end+0xffff1164>
 8010b7c:	10c00216 	blt	r2,r3,8010b88 <__gesf2+0xac>
 8010b80:	323ff836 	bltu	r6,r8,8010b64 <__alt_data_end+0xffff1164>
 8010b84:	4180022e 	bgeu	r8,r6,8010b90 <__gesf2+0xb4>
 8010b88:	203fef1e 	bne	r4,zero,8010b48 <__alt_data_end+0xffff1148>
 8010b8c:	003ff606 	br	8010b68 <__alt_data_end+0xffff1168>
 8010b90:	0005883a 	mov	r2,zero
 8010b94:	f800283a 	ret

08010b98 <__mulsf3>:
 8010b98:	defff504 	addi	sp,sp,-44
 8010b9c:	dc000115 	stw	r16,4(sp)
 8010ba0:	2020d5fa 	srli	r16,r4,23
 8010ba4:	dd400615 	stw	r21,24(sp)
 8010ba8:	202ad7fa 	srli	r21,r4,31
 8010bac:	dc800315 	stw	r18,12(sp)
 8010bb0:	04802034 	movhi	r18,128
 8010bb4:	df000915 	stw	fp,36(sp)
 8010bb8:	dd000515 	stw	r20,20(sp)
 8010bbc:	94bfffc4 	addi	r18,r18,-1
 8010bc0:	dfc00a15 	stw	ra,40(sp)
 8010bc4:	ddc00815 	stw	r23,32(sp)
 8010bc8:	dd800715 	stw	r22,28(sp)
 8010bcc:	dcc00415 	stw	r19,16(sp)
 8010bd0:	dc400215 	stw	r17,8(sp)
 8010bd4:	84003fcc 	andi	r16,r16,255
 8010bd8:	9124703a 	and	r18,r18,r4
 8010bdc:	a829883a 	mov	r20,r21
 8010be0:	af003fcc 	andi	fp,r21,255
 8010be4:	80005426 	beq	r16,zero,8010d38 <__mulsf3+0x1a0>
 8010be8:	00803fc4 	movi	r2,255
 8010bec:	80802f26 	beq	r16,r2,8010cac <__mulsf3+0x114>
 8010bf0:	91002034 	orhi	r4,r18,128
 8010bf4:	202490fa 	slli	r18,r4,3
 8010bf8:	843fe044 	addi	r16,r16,-127
 8010bfc:	0023883a 	mov	r17,zero
 8010c00:	002f883a 	mov	r23,zero
 8010c04:	2804d5fa 	srli	r2,r5,23
 8010c08:	282cd7fa 	srli	r22,r5,31
 8010c0c:	01002034 	movhi	r4,128
 8010c10:	213fffc4 	addi	r4,r4,-1
 8010c14:	10803fcc 	andi	r2,r2,255
 8010c18:	2166703a 	and	r19,r4,r5
 8010c1c:	b1803fcc 	andi	r6,r22,255
 8010c20:	10004c26 	beq	r2,zero,8010d54 <__mulsf3+0x1bc>
 8010c24:	00c03fc4 	movi	r3,255
 8010c28:	10c04726 	beq	r2,r3,8010d48 <__mulsf3+0x1b0>
 8010c2c:	99002034 	orhi	r4,r19,128
 8010c30:	202690fa 	slli	r19,r4,3
 8010c34:	10bfe044 	addi	r2,r2,-127
 8010c38:	0007883a 	mov	r3,zero
 8010c3c:	80a1883a 	add	r16,r16,r2
 8010c40:	010003c4 	movi	r4,15
 8010c44:	1c44b03a 	or	r2,r3,r17
 8010c48:	b56af03a 	xor	r21,r22,r21
 8010c4c:	81c00044 	addi	r7,r16,1
 8010c50:	20806b36 	bltu	r4,r2,8010e00 <__mulsf3+0x268>
 8010c54:	100490ba 	slli	r2,r2,2
 8010c58:	01020074 	movhi	r4,2049
 8010c5c:	21031b04 	addi	r4,r4,3180
 8010c60:	1105883a 	add	r2,r2,r4
 8010c64:	10800017 	ldw	r2,0(r2)
 8010c68:	1000683a 	jmp	r2
 8010c6c:	08010e00 	call	8010e0 <__alt_mem_onchip_memory2_0-0x780ef20>
 8010c70:	08010cc0 	call	8010cc <__alt_mem_onchip_memory2_0-0x780ef34>
 8010c74:	08010cc0 	call	8010cc <__alt_mem_onchip_memory2_0-0x780ef34>
 8010c78:	08010cbc 	xorhi	zero,at,1074
 8010c7c:	08010de4 	muli	zero,at,1079
 8010c80:	08010de4 	muli	zero,at,1079
 8010c84:	08010dd0 	cmplti	zero,at,1079
 8010c88:	08010cbc 	xorhi	zero,at,1074
 8010c8c:	08010de4 	muli	zero,at,1079
 8010c90:	08010dd0 	cmplti	zero,at,1079
 8010c94:	08010de4 	muli	zero,at,1079
 8010c98:	08010cbc 	xorhi	zero,at,1074
 8010c9c:	08010df0 	cmpltui	zero,at,1079
 8010ca0:	08010df0 	cmpltui	zero,at,1079
 8010ca4:	08010df0 	cmpltui	zero,at,1079
 8010ca8:	08010f00 	call	8010f0 <__alt_mem_onchip_memory2_0-0x780ef10>
 8010cac:	90003b1e 	bne	r18,zero,8010d9c <__mulsf3+0x204>
 8010cb0:	04400204 	movi	r17,8
 8010cb4:	05c00084 	movi	r23,2
 8010cb8:	003fd206 	br	8010c04 <__alt_data_end+0xffff1204>
 8010cbc:	302b883a 	mov	r21,r6
 8010cc0:	00800084 	movi	r2,2
 8010cc4:	18802626 	beq	r3,r2,8010d60 <__mulsf3+0x1c8>
 8010cc8:	008000c4 	movi	r2,3
 8010ccc:	1880b826 	beq	r3,r2,8010fb0 <__mulsf3+0x418>
 8010cd0:	00800044 	movi	r2,1
 8010cd4:	1880af1e 	bne	r3,r2,8010f94 <__mulsf3+0x3fc>
 8010cd8:	a829883a 	mov	r20,r21
 8010cdc:	0007883a 	mov	r3,zero
 8010ce0:	0009883a 	mov	r4,zero
 8010ce4:	18803fcc 	andi	r2,r3,255
 8010ce8:	100695fa 	slli	r3,r2,23
 8010cec:	a0803fcc 	andi	r2,r20,255
 8010cf0:	100a97fa 	slli	r5,r2,31
 8010cf4:	00802034 	movhi	r2,128
 8010cf8:	10bfffc4 	addi	r2,r2,-1
 8010cfc:	2084703a 	and	r2,r4,r2
 8010d00:	10c4b03a 	or	r2,r2,r3
 8010d04:	1144b03a 	or	r2,r2,r5
 8010d08:	dfc00a17 	ldw	ra,40(sp)
 8010d0c:	df000917 	ldw	fp,36(sp)
 8010d10:	ddc00817 	ldw	r23,32(sp)
 8010d14:	dd800717 	ldw	r22,28(sp)
 8010d18:	dd400617 	ldw	r21,24(sp)
 8010d1c:	dd000517 	ldw	r20,20(sp)
 8010d20:	dcc00417 	ldw	r19,16(sp)
 8010d24:	dc800317 	ldw	r18,12(sp)
 8010d28:	dc400217 	ldw	r17,8(sp)
 8010d2c:	dc000117 	ldw	r16,4(sp)
 8010d30:	dec00b04 	addi	sp,sp,44
 8010d34:	f800283a 	ret
 8010d38:	90000d1e 	bne	r18,zero,8010d70 <__mulsf3+0x1d8>
 8010d3c:	04400104 	movi	r17,4
 8010d40:	05c00044 	movi	r23,1
 8010d44:	003faf06 	br	8010c04 <__alt_data_end+0xffff1204>
 8010d48:	9806c03a 	cmpne	r3,r19,zero
 8010d4c:	18c00084 	addi	r3,r3,2
 8010d50:	003fba06 	br	8010c3c <__alt_data_end+0xffff123c>
 8010d54:	9800141e 	bne	r19,zero,8010da8 <__mulsf3+0x210>
 8010d58:	00c00044 	movi	r3,1
 8010d5c:	003fb706 	br	8010c3c <__alt_data_end+0xffff123c>
 8010d60:	a829883a 	mov	r20,r21
 8010d64:	00ffffc4 	movi	r3,-1
 8010d68:	0009883a 	mov	r4,zero
 8010d6c:	003fdd06 	br	8010ce4 <__alt_data_end+0xffff12e4>
 8010d70:	9009883a 	mov	r4,r18
 8010d74:	d9400015 	stw	r5,0(sp)
 8010d78:	801160c0 	call	801160c <__clzsi2>
 8010d7c:	10fffec4 	addi	r3,r2,-5
 8010d80:	10801d84 	addi	r2,r2,118
 8010d84:	90e4983a 	sll	r18,r18,r3
 8010d88:	00a1c83a 	sub	r16,zero,r2
 8010d8c:	0023883a 	mov	r17,zero
 8010d90:	002f883a 	mov	r23,zero
 8010d94:	d9400017 	ldw	r5,0(sp)
 8010d98:	003f9a06 	br	8010c04 <__alt_data_end+0xffff1204>
 8010d9c:	04400304 	movi	r17,12
 8010da0:	05c000c4 	movi	r23,3
 8010da4:	003f9706 	br	8010c04 <__alt_data_end+0xffff1204>
 8010da8:	9809883a 	mov	r4,r19
 8010dac:	d9800015 	stw	r6,0(sp)
 8010db0:	801160c0 	call	801160c <__clzsi2>
 8010db4:	10fffec4 	addi	r3,r2,-5
 8010db8:	10801d84 	addi	r2,r2,118
 8010dbc:	98e6983a 	sll	r19,r19,r3
 8010dc0:	0085c83a 	sub	r2,zero,r2
 8010dc4:	0007883a 	mov	r3,zero
 8010dc8:	d9800017 	ldw	r6,0(sp)
 8010dcc:	003f9b06 	br	8010c3c <__alt_data_end+0xffff123c>
 8010dd0:	01002034 	movhi	r4,128
 8010dd4:	0029883a 	mov	r20,zero
 8010dd8:	213fffc4 	addi	r4,r4,-1
 8010ddc:	00ffffc4 	movi	r3,-1
 8010de0:	003fc006 	br	8010ce4 <__alt_data_end+0xffff12e4>
 8010de4:	9027883a 	mov	r19,r18
 8010de8:	b807883a 	mov	r3,r23
 8010dec:	003fb406 	br	8010cc0 <__alt_data_end+0xffff12c0>
 8010df0:	9027883a 	mov	r19,r18
 8010df4:	e02b883a 	mov	r21,fp
 8010df8:	b807883a 	mov	r3,r23
 8010dfc:	003fb006 	br	8010cc0 <__alt_data_end+0xffff12c0>
 8010e00:	9028d43a 	srli	r20,r18,16
 8010e04:	982cd43a 	srli	r22,r19,16
 8010e08:	94bfffcc 	andi	r18,r18,65535
 8010e0c:	9cffffcc 	andi	r19,r19,65535
 8010e10:	980b883a 	mov	r5,r19
 8010e14:	9009883a 	mov	r4,r18
 8010e18:	d9c00015 	stw	r7,0(sp)
 8010e1c:	80116700 	call	8011670 <__mulsi3>
 8010e20:	a00b883a 	mov	r5,r20
 8010e24:	9809883a 	mov	r4,r19
 8010e28:	1023883a 	mov	r17,r2
 8010e2c:	80116700 	call	8011670 <__mulsi3>
 8010e30:	a009883a 	mov	r4,r20
 8010e34:	b00b883a 	mov	r5,r22
 8010e38:	1027883a 	mov	r19,r2
 8010e3c:	80116700 	call	8011670 <__mulsi3>
 8010e40:	b00b883a 	mov	r5,r22
 8010e44:	9009883a 	mov	r4,r18
 8010e48:	1029883a 	mov	r20,r2
 8010e4c:	80116700 	call	8011670 <__mulsi3>
 8010e50:	8806d43a 	srli	r3,r17,16
 8010e54:	14c5883a 	add	r2,r2,r19
 8010e58:	d9c00017 	ldw	r7,0(sp)
 8010e5c:	1885883a 	add	r2,r3,r2
 8010e60:	14c0022e 	bgeu	r2,r19,8010e6c <__mulsf3+0x2d4>
 8010e64:	00c00074 	movhi	r3,1
 8010e68:	a0e9883a 	add	r20,r20,r3
 8010e6c:	1026943a 	slli	r19,r2,16
 8010e70:	8c7fffcc 	andi	r17,r17,65535
 8010e74:	1004d43a 	srli	r2,r2,16
 8010e78:	9c63883a 	add	r17,r19,r17
 8010e7c:	882691ba 	slli	r19,r17,6
 8010e80:	1505883a 	add	r2,r2,r20
 8010e84:	8822d6ba 	srli	r17,r17,26
 8010e88:	100891ba 	slli	r4,r2,6
 8010e8c:	9826c03a 	cmpne	r19,r19,zero
 8010e90:	9c62b03a 	or	r17,r19,r17
 8010e94:	8926b03a 	or	r19,r17,r4
 8010e98:	9882002c 	andhi	r2,r19,2048
 8010e9c:	10000426 	beq	r2,zero,8010eb0 <__mulsf3+0x318>
 8010ea0:	9804d07a 	srli	r2,r19,1
 8010ea4:	9900004c 	andi	r4,r19,1
 8010ea8:	3821883a 	mov	r16,r7
 8010eac:	1126b03a 	or	r19,r2,r4
 8010eb0:	80c01fc4 	addi	r3,r16,127
 8010eb4:	00c0210e 	bge	zero,r3,8010f3c <__mulsf3+0x3a4>
 8010eb8:	988001cc 	andi	r2,r19,7
 8010ebc:	10000426 	beq	r2,zero,8010ed0 <__mulsf3+0x338>
 8010ec0:	988003cc 	andi	r2,r19,15
 8010ec4:	01000104 	movi	r4,4
 8010ec8:	11000126 	beq	r2,r4,8010ed0 <__mulsf3+0x338>
 8010ecc:	9927883a 	add	r19,r19,r4
 8010ed0:	9882002c 	andhi	r2,r19,2048
 8010ed4:	10000426 	beq	r2,zero,8010ee8 <__mulsf3+0x350>
 8010ed8:	00be0034 	movhi	r2,63488
 8010edc:	10bfffc4 	addi	r2,r2,-1
 8010ee0:	80c02004 	addi	r3,r16,128
 8010ee4:	98a6703a 	and	r19,r19,r2
 8010ee8:	00803f84 	movi	r2,254
 8010eec:	10ff9c16 	blt	r2,r3,8010d60 <__alt_data_end+0xffff1360>
 8010ef0:	980891ba 	slli	r4,r19,6
 8010ef4:	a829883a 	mov	r20,r21
 8010ef8:	2008d27a 	srli	r4,r4,9
 8010efc:	003f7906 	br	8010ce4 <__alt_data_end+0xffff12e4>
 8010f00:	9080102c 	andhi	r2,r18,64
 8010f04:	10000826 	beq	r2,zero,8010f28 <__mulsf3+0x390>
 8010f08:	9880102c 	andhi	r2,r19,64
 8010f0c:	1000061e 	bne	r2,zero,8010f28 <__mulsf3+0x390>
 8010f10:	00802034 	movhi	r2,128
 8010f14:	99001034 	orhi	r4,r19,64
 8010f18:	10bfffc4 	addi	r2,r2,-1
 8010f1c:	b029883a 	mov	r20,r22
 8010f20:	2088703a 	and	r4,r4,r2
 8010f24:	003fad06 	br	8010ddc <__alt_data_end+0xffff13dc>
 8010f28:	00802034 	movhi	r2,128
 8010f2c:	91001034 	orhi	r4,r18,64
 8010f30:	10bfffc4 	addi	r2,r2,-1
 8010f34:	2088703a 	and	r4,r4,r2
 8010f38:	003fa806 	br	8010ddc <__alt_data_end+0xffff13dc>
 8010f3c:	00800044 	movi	r2,1
 8010f40:	10c7c83a 	sub	r3,r2,r3
 8010f44:	008006c4 	movi	r2,27
 8010f48:	10ff6316 	blt	r2,r3,8010cd8 <__alt_data_end+0xffff12d8>
 8010f4c:	00800804 	movi	r2,32
 8010f50:	10c5c83a 	sub	r2,r2,r3
 8010f54:	9884983a 	sll	r2,r19,r2
 8010f58:	98c6d83a 	srl	r3,r19,r3
 8010f5c:	1004c03a 	cmpne	r2,r2,zero
 8010f60:	1884b03a 	or	r2,r3,r2
 8010f64:	10c001cc 	andi	r3,r2,7
 8010f68:	18000426 	beq	r3,zero,8010f7c <__mulsf3+0x3e4>
 8010f6c:	10c003cc 	andi	r3,r2,15
 8010f70:	01000104 	movi	r4,4
 8010f74:	19000126 	beq	r3,r4,8010f7c <__mulsf3+0x3e4>
 8010f78:	1105883a 	add	r2,r2,r4
 8010f7c:	10c1002c 	andhi	r3,r2,1024
 8010f80:	18000626 	beq	r3,zero,8010f9c <__mulsf3+0x404>
 8010f84:	a829883a 	mov	r20,r21
 8010f88:	00c00044 	movi	r3,1
 8010f8c:	0009883a 	mov	r4,zero
 8010f90:	003f5406 	br	8010ce4 <__alt_data_end+0xffff12e4>
 8010f94:	3821883a 	mov	r16,r7
 8010f98:	003fc506 	br	8010eb0 <__alt_data_end+0xffff14b0>
 8010f9c:	100491ba 	slli	r2,r2,6
 8010fa0:	a829883a 	mov	r20,r21
 8010fa4:	0007883a 	mov	r3,zero
 8010fa8:	1008d27a 	srli	r4,r2,9
 8010fac:	003f4d06 	br	8010ce4 <__alt_data_end+0xffff12e4>
 8010fb0:	00802034 	movhi	r2,128
 8010fb4:	99001034 	orhi	r4,r19,64
 8010fb8:	10bfffc4 	addi	r2,r2,-1
 8010fbc:	a829883a 	mov	r20,r21
 8010fc0:	2088703a 	and	r4,r4,r2
 8010fc4:	003f8506 	br	8010ddc <__alt_data_end+0xffff13dc>

08010fc8 <__subsf3>:
 8010fc8:	defffc04 	addi	sp,sp,-16
 8010fcc:	280cd5fa 	srli	r6,r5,23
 8010fd0:	dc000015 	stw	r16,0(sp)
 8010fd4:	01c02034 	movhi	r7,128
 8010fd8:	2020d5fa 	srli	r16,r4,23
 8010fdc:	39ffffc4 	addi	r7,r7,-1
 8010fe0:	3906703a 	and	r3,r7,r4
 8010fe4:	dc400115 	stw	r17,4(sp)
 8010fe8:	394e703a 	and	r7,r7,r5
 8010fec:	2022d7fa 	srli	r17,r4,31
 8010ff0:	dfc00315 	stw	ra,12(sp)
 8010ff4:	dc800215 	stw	r18,8(sp)
 8010ff8:	31803fcc 	andi	r6,r6,255
 8010ffc:	01003fc4 	movi	r4,255
 8011000:	84003fcc 	andi	r16,r16,255
 8011004:	180690fa 	slli	r3,r3,3
 8011008:	2804d7fa 	srli	r2,r5,31
 801100c:	380e90fa 	slli	r7,r7,3
 8011010:	31006d26 	beq	r6,r4,80111c8 <__subsf3+0x200>
 8011014:	1080005c 	xori	r2,r2,1
 8011018:	8189c83a 	sub	r4,r16,r6
 801101c:	14404f26 	beq	r2,r17,801115c <__subsf3+0x194>
 8011020:	0100770e 	bge	zero,r4,8011200 <__subsf3+0x238>
 8011024:	30001e1e 	bne	r6,zero,80110a0 <__subsf3+0xd8>
 8011028:	38006a1e 	bne	r7,zero,80111d4 <__subsf3+0x20c>
 801102c:	188001cc 	andi	r2,r3,7
 8011030:	10000426 	beq	r2,zero,8011044 <__subsf3+0x7c>
 8011034:	188003cc 	andi	r2,r3,15
 8011038:	01000104 	movi	r4,4
 801103c:	11000126 	beq	r2,r4,8011044 <__subsf3+0x7c>
 8011040:	1907883a 	add	r3,r3,r4
 8011044:	1881002c 	andhi	r2,r3,1024
 8011048:	10003926 	beq	r2,zero,8011130 <__subsf3+0x168>
 801104c:	84000044 	addi	r16,r16,1
 8011050:	00803fc4 	movi	r2,255
 8011054:	80807526 	beq	r16,r2,801122c <__subsf3+0x264>
 8011058:	180691ba 	slli	r3,r3,6
 801105c:	8880004c 	andi	r2,r17,1
 8011060:	180ad27a 	srli	r5,r3,9
 8011064:	84003fcc 	andi	r16,r16,255
 8011068:	800695fa 	slli	r3,r16,23
 801106c:	10803fcc 	andi	r2,r2,255
 8011070:	01002034 	movhi	r4,128
 8011074:	213fffc4 	addi	r4,r4,-1
 8011078:	100497fa 	slli	r2,r2,31
 801107c:	2920703a 	and	r16,r5,r4
 8011080:	80e0b03a 	or	r16,r16,r3
 8011084:	8084b03a 	or	r2,r16,r2
 8011088:	dfc00317 	ldw	ra,12(sp)
 801108c:	dc800217 	ldw	r18,8(sp)
 8011090:	dc400117 	ldw	r17,4(sp)
 8011094:	dc000017 	ldw	r16,0(sp)
 8011098:	dec00404 	addi	sp,sp,16
 801109c:	f800283a 	ret
 80110a0:	00803fc4 	movi	r2,255
 80110a4:	80bfe126 	beq	r16,r2,801102c <__alt_data_end+0xffff162c>
 80110a8:	39c10034 	orhi	r7,r7,1024
 80110ac:	008006c4 	movi	r2,27
 80110b0:	11007416 	blt	r2,r4,8011284 <__subsf3+0x2bc>
 80110b4:	00800804 	movi	r2,32
 80110b8:	1105c83a 	sub	r2,r2,r4
 80110bc:	3884983a 	sll	r2,r7,r2
 80110c0:	390ed83a 	srl	r7,r7,r4
 80110c4:	1008c03a 	cmpne	r4,r2,zero
 80110c8:	390eb03a 	or	r7,r7,r4
 80110cc:	19c7c83a 	sub	r3,r3,r7
 80110d0:	1881002c 	andhi	r2,r3,1024
 80110d4:	10001426 	beq	r2,zero,8011128 <__subsf3+0x160>
 80110d8:	04810034 	movhi	r18,1024
 80110dc:	94bfffc4 	addi	r18,r18,-1
 80110e0:	1ca4703a 	and	r18,r3,r18
 80110e4:	9009883a 	mov	r4,r18
 80110e8:	801160c0 	call	801160c <__clzsi2>
 80110ec:	10bffec4 	addi	r2,r2,-5
 80110f0:	90a4983a 	sll	r18,r18,r2
 80110f4:	14005116 	blt	r2,r16,801123c <__subsf3+0x274>
 80110f8:	1405c83a 	sub	r2,r2,r16
 80110fc:	10c00044 	addi	r3,r2,1
 8011100:	00800804 	movi	r2,32
 8011104:	10c5c83a 	sub	r2,r2,r3
 8011108:	9084983a 	sll	r2,r18,r2
 801110c:	90e4d83a 	srl	r18,r18,r3
 8011110:	0021883a 	mov	r16,zero
 8011114:	1006c03a 	cmpne	r3,r2,zero
 8011118:	90c6b03a 	or	r3,r18,r3
 801111c:	003fc306 	br	801102c <__alt_data_end+0xffff162c>
 8011120:	2000e026 	beq	r4,zero,80114a4 <__subsf3+0x4dc>
 8011124:	2007883a 	mov	r3,r4
 8011128:	188001cc 	andi	r2,r3,7
 801112c:	103fc11e 	bne	r2,zero,8011034 <__alt_data_end+0xffff1634>
 8011130:	180ad0fa 	srli	r5,r3,3
 8011134:	00c03fc4 	movi	r3,255
 8011138:	8880004c 	andi	r2,r17,1
 801113c:	80c0031e 	bne	r16,r3,801114c <__subsf3+0x184>
 8011140:	28006d26 	beq	r5,zero,80112f8 <__subsf3+0x330>
 8011144:	29401034 	orhi	r5,r5,64
 8011148:	043fffc4 	movi	r16,-1
 801114c:	00c02034 	movhi	r3,128
 8011150:	18ffffc4 	addi	r3,r3,-1
 8011154:	28ca703a 	and	r5,r5,r3
 8011158:	003fc206 	br	8011064 <__alt_data_end+0xffff1664>
 801115c:	01003c0e 	bge	zero,r4,8011250 <__subsf3+0x288>
 8011160:	30002126 	beq	r6,zero,80111e8 <__subsf3+0x220>
 8011164:	01403fc4 	movi	r5,255
 8011168:	817fb026 	beq	r16,r5,801102c <__alt_data_end+0xffff162c>
 801116c:	39c10034 	orhi	r7,r7,1024
 8011170:	014006c4 	movi	r5,27
 8011174:	29007416 	blt	r5,r4,8011348 <__subsf3+0x380>
 8011178:	01400804 	movi	r5,32
 801117c:	290bc83a 	sub	r5,r5,r4
 8011180:	394a983a 	sll	r5,r7,r5
 8011184:	390ed83a 	srl	r7,r7,r4
 8011188:	2808c03a 	cmpne	r4,r5,zero
 801118c:	390eb03a 	or	r7,r7,r4
 8011190:	19c7883a 	add	r3,r3,r7
 8011194:	1901002c 	andhi	r4,r3,1024
 8011198:	20003826 	beq	r4,zero,801127c <__subsf3+0x2b4>
 801119c:	84000044 	addi	r16,r16,1
 80111a0:	01003fc4 	movi	r4,255
 80111a4:	81005426 	beq	r16,r4,80112f8 <__subsf3+0x330>
 80111a8:	1023883a 	mov	r17,r2
 80111ac:	00bf0034 	movhi	r2,64512
 80111b0:	10bfffc4 	addi	r2,r2,-1
 80111b4:	1900004c 	andi	r4,r3,1
 80111b8:	1886703a 	and	r3,r3,r2
 80111bc:	1806d07a 	srli	r3,r3,1
 80111c0:	1906b03a 	or	r3,r3,r4
 80111c4:	003f9906 	br	801102c <__alt_data_end+0xffff162c>
 80111c8:	383f9226 	beq	r7,zero,8011014 <__alt_data_end+0xffff1614>
 80111cc:	10803fcc 	andi	r2,r2,255
 80111d0:	003f9106 	br	8011018 <__alt_data_end+0xffff1618>
 80111d4:	213fffc4 	addi	r4,r4,-1
 80111d8:	203fbc26 	beq	r4,zero,80110cc <__alt_data_end+0xffff16cc>
 80111dc:	00803fc4 	movi	r2,255
 80111e0:	80bfb21e 	bne	r16,r2,80110ac <__alt_data_end+0xffff16ac>
 80111e4:	003f9106 	br	801102c <__alt_data_end+0xffff162c>
 80111e8:	383f9026 	beq	r7,zero,801102c <__alt_data_end+0xffff162c>
 80111ec:	213fffc4 	addi	r4,r4,-1
 80111f0:	203fe726 	beq	r4,zero,8011190 <__alt_data_end+0xffff1790>
 80111f4:	01403fc4 	movi	r5,255
 80111f8:	817fdd1e 	bne	r16,r5,8011170 <__alt_data_end+0xffff1770>
 80111fc:	003f8b06 	br	801102c <__alt_data_end+0xffff162c>
 8011200:	2000221e 	bne	r4,zero,801128c <__subsf3+0x2c4>
 8011204:	81000044 	addi	r4,r16,1
 8011208:	21003fcc 	andi	r4,r4,255
 801120c:	01400044 	movi	r5,1
 8011210:	2900470e 	bge	r5,r4,8011330 <__subsf3+0x368>
 8011214:	19e5c83a 	sub	r18,r3,r7
 8011218:	9141002c 	andhi	r5,r18,1024
 801121c:	28002d26 	beq	r5,zero,80112d4 <__subsf3+0x30c>
 8011220:	38e5c83a 	sub	r18,r7,r3
 8011224:	1023883a 	mov	r17,r2
 8011228:	003fae06 	br	80110e4 <__alt_data_end+0xffff16e4>
 801122c:	8880004c 	andi	r2,r17,1
 8011230:	043fffc4 	movi	r16,-1
 8011234:	000b883a 	mov	r5,zero
 8011238:	003f8a06 	br	8011064 <__alt_data_end+0xffff1664>
 801123c:	00ff0034 	movhi	r3,64512
 8011240:	18ffffc4 	addi	r3,r3,-1
 8011244:	80a1c83a 	sub	r16,r16,r2
 8011248:	90c6703a 	and	r3,r18,r3
 801124c:	003f7706 	br	801102c <__alt_data_end+0xffff162c>
 8011250:	2000431e 	bne	r4,zero,8011360 <__subsf3+0x398>
 8011254:	81000044 	addi	r4,r16,1
 8011258:	21803fcc 	andi	r6,r4,255
 801125c:	01400044 	movi	r5,1
 8011260:	2980280e 	bge	r5,r6,8011304 <__subsf3+0x33c>
 8011264:	01403fc4 	movi	r5,255
 8011268:	21402326 	beq	r4,r5,80112f8 <__subsf3+0x330>
 801126c:	19c7883a 	add	r3,r3,r7
 8011270:	1806d07a 	srli	r3,r3,1
 8011274:	2021883a 	mov	r16,r4
 8011278:	003f6c06 	br	801102c <__alt_data_end+0xffff162c>
 801127c:	1023883a 	mov	r17,r2
 8011280:	003fa906 	br	8011128 <__alt_data_end+0xffff1728>
 8011284:	01c00044 	movi	r7,1
 8011288:	003f9006 	br	80110cc <__alt_data_end+0xffff16cc>
 801128c:	8000151e 	bne	r16,zero,80112e4 <__subsf3+0x31c>
 8011290:	18002f26 	beq	r3,zero,8011350 <__subsf3+0x388>
 8011294:	0108303a 	nor	r4,zero,r4
 8011298:	20000a26 	beq	r4,zero,80112c4 <__subsf3+0x2fc>
 801129c:	01403fc4 	movi	r5,255
 80112a0:	31402b26 	beq	r6,r5,8011350 <__subsf3+0x388>
 80112a4:	014006c4 	movi	r5,27
 80112a8:	29006e16 	blt	r5,r4,8011464 <__subsf3+0x49c>
 80112ac:	01400804 	movi	r5,32
 80112b0:	290bc83a 	sub	r5,r5,r4
 80112b4:	194a983a 	sll	r5,r3,r5
 80112b8:	1908d83a 	srl	r4,r3,r4
 80112bc:	2806c03a 	cmpne	r3,r5,zero
 80112c0:	20c6b03a 	or	r3,r4,r3
 80112c4:	38c7c83a 	sub	r3,r7,r3
 80112c8:	3021883a 	mov	r16,r6
 80112cc:	1023883a 	mov	r17,r2
 80112d0:	003f7f06 	br	80110d0 <__alt_data_end+0xffff16d0>
 80112d4:	903f831e 	bne	r18,zero,80110e4 <__alt_data_end+0xffff16e4>
 80112d8:	0005883a 	mov	r2,zero
 80112dc:	0021883a 	mov	r16,zero
 80112e0:	003f9a06 	br	801114c <__alt_data_end+0xffff174c>
 80112e4:	01403fc4 	movi	r5,255
 80112e8:	31401926 	beq	r6,r5,8011350 <__subsf3+0x388>
 80112ec:	0109c83a 	sub	r4,zero,r4
 80112f0:	18c10034 	orhi	r3,r3,1024
 80112f4:	003feb06 	br	80112a4 <__alt_data_end+0xffff18a4>
 80112f8:	043fffc4 	movi	r16,-1
 80112fc:	000b883a 	mov	r5,zero
 8011300:	003f5806 	br	8011064 <__alt_data_end+0xffff1664>
 8011304:	8000481e 	bne	r16,zero,8011428 <__subsf3+0x460>
 8011308:	18006226 	beq	r3,zero,8011494 <__subsf3+0x4cc>
 801130c:	383f4726 	beq	r7,zero,801102c <__alt_data_end+0xffff162c>
 8011310:	19c7883a 	add	r3,r3,r7
 8011314:	1881002c 	andhi	r2,r3,1024
 8011318:	103f8326 	beq	r2,zero,8011128 <__alt_data_end+0xffff1728>
 801131c:	00bf0034 	movhi	r2,64512
 8011320:	10bfffc4 	addi	r2,r2,-1
 8011324:	2821883a 	mov	r16,r5
 8011328:	1886703a 	and	r3,r3,r2
 801132c:	003f3f06 	br	801102c <__alt_data_end+0xffff162c>
 8011330:	80001c1e 	bne	r16,zero,80113a4 <__subsf3+0x3dc>
 8011334:	1800261e 	bne	r3,zero,80113d0 <__subsf3+0x408>
 8011338:	38004c26 	beq	r7,zero,801146c <__subsf3+0x4a4>
 801133c:	3807883a 	mov	r3,r7
 8011340:	1023883a 	mov	r17,r2
 8011344:	003f3906 	br	801102c <__alt_data_end+0xffff162c>
 8011348:	01c00044 	movi	r7,1
 801134c:	003f9006 	br	8011190 <__alt_data_end+0xffff1790>
 8011350:	3807883a 	mov	r3,r7
 8011354:	3021883a 	mov	r16,r6
 8011358:	1023883a 	mov	r17,r2
 801135c:	003f3306 	br	801102c <__alt_data_end+0xffff162c>
 8011360:	8000161e 	bne	r16,zero,80113bc <__subsf3+0x3f4>
 8011364:	18002d26 	beq	r3,zero,801141c <__subsf3+0x454>
 8011368:	0108303a 	nor	r4,zero,r4
 801136c:	20000a26 	beq	r4,zero,8011398 <__subsf3+0x3d0>
 8011370:	01403fc4 	movi	r5,255
 8011374:	31402926 	beq	r6,r5,801141c <__subsf3+0x454>
 8011378:	014006c4 	movi	r5,27
 801137c:	29004716 	blt	r5,r4,801149c <__subsf3+0x4d4>
 8011380:	01400804 	movi	r5,32
 8011384:	290bc83a 	sub	r5,r5,r4
 8011388:	194a983a 	sll	r5,r3,r5
 801138c:	1908d83a 	srl	r4,r3,r4
 8011390:	2806c03a 	cmpne	r3,r5,zero
 8011394:	20c6b03a 	or	r3,r4,r3
 8011398:	19c7883a 	add	r3,r3,r7
 801139c:	3021883a 	mov	r16,r6
 80113a0:	003f7c06 	br	8011194 <__alt_data_end+0xffff1794>
 80113a4:	1800111e 	bne	r3,zero,80113ec <__subsf3+0x424>
 80113a8:	38003326 	beq	r7,zero,8011478 <__subsf3+0x4b0>
 80113ac:	3807883a 	mov	r3,r7
 80113b0:	1023883a 	mov	r17,r2
 80113b4:	04003fc4 	movi	r16,255
 80113b8:	003f1c06 	br	801102c <__alt_data_end+0xffff162c>
 80113bc:	01403fc4 	movi	r5,255
 80113c0:	31401626 	beq	r6,r5,801141c <__subsf3+0x454>
 80113c4:	0109c83a 	sub	r4,zero,r4
 80113c8:	18c10034 	orhi	r3,r3,1024
 80113cc:	003fea06 	br	8011378 <__alt_data_end+0xffff1978>
 80113d0:	383f1626 	beq	r7,zero,801102c <__alt_data_end+0xffff162c>
 80113d4:	19c9c83a 	sub	r4,r3,r7
 80113d8:	2141002c 	andhi	r5,r4,1024
 80113dc:	283f5026 	beq	r5,zero,8011120 <__alt_data_end+0xffff1720>
 80113e0:	38c7c83a 	sub	r3,r7,r3
 80113e4:	1023883a 	mov	r17,r2
 80113e8:	003f1006 	br	801102c <__alt_data_end+0xffff162c>
 80113ec:	38001b26 	beq	r7,zero,801145c <__subsf3+0x494>
 80113f0:	1806d0fa 	srli	r3,r3,3
 80113f4:	1900102c 	andhi	r4,r3,64
 80113f8:	20000526 	beq	r4,zero,8011410 <__subsf3+0x448>
 80113fc:	380ed0fa 	srli	r7,r7,3
 8011400:	3900102c 	andhi	r4,r7,64
 8011404:	2000021e 	bne	r4,zero,8011410 <__subsf3+0x448>
 8011408:	3807883a 	mov	r3,r7
 801140c:	1023883a 	mov	r17,r2
 8011410:	180690fa 	slli	r3,r3,3
 8011414:	04003fc4 	movi	r16,255
 8011418:	003f0406 	br	801102c <__alt_data_end+0xffff162c>
 801141c:	3807883a 	mov	r3,r7
 8011420:	3021883a 	mov	r16,r6
 8011424:	003f0106 	br	801102c <__alt_data_end+0xffff162c>
 8011428:	18001726 	beq	r3,zero,8011488 <__subsf3+0x4c0>
 801142c:	38000b26 	beq	r7,zero,801145c <__subsf3+0x494>
 8011430:	1806d0fa 	srli	r3,r3,3
 8011434:	1900102c 	andhi	r4,r3,64
 8011438:	20000426 	beq	r4,zero,801144c <__subsf3+0x484>
 801143c:	380ed0fa 	srli	r7,r7,3
 8011440:	3900102c 	andhi	r4,r7,64
 8011444:	2000011e 	bne	r4,zero,801144c <__subsf3+0x484>
 8011448:	3807883a 	mov	r3,r7
 801144c:	180690fa 	slli	r3,r3,3
 8011450:	1023883a 	mov	r17,r2
 8011454:	04003fc4 	movi	r16,255
 8011458:	003ef406 	br	801102c <__alt_data_end+0xffff162c>
 801145c:	04003fc4 	movi	r16,255
 8011460:	003ef206 	br	801102c <__alt_data_end+0xffff162c>
 8011464:	00c00044 	movi	r3,1
 8011468:	003f9606 	br	80112c4 <__alt_data_end+0xffff18c4>
 801146c:	000b883a 	mov	r5,zero
 8011470:	0005883a 	mov	r2,zero
 8011474:	003f3506 	br	801114c <__alt_data_end+0xffff174c>
 8011478:	01402034 	movhi	r5,128
 801147c:	297fffc4 	addi	r5,r5,-1
 8011480:	0005883a 	mov	r2,zero
 8011484:	003f2f06 	br	8011144 <__alt_data_end+0xffff1744>
 8011488:	3807883a 	mov	r3,r7
 801148c:	04003fc4 	movi	r16,255
 8011490:	003ee606 	br	801102c <__alt_data_end+0xffff162c>
 8011494:	3807883a 	mov	r3,r7
 8011498:	003ee406 	br	801102c <__alt_data_end+0xffff162c>
 801149c:	00c00044 	movi	r3,1
 80114a0:	003fbd06 	br	8011398 <__alt_data_end+0xffff1998>
 80114a4:	0005883a 	mov	r2,zero
 80114a8:	003f2806 	br	801114c <__alt_data_end+0xffff174c>

080114ac <__fixsfsi>:
 80114ac:	200ad5fa 	srli	r5,r4,23
 80114b0:	00c02034 	movhi	r3,128
 80114b4:	18ffffc4 	addi	r3,r3,-1
 80114b8:	29403fcc 	andi	r5,r5,255
 80114bc:	00801f84 	movi	r2,126
 80114c0:	1906703a 	and	r3,r3,r4
 80114c4:	2008d7fa 	srli	r4,r4,31
 80114c8:	11400e0e 	bge	r2,r5,8011504 <__fixsfsi+0x58>
 80114cc:	00802744 	movi	r2,157
 80114d0:	11400816 	blt	r2,r5,80114f4 <__fixsfsi+0x48>
 80114d4:	00802544 	movi	r2,149
 80114d8:	18c02034 	orhi	r3,r3,128
 80114dc:	11400b0e 	bge	r2,r5,801150c <__fixsfsi+0x60>
 80114e0:	28bfda84 	addi	r2,r5,-150
 80114e4:	1884983a 	sll	r2,r3,r2
 80114e8:	20000726 	beq	r4,zero,8011508 <__fixsfsi+0x5c>
 80114ec:	0085c83a 	sub	r2,zero,r2
 80114f0:	f800283a 	ret
 80114f4:	00a00034 	movhi	r2,32768
 80114f8:	10bfffc4 	addi	r2,r2,-1
 80114fc:	2085883a 	add	r2,r4,r2
 8011500:	f800283a 	ret
 8011504:	0005883a 	mov	r2,zero
 8011508:	f800283a 	ret
 801150c:	00802584 	movi	r2,150
 8011510:	1145c83a 	sub	r2,r2,r5
 8011514:	1884d83a 	srl	r2,r3,r2
 8011518:	003ff306 	br	80114e8 <__alt_data_end+0xffff1ae8>

0801151c <__floatunsisf>:
 801151c:	defffe04 	addi	sp,sp,-8
 8011520:	dfc00115 	stw	ra,4(sp)
 8011524:	dc000015 	stw	r16,0(sp)
 8011528:	20002c26 	beq	r4,zero,80115dc <__floatunsisf+0xc0>
 801152c:	2021883a 	mov	r16,r4
 8011530:	801160c0 	call	801160c <__clzsi2>
 8011534:	00c02784 	movi	r3,158
 8011538:	1887c83a 	sub	r3,r3,r2
 801153c:	01002584 	movi	r4,150
 8011540:	20c00f16 	blt	r4,r3,8011580 <__floatunsisf+0x64>
 8011544:	20c9c83a 	sub	r4,r4,r3
 8011548:	8108983a 	sll	r4,r16,r4
 801154c:	00802034 	movhi	r2,128
 8011550:	10bfffc4 	addi	r2,r2,-1
 8011554:	2088703a 	and	r4,r4,r2
 8011558:	18803fcc 	andi	r2,r3,255
 801155c:	100695fa 	slli	r3,r2,23
 8011560:	00802034 	movhi	r2,128
 8011564:	10bfffc4 	addi	r2,r2,-1
 8011568:	2084703a 	and	r2,r4,r2
 801156c:	10c4b03a 	or	r2,r2,r3
 8011570:	dfc00117 	ldw	ra,4(sp)
 8011574:	dc000017 	ldw	r16,0(sp)
 8011578:	dec00204 	addi	sp,sp,8
 801157c:	f800283a 	ret
 8011580:	01002644 	movi	r4,153
 8011584:	20c01816 	blt	r4,r3,80115e8 <__floatunsisf+0xcc>
 8011588:	20c9c83a 	sub	r4,r4,r3
 801158c:	8108983a 	sll	r4,r16,r4
 8011590:	017f0034 	movhi	r5,64512
 8011594:	297fffc4 	addi	r5,r5,-1
 8011598:	218001cc 	andi	r6,r4,7
 801159c:	214a703a 	and	r5,r4,r5
 80115a0:	30000426 	beq	r6,zero,80115b4 <__floatunsisf+0x98>
 80115a4:	210003cc 	andi	r4,r4,15
 80115a8:	01800104 	movi	r6,4
 80115ac:	21800126 	beq	r4,r6,80115b4 <__floatunsisf+0x98>
 80115b0:	298b883a 	add	r5,r5,r6
 80115b4:	2901002c 	andhi	r4,r5,1024
 80115b8:	20000526 	beq	r4,zero,80115d0 <__floatunsisf+0xb4>
 80115bc:	00c027c4 	movi	r3,159
 80115c0:	1887c83a 	sub	r3,r3,r2
 80115c4:	00bf0034 	movhi	r2,64512
 80115c8:	10bfffc4 	addi	r2,r2,-1
 80115cc:	288a703a 	and	r5,r5,r2
 80115d0:	280891ba 	slli	r4,r5,6
 80115d4:	2008d27a 	srli	r4,r4,9
 80115d8:	003fdf06 	br	8011558 <__alt_data_end+0xffff1b58>
 80115dc:	0007883a 	mov	r3,zero
 80115e0:	0009883a 	mov	r4,zero
 80115e4:	003fdc06 	br	8011558 <__alt_data_end+0xffff1b58>
 80115e8:	01402e44 	movi	r5,185
 80115ec:	28cbc83a 	sub	r5,r5,r3
 80115f0:	01000144 	movi	r4,5
 80115f4:	2089c83a 	sub	r4,r4,r2
 80115f8:	814a983a 	sll	r5,r16,r5
 80115fc:	8108d83a 	srl	r4,r16,r4
 8011600:	2820c03a 	cmpne	r16,r5,zero
 8011604:	2408b03a 	or	r4,r4,r16
 8011608:	003fe106 	br	8011590 <__alt_data_end+0xffff1b90>

0801160c <__clzsi2>:
 801160c:	00bfffd4 	movui	r2,65535
 8011610:	11000536 	bltu	r2,r4,8011628 <__clzsi2+0x1c>
 8011614:	00803fc4 	movi	r2,255
 8011618:	11000f36 	bltu	r2,r4,8011658 <__clzsi2+0x4c>
 801161c:	00800804 	movi	r2,32
 8011620:	0007883a 	mov	r3,zero
 8011624:	00000506 	br	801163c <__clzsi2+0x30>
 8011628:	00804034 	movhi	r2,256
 801162c:	10bfffc4 	addi	r2,r2,-1
 8011630:	11000c2e 	bgeu	r2,r4,8011664 <__clzsi2+0x58>
 8011634:	00800204 	movi	r2,8
 8011638:	00c00604 	movi	r3,24
 801163c:	20c8d83a 	srl	r4,r4,r3
 8011640:	00c20074 	movhi	r3,2049
 8011644:	18d8a404 	addi	r3,r3,25232
 8011648:	1909883a 	add	r4,r3,r4
 801164c:	20c00003 	ldbu	r3,0(r4)
 8011650:	10c5c83a 	sub	r2,r2,r3
 8011654:	f800283a 	ret
 8011658:	00800604 	movi	r2,24
 801165c:	00c00204 	movi	r3,8
 8011660:	003ff606 	br	801163c <__alt_data_end+0xffff1c3c>
 8011664:	00800404 	movi	r2,16
 8011668:	1007883a 	mov	r3,r2
 801166c:	003ff306 	br	801163c <__alt_data_end+0xffff1c3c>

08011670 <__mulsi3>:
 8011670:	0005883a 	mov	r2,zero
 8011674:	20000726 	beq	r4,zero,8011694 <__mulsi3+0x24>
 8011678:	20c0004c 	andi	r3,r4,1
 801167c:	2008d07a 	srli	r4,r4,1
 8011680:	18000126 	beq	r3,zero,8011688 <__mulsi3+0x18>
 8011684:	1145883a 	add	r2,r2,r5
 8011688:	294b883a 	add	r5,r5,r5
 801168c:	203ffa1e 	bne	r4,zero,8011678 <__alt_data_end+0xffff1c78>
 8011690:	f800283a 	ret
 8011694:	f800283a 	ret

08011698 <_printf_r>:
 8011698:	defffd04 	addi	sp,sp,-12
 801169c:	dfc00015 	stw	ra,0(sp)
 80116a0:	d9800115 	stw	r6,4(sp)
 80116a4:	d9c00215 	stw	r7,8(sp)
 80116a8:	20c00217 	ldw	r3,8(r4)
 80116ac:	01820074 	movhi	r6,2049
 80116b0:	31876104 	addi	r6,r6,7556
 80116b4:	19800115 	stw	r6,4(r3)
 80116b8:	280d883a 	mov	r6,r5
 80116bc:	21400217 	ldw	r5,8(r4)
 80116c0:	d9c00104 	addi	r7,sp,4
 80116c4:	801183c0 	call	801183c <___vfprintf_internal_r>
 80116c8:	dfc00017 	ldw	ra,0(sp)
 80116cc:	dec00304 	addi	sp,sp,12
 80116d0:	f800283a 	ret

080116d4 <printf>:
 80116d4:	defffc04 	addi	sp,sp,-16
 80116d8:	dfc00015 	stw	ra,0(sp)
 80116dc:	d9400115 	stw	r5,4(sp)
 80116e0:	d9800215 	stw	r6,8(sp)
 80116e4:	d9c00315 	stw	r7,12(sp)
 80116e8:	00820074 	movhi	r2,2049
 80116ec:	109dc604 	addi	r2,r2,30488
 80116f0:	10800017 	ldw	r2,0(r2)
 80116f4:	01420074 	movhi	r5,2049
 80116f8:	29476104 	addi	r5,r5,7556
 80116fc:	10c00217 	ldw	r3,8(r2)
 8011700:	d9800104 	addi	r6,sp,4
 8011704:	19400115 	stw	r5,4(r3)
 8011708:	200b883a 	mov	r5,r4
 801170c:	11000217 	ldw	r4,8(r2)
 8011710:	8011d680 	call	8011d68 <__vfprintf_internal>
 8011714:	dfc00017 	ldw	ra,0(sp)
 8011718:	dec00404 	addi	sp,sp,16
 801171c:	f800283a 	ret

08011720 <_puts_r>:
 8011720:	defffd04 	addi	sp,sp,-12
 8011724:	dc000015 	stw	r16,0(sp)
 8011728:	2021883a 	mov	r16,r4
 801172c:	2809883a 	mov	r4,r5
 8011730:	dfc00215 	stw	ra,8(sp)
 8011734:	dc400115 	stw	r17,4(sp)
 8011738:	2823883a 	mov	r17,r5
 801173c:	80117b40 	call	80117b4 <strlen>
 8011740:	81400217 	ldw	r5,8(r16)
 8011744:	01020074 	movhi	r4,2049
 8011748:	21076104 	addi	r4,r4,7556
 801174c:	29000115 	stw	r4,4(r5)
 8011750:	100f883a 	mov	r7,r2
 8011754:	880d883a 	mov	r6,r17
 8011758:	8009883a 	mov	r4,r16
 801175c:	8011d840 	call	8011d84 <__sfvwrite_small_dev>
 8011760:	00ffffc4 	movi	r3,-1
 8011764:	10c00926 	beq	r2,r3,801178c <_puts_r+0x6c>
 8011768:	81400217 	ldw	r5,8(r16)
 801176c:	01820074 	movhi	r6,2049
 8011770:	01c00044 	movi	r7,1
 8011774:	28800117 	ldw	r2,4(r5)
 8011778:	3198e404 	addi	r6,r6,25488
 801177c:	8009883a 	mov	r4,r16
 8011780:	103ee83a 	callr	r2
 8011784:	10bfffe0 	cmpeqi	r2,r2,-1
 8011788:	0085c83a 	sub	r2,zero,r2
 801178c:	dfc00217 	ldw	ra,8(sp)
 8011790:	dc400117 	ldw	r17,4(sp)
 8011794:	dc000017 	ldw	r16,0(sp)
 8011798:	dec00304 	addi	sp,sp,12
 801179c:	f800283a 	ret

080117a0 <puts>:
 80117a0:	00820074 	movhi	r2,2049
 80117a4:	109dc604 	addi	r2,r2,30488
 80117a8:	200b883a 	mov	r5,r4
 80117ac:	11000017 	ldw	r4,0(r2)
 80117b0:	80117201 	jmpi	8011720 <_puts_r>

080117b4 <strlen>:
 80117b4:	2005883a 	mov	r2,r4
 80117b8:	10c00007 	ldb	r3,0(r2)
 80117bc:	18000226 	beq	r3,zero,80117c8 <strlen+0x14>
 80117c0:	10800044 	addi	r2,r2,1
 80117c4:	003ffc06 	br	80117b8 <__alt_data_end+0xffff1db8>
 80117c8:	1105c83a 	sub	r2,r2,r4
 80117cc:	f800283a 	ret

080117d0 <print_repeat>:
 80117d0:	defffb04 	addi	sp,sp,-20
 80117d4:	dc800315 	stw	r18,12(sp)
 80117d8:	dc400215 	stw	r17,8(sp)
 80117dc:	dc000115 	stw	r16,4(sp)
 80117e0:	dfc00415 	stw	ra,16(sp)
 80117e4:	2025883a 	mov	r18,r4
 80117e8:	2823883a 	mov	r17,r5
 80117ec:	d9800005 	stb	r6,0(sp)
 80117f0:	3821883a 	mov	r16,r7
 80117f4:	04000a0e 	bge	zero,r16,8011820 <print_repeat+0x50>
 80117f8:	88800117 	ldw	r2,4(r17)
 80117fc:	01c00044 	movi	r7,1
 8011800:	d80d883a 	mov	r6,sp
 8011804:	880b883a 	mov	r5,r17
 8011808:	9009883a 	mov	r4,r18
 801180c:	103ee83a 	callr	r2
 8011810:	843fffc4 	addi	r16,r16,-1
 8011814:	103ff726 	beq	r2,zero,80117f4 <__alt_data_end+0xffff1df4>
 8011818:	00bfffc4 	movi	r2,-1
 801181c:	00000106 	br	8011824 <print_repeat+0x54>
 8011820:	0005883a 	mov	r2,zero
 8011824:	dfc00417 	ldw	ra,16(sp)
 8011828:	dc800317 	ldw	r18,12(sp)
 801182c:	dc400217 	ldw	r17,8(sp)
 8011830:	dc000117 	ldw	r16,4(sp)
 8011834:	dec00504 	addi	sp,sp,20
 8011838:	f800283a 	ret

0801183c <___vfprintf_internal_r>:
 801183c:	deffe504 	addi	sp,sp,-108
 8011840:	d8c00804 	addi	r3,sp,32
 8011844:	ddc01815 	stw	r23,96(sp)
 8011848:	dd801715 	stw	r22,92(sp)
 801184c:	dd401615 	stw	r21,88(sp)
 8011850:	dd001515 	stw	r20,84(sp)
 8011854:	dcc01415 	stw	r19,80(sp)
 8011858:	dc801315 	stw	r18,76(sp)
 801185c:	dc401215 	stw	r17,72(sp)
 8011860:	dc001115 	stw	r16,68(sp)
 8011864:	dfc01a15 	stw	ra,104(sp)
 8011868:	df001915 	stw	fp,100(sp)
 801186c:	2029883a 	mov	r20,r4
 8011870:	2823883a 	mov	r17,r5
 8011874:	382d883a 	mov	r22,r7
 8011878:	d9800f15 	stw	r6,60(sp)
 801187c:	0021883a 	mov	r16,zero
 8011880:	d8000e15 	stw	zero,56(sp)
 8011884:	d8000a15 	stw	zero,40(sp)
 8011888:	002b883a 	mov	r21,zero
 801188c:	0027883a 	mov	r19,zero
 8011890:	0025883a 	mov	r18,zero
 8011894:	d8000c15 	stw	zero,48(sp)
 8011898:	d8000b15 	stw	zero,44(sp)
 801189c:	002f883a 	mov	r23,zero
 80118a0:	d8c00915 	stw	r3,36(sp)
 80118a4:	d8c00f17 	ldw	r3,60(sp)
 80118a8:	19000003 	ldbu	r4,0(r3)
 80118ac:	20803fcc 	andi	r2,r4,255
 80118b0:	1080201c 	xori	r2,r2,128
 80118b4:	10bfe004 	addi	r2,r2,-128
 80118b8:	10011e26 	beq	r2,zero,8011d34 <___vfprintf_internal_r+0x4f8>
 80118bc:	00c00044 	movi	r3,1
 80118c0:	b8c01426 	beq	r23,r3,8011914 <___vfprintf_internal_r+0xd8>
 80118c4:	1dc00216 	blt	r3,r23,80118d0 <___vfprintf_internal_r+0x94>
 80118c8:	b8000626 	beq	r23,zero,80118e4 <___vfprintf_internal_r+0xa8>
 80118cc:	00011506 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 80118d0:	01400084 	movi	r5,2
 80118d4:	b9401d26 	beq	r23,r5,801194c <___vfprintf_internal_r+0x110>
 80118d8:	014000c4 	movi	r5,3
 80118dc:	b9402b26 	beq	r23,r5,801198c <___vfprintf_internal_r+0x150>
 80118e0:	00011006 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 80118e4:	01400944 	movi	r5,37
 80118e8:	1140fc26 	beq	r2,r5,8011cdc <___vfprintf_internal_r+0x4a0>
 80118ec:	88800117 	ldw	r2,4(r17)
 80118f0:	d9000005 	stb	r4,0(sp)
 80118f4:	01c00044 	movi	r7,1
 80118f8:	d80d883a 	mov	r6,sp
 80118fc:	880b883a 	mov	r5,r17
 8011900:	a009883a 	mov	r4,r20
 8011904:	103ee83a 	callr	r2
 8011908:	1000d81e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 801190c:	84000044 	addi	r16,r16,1
 8011910:	00010406 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 8011914:	01400c04 	movi	r5,48
 8011918:	1140fa26 	beq	r2,r5,8011d04 <___vfprintf_internal_r+0x4c8>
 801191c:	01400944 	movi	r5,37
 8011920:	11400a1e 	bne	r2,r5,801194c <___vfprintf_internal_r+0x110>
 8011924:	d8800005 	stb	r2,0(sp)
 8011928:	88800117 	ldw	r2,4(r17)
 801192c:	b80f883a 	mov	r7,r23
 8011930:	d80d883a 	mov	r6,sp
 8011934:	880b883a 	mov	r5,r17
 8011938:	a009883a 	mov	r4,r20
 801193c:	103ee83a 	callr	r2
 8011940:	1000ca1e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011944:	84000044 	addi	r16,r16,1
 8011948:	0000f506 	br	8011d20 <___vfprintf_internal_r+0x4e4>
 801194c:	25fff404 	addi	r23,r4,-48
 8011950:	bdc03fcc 	andi	r23,r23,255
 8011954:	00c00244 	movi	r3,9
 8011958:	1dc00936 	bltu	r3,r23,8011980 <___vfprintf_internal_r+0x144>
 801195c:	00bfffc4 	movi	r2,-1
 8011960:	90800426 	beq	r18,r2,8011974 <___vfprintf_internal_r+0x138>
 8011964:	01400284 	movi	r5,10
 8011968:	9009883a 	mov	r4,r18
 801196c:	80116700 	call	8011670 <__mulsi3>
 8011970:	00000106 	br	8011978 <___vfprintf_internal_r+0x13c>
 8011974:	0005883a 	mov	r2,zero
 8011978:	b8a5883a 	add	r18,r23,r2
 801197c:	0000e206 	br	8011d08 <___vfprintf_internal_r+0x4cc>
 8011980:	01400b84 	movi	r5,46
 8011984:	1140e426 	beq	r2,r5,8011d18 <___vfprintf_internal_r+0x4dc>
 8011988:	05c00084 	movi	r23,2
 801198c:	213ff404 	addi	r4,r4,-48
 8011990:	27003fcc 	andi	fp,r4,255
 8011994:	00c00244 	movi	r3,9
 8011998:	1f000936 	bltu	r3,fp,80119c0 <___vfprintf_internal_r+0x184>
 801199c:	00bfffc4 	movi	r2,-1
 80119a0:	98800426 	beq	r19,r2,80119b4 <___vfprintf_internal_r+0x178>
 80119a4:	01400284 	movi	r5,10
 80119a8:	9809883a 	mov	r4,r19
 80119ac:	80116700 	call	8011670 <__mulsi3>
 80119b0:	00000106 	br	80119b8 <___vfprintf_internal_r+0x17c>
 80119b4:	0005883a 	mov	r2,zero
 80119b8:	e0a7883a 	add	r19,fp,r2
 80119bc:	0000d906 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 80119c0:	00c01b04 	movi	r3,108
 80119c4:	10c0d226 	beq	r2,r3,8011d10 <___vfprintf_internal_r+0x4d4>
 80119c8:	013fffc4 	movi	r4,-1
 80119cc:	99000226 	beq	r19,r4,80119d8 <___vfprintf_internal_r+0x19c>
 80119d0:	d8000b15 	stw	zero,44(sp)
 80119d4:	00000106 	br	80119dc <___vfprintf_internal_r+0x1a0>
 80119d8:	04c00044 	movi	r19,1
 80119dc:	01001a44 	movi	r4,105
 80119e0:	11001626 	beq	r2,r4,8011a3c <___vfprintf_internal_r+0x200>
 80119e4:	20800916 	blt	r4,r2,8011a0c <___vfprintf_internal_r+0x1d0>
 80119e8:	010018c4 	movi	r4,99
 80119ec:	11008826 	beq	r2,r4,8011c10 <___vfprintf_internal_r+0x3d4>
 80119f0:	01001904 	movi	r4,100
 80119f4:	11001126 	beq	r2,r4,8011a3c <___vfprintf_internal_r+0x200>
 80119f8:	01001604 	movi	r4,88
 80119fc:	1100c81e 	bne	r2,r4,8011d20 <___vfprintf_internal_r+0x4e4>
 8011a00:	00c00044 	movi	r3,1
 8011a04:	d8c00e15 	stw	r3,56(sp)
 8011a08:	00001506 	br	8011a60 <___vfprintf_internal_r+0x224>
 8011a0c:	01001cc4 	movi	r4,115
 8011a10:	11009826 	beq	r2,r4,8011c74 <___vfprintf_internal_r+0x438>
 8011a14:	20800416 	blt	r4,r2,8011a28 <___vfprintf_internal_r+0x1ec>
 8011a18:	01001bc4 	movi	r4,111
 8011a1c:	1100c01e 	bne	r2,r4,8011d20 <___vfprintf_internal_r+0x4e4>
 8011a20:	05400204 	movi	r21,8
 8011a24:	00000f06 	br	8011a64 <___vfprintf_internal_r+0x228>
 8011a28:	01001d44 	movi	r4,117
 8011a2c:	11000d26 	beq	r2,r4,8011a64 <___vfprintf_internal_r+0x228>
 8011a30:	01001e04 	movi	r4,120
 8011a34:	11000a26 	beq	r2,r4,8011a60 <___vfprintf_internal_r+0x224>
 8011a38:	0000b906 	br	8011d20 <___vfprintf_internal_r+0x4e4>
 8011a3c:	d8c00a17 	ldw	r3,40(sp)
 8011a40:	b7000104 	addi	fp,r22,4
 8011a44:	18000726 	beq	r3,zero,8011a64 <___vfprintf_internal_r+0x228>
 8011a48:	df000d15 	stw	fp,52(sp)
 8011a4c:	b5c00017 	ldw	r23,0(r22)
 8011a50:	b800080e 	bge	r23,zero,8011a74 <___vfprintf_internal_r+0x238>
 8011a54:	05efc83a 	sub	r23,zero,r23
 8011a58:	02400044 	movi	r9,1
 8011a5c:	00000606 	br	8011a78 <___vfprintf_internal_r+0x23c>
 8011a60:	05400404 	movi	r21,16
 8011a64:	b0c00104 	addi	r3,r22,4
 8011a68:	d8c00d15 	stw	r3,52(sp)
 8011a6c:	b5c00017 	ldw	r23,0(r22)
 8011a70:	d8000a15 	stw	zero,40(sp)
 8011a74:	0013883a 	mov	r9,zero
 8011a78:	d839883a 	mov	fp,sp
 8011a7c:	b8001726 	beq	r23,zero,8011adc <___vfprintf_internal_r+0x2a0>
 8011a80:	a80b883a 	mov	r5,r21
 8011a84:	b809883a 	mov	r4,r23
 8011a88:	da401015 	stw	r9,64(sp)
 8011a8c:	8010a200 	call	8010a20 <__udivsi3>
 8011a90:	a80b883a 	mov	r5,r21
 8011a94:	1009883a 	mov	r4,r2
 8011a98:	102d883a 	mov	r22,r2
 8011a9c:	80116700 	call	8011670 <__mulsi3>
 8011aa0:	b885c83a 	sub	r2,r23,r2
 8011aa4:	00c00244 	movi	r3,9
 8011aa8:	da401017 	ldw	r9,64(sp)
 8011aac:	18800216 	blt	r3,r2,8011ab8 <___vfprintf_internal_r+0x27c>
 8011ab0:	10800c04 	addi	r2,r2,48
 8011ab4:	00000506 	br	8011acc <___vfprintf_internal_r+0x290>
 8011ab8:	d8c00e17 	ldw	r3,56(sp)
 8011abc:	18000226 	beq	r3,zero,8011ac8 <___vfprintf_internal_r+0x28c>
 8011ac0:	10800dc4 	addi	r2,r2,55
 8011ac4:	00000106 	br	8011acc <___vfprintf_internal_r+0x290>
 8011ac8:	108015c4 	addi	r2,r2,87
 8011acc:	e0800005 	stb	r2,0(fp)
 8011ad0:	b02f883a 	mov	r23,r22
 8011ad4:	e7000044 	addi	fp,fp,1
 8011ad8:	003fe806 	br	8011a7c <__alt_data_end+0xffff207c>
 8011adc:	e6efc83a 	sub	r23,fp,sp
 8011ae0:	9dc5c83a 	sub	r2,r19,r23
 8011ae4:	0080090e 	bge	zero,r2,8011b0c <___vfprintf_internal_r+0x2d0>
 8011ae8:	e085883a 	add	r2,fp,r2
 8011aec:	01400c04 	movi	r5,48
 8011af0:	d8c00917 	ldw	r3,36(sp)
 8011af4:	e009883a 	mov	r4,fp
 8011af8:	e0c0032e 	bgeu	fp,r3,8011b08 <___vfprintf_internal_r+0x2cc>
 8011afc:	e7000044 	addi	fp,fp,1
 8011b00:	21400005 	stb	r5,0(r4)
 8011b04:	e0bffa1e 	bne	fp,r2,8011af0 <__alt_data_end+0xffff20f0>
 8011b08:	e6efc83a 	sub	r23,fp,sp
 8011b0c:	d8c00b17 	ldw	r3,44(sp)
 8011b10:	4dd1883a 	add	r8,r9,r23
 8011b14:	922dc83a 	sub	r22,r18,r8
 8011b18:	18001626 	beq	r3,zero,8011b74 <___vfprintf_internal_r+0x338>
 8011b1c:	48000a26 	beq	r9,zero,8011b48 <___vfprintf_internal_r+0x30c>
 8011b20:	00800b44 	movi	r2,45
 8011b24:	d8800805 	stb	r2,32(sp)
 8011b28:	88800117 	ldw	r2,4(r17)
 8011b2c:	01c00044 	movi	r7,1
 8011b30:	d9800804 	addi	r6,sp,32
 8011b34:	880b883a 	mov	r5,r17
 8011b38:	a009883a 	mov	r4,r20
 8011b3c:	103ee83a 	callr	r2
 8011b40:	10004a1e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011b44:	84000044 	addi	r16,r16,1
 8011b48:	0580070e 	bge	zero,r22,8011b68 <___vfprintf_internal_r+0x32c>
 8011b4c:	b00f883a 	mov	r7,r22
 8011b50:	01800c04 	movi	r6,48
 8011b54:	880b883a 	mov	r5,r17
 8011b58:	a009883a 	mov	r4,r20
 8011b5c:	80117d00 	call	80117d0 <print_repeat>
 8011b60:	1000421e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011b64:	85a1883a 	add	r16,r16,r22
 8011b68:	e02d883a 	mov	r22,fp
 8011b6c:	bf2fc83a 	sub	r23,r23,fp
 8011b70:	00002006 	br	8011bf4 <___vfprintf_internal_r+0x3b8>
 8011b74:	0580090e 	bge	zero,r22,8011b9c <___vfprintf_internal_r+0x360>
 8011b78:	b00f883a 	mov	r7,r22
 8011b7c:	01800804 	movi	r6,32
 8011b80:	880b883a 	mov	r5,r17
 8011b84:	a009883a 	mov	r4,r20
 8011b88:	da401015 	stw	r9,64(sp)
 8011b8c:	80117d00 	call	80117d0 <print_repeat>
 8011b90:	da401017 	ldw	r9,64(sp)
 8011b94:	1000351e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011b98:	85a1883a 	add	r16,r16,r22
 8011b9c:	483ff226 	beq	r9,zero,8011b68 <__alt_data_end+0xffff2168>
 8011ba0:	00800b44 	movi	r2,45
 8011ba4:	d8800805 	stb	r2,32(sp)
 8011ba8:	88800117 	ldw	r2,4(r17)
 8011bac:	01c00044 	movi	r7,1
 8011bb0:	d9800804 	addi	r6,sp,32
 8011bb4:	880b883a 	mov	r5,r17
 8011bb8:	a009883a 	mov	r4,r20
 8011bbc:	103ee83a 	callr	r2
 8011bc0:	10002a1e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011bc4:	84000044 	addi	r16,r16,1
 8011bc8:	003fe706 	br	8011b68 <__alt_data_end+0xffff2168>
 8011bcc:	b5bfffc4 	addi	r22,r22,-1
 8011bd0:	b0800003 	ldbu	r2,0(r22)
 8011bd4:	01c00044 	movi	r7,1
 8011bd8:	d9800804 	addi	r6,sp,32
 8011bdc:	d8800805 	stb	r2,32(sp)
 8011be0:	88800117 	ldw	r2,4(r17)
 8011be4:	880b883a 	mov	r5,r17
 8011be8:	a009883a 	mov	r4,r20
 8011bec:	103ee83a 	callr	r2
 8011bf0:	10001e1e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011bf4:	8585c83a 	sub	r2,r16,r22
 8011bf8:	b5c9883a 	add	r4,r22,r23
 8011bfc:	e085883a 	add	r2,fp,r2
 8011c00:	013ff216 	blt	zero,r4,8011bcc <__alt_data_end+0xffff21cc>
 8011c04:	1021883a 	mov	r16,r2
 8011c08:	dd800d17 	ldw	r22,52(sp)
 8011c0c:	00004406 	br	8011d20 <___vfprintf_internal_r+0x4e4>
 8011c10:	00800044 	movi	r2,1
 8011c14:	1480080e 	bge	r2,r18,8011c38 <___vfprintf_internal_r+0x3fc>
 8011c18:	95ffffc4 	addi	r23,r18,-1
 8011c1c:	b80f883a 	mov	r7,r23
 8011c20:	01800804 	movi	r6,32
 8011c24:	880b883a 	mov	r5,r17
 8011c28:	a009883a 	mov	r4,r20
 8011c2c:	80117d00 	call	80117d0 <print_repeat>
 8011c30:	10000e1e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011c34:	85e1883a 	add	r16,r16,r23
 8011c38:	b0800017 	ldw	r2,0(r22)
 8011c3c:	01c00044 	movi	r7,1
 8011c40:	d80d883a 	mov	r6,sp
 8011c44:	d8800005 	stb	r2,0(sp)
 8011c48:	88800117 	ldw	r2,4(r17)
 8011c4c:	880b883a 	mov	r5,r17
 8011c50:	a009883a 	mov	r4,r20
 8011c54:	b5c00104 	addi	r23,r22,4
 8011c58:	103ee83a 	callr	r2
 8011c5c:	1000031e 	bne	r2,zero,8011c6c <___vfprintf_internal_r+0x430>
 8011c60:	84000044 	addi	r16,r16,1
 8011c64:	b82d883a 	mov	r22,r23
 8011c68:	00002d06 	br	8011d20 <___vfprintf_internal_r+0x4e4>
 8011c6c:	00bfffc4 	movi	r2,-1
 8011c70:	00003106 	br	8011d38 <___vfprintf_internal_r+0x4fc>
 8011c74:	b5c00017 	ldw	r23,0(r22)
 8011c78:	b7000104 	addi	fp,r22,4
 8011c7c:	b809883a 	mov	r4,r23
 8011c80:	80117b40 	call	80117b4 <strlen>
 8011c84:	9091c83a 	sub	r8,r18,r2
 8011c88:	102d883a 	mov	r22,r2
 8011c8c:	0200090e 	bge	zero,r8,8011cb4 <___vfprintf_internal_r+0x478>
 8011c90:	400f883a 	mov	r7,r8
 8011c94:	01800804 	movi	r6,32
 8011c98:	880b883a 	mov	r5,r17
 8011c9c:	a009883a 	mov	r4,r20
 8011ca0:	da001015 	stw	r8,64(sp)
 8011ca4:	80117d00 	call	80117d0 <print_repeat>
 8011ca8:	da001017 	ldw	r8,64(sp)
 8011cac:	103fef1e 	bne	r2,zero,8011c6c <__alt_data_end+0xffff226c>
 8011cb0:	8221883a 	add	r16,r16,r8
 8011cb4:	88800117 	ldw	r2,4(r17)
 8011cb8:	b00f883a 	mov	r7,r22
 8011cbc:	b80d883a 	mov	r6,r23
 8011cc0:	880b883a 	mov	r5,r17
 8011cc4:	a009883a 	mov	r4,r20
 8011cc8:	103ee83a 	callr	r2
 8011ccc:	103fe71e 	bne	r2,zero,8011c6c <__alt_data_end+0xffff226c>
 8011cd0:	85a1883a 	add	r16,r16,r22
 8011cd4:	e02d883a 	mov	r22,fp
 8011cd8:	00001106 	br	8011d20 <___vfprintf_internal_r+0x4e4>
 8011cdc:	00c00044 	movi	r3,1
 8011ce0:	04ffffc4 	movi	r19,-1
 8011ce4:	d8000e15 	stw	zero,56(sp)
 8011ce8:	d8c00a15 	stw	r3,40(sp)
 8011cec:	05400284 	movi	r21,10
 8011cf0:	9825883a 	mov	r18,r19
 8011cf4:	d8000c15 	stw	zero,48(sp)
 8011cf8:	d8000b15 	stw	zero,44(sp)
 8011cfc:	182f883a 	mov	r23,r3
 8011d00:	00000806 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 8011d04:	ddc00b15 	stw	r23,44(sp)
 8011d08:	05c00084 	movi	r23,2
 8011d0c:	00000506 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 8011d10:	00c00044 	movi	r3,1
 8011d14:	d8c00c15 	stw	r3,48(sp)
 8011d18:	05c000c4 	movi	r23,3
 8011d1c:	00000106 	br	8011d24 <___vfprintf_internal_r+0x4e8>
 8011d20:	002f883a 	mov	r23,zero
 8011d24:	d8c00f17 	ldw	r3,60(sp)
 8011d28:	18c00044 	addi	r3,r3,1
 8011d2c:	d8c00f15 	stw	r3,60(sp)
 8011d30:	003edc06 	br	80118a4 <__alt_data_end+0xffff1ea4>
 8011d34:	8005883a 	mov	r2,r16
 8011d38:	dfc01a17 	ldw	ra,104(sp)
 8011d3c:	df001917 	ldw	fp,100(sp)
 8011d40:	ddc01817 	ldw	r23,96(sp)
 8011d44:	dd801717 	ldw	r22,92(sp)
 8011d48:	dd401617 	ldw	r21,88(sp)
 8011d4c:	dd001517 	ldw	r20,84(sp)
 8011d50:	dcc01417 	ldw	r19,80(sp)
 8011d54:	dc801317 	ldw	r18,76(sp)
 8011d58:	dc401217 	ldw	r17,72(sp)
 8011d5c:	dc001117 	ldw	r16,68(sp)
 8011d60:	dec01b04 	addi	sp,sp,108
 8011d64:	f800283a 	ret

08011d68 <__vfprintf_internal>:
 8011d68:	00820074 	movhi	r2,2049
 8011d6c:	109dc604 	addi	r2,r2,30488
 8011d70:	300f883a 	mov	r7,r6
 8011d74:	280d883a 	mov	r6,r5
 8011d78:	200b883a 	mov	r5,r4
 8011d7c:	11000017 	ldw	r4,0(r2)
 8011d80:	801183c1 	jmpi	801183c <___vfprintf_internal_r>

08011d84 <__sfvwrite_small_dev>:
 8011d84:	2880000b 	ldhu	r2,0(r5)
 8011d88:	1080020c 	andi	r2,r2,8
 8011d8c:	10002126 	beq	r2,zero,8011e14 <__sfvwrite_small_dev+0x90>
 8011d90:	2880008f 	ldh	r2,2(r5)
 8011d94:	defffa04 	addi	sp,sp,-24
 8011d98:	dc000015 	stw	r16,0(sp)
 8011d9c:	dfc00515 	stw	ra,20(sp)
 8011da0:	dd000415 	stw	r20,16(sp)
 8011da4:	dcc00315 	stw	r19,12(sp)
 8011da8:	dc800215 	stw	r18,8(sp)
 8011dac:	dc400115 	stw	r17,4(sp)
 8011db0:	2821883a 	mov	r16,r5
 8011db4:	10001216 	blt	r2,zero,8011e00 <__sfvwrite_small_dev+0x7c>
 8011db8:	2027883a 	mov	r19,r4
 8011dbc:	3025883a 	mov	r18,r6
 8011dc0:	3823883a 	mov	r17,r7
 8011dc4:	05010004 	movi	r20,1024
 8011dc8:	04400b0e 	bge	zero,r17,8011df8 <__sfvwrite_small_dev+0x74>
 8011dcc:	880f883a 	mov	r7,r17
 8011dd0:	a440010e 	bge	r20,r17,8011dd8 <__sfvwrite_small_dev+0x54>
 8011dd4:	01c10004 	movi	r7,1024
 8011dd8:	8140008f 	ldh	r5,2(r16)
 8011ddc:	900d883a 	mov	r6,r18
 8011de0:	9809883a 	mov	r4,r19
 8011de4:	8011e3c0 	call	8011e3c <_write_r>
 8011de8:	0080050e 	bge	zero,r2,8011e00 <__sfvwrite_small_dev+0x7c>
 8011dec:	88a3c83a 	sub	r17,r17,r2
 8011df0:	90a5883a 	add	r18,r18,r2
 8011df4:	003ff406 	br	8011dc8 <__alt_data_end+0xffff23c8>
 8011df8:	0005883a 	mov	r2,zero
 8011dfc:	00000706 	br	8011e1c <__sfvwrite_small_dev+0x98>
 8011e00:	8080000b 	ldhu	r2,0(r16)
 8011e04:	10801014 	ori	r2,r2,64
 8011e08:	8080000d 	sth	r2,0(r16)
 8011e0c:	00bfffc4 	movi	r2,-1
 8011e10:	00000206 	br	8011e1c <__sfvwrite_small_dev+0x98>
 8011e14:	00bfffc4 	movi	r2,-1
 8011e18:	f800283a 	ret
 8011e1c:	dfc00517 	ldw	ra,20(sp)
 8011e20:	dd000417 	ldw	r20,16(sp)
 8011e24:	dcc00317 	ldw	r19,12(sp)
 8011e28:	dc800217 	ldw	r18,8(sp)
 8011e2c:	dc400117 	ldw	r17,4(sp)
 8011e30:	dc000017 	ldw	r16,0(sp)
 8011e34:	dec00604 	addi	sp,sp,24
 8011e38:	f800283a 	ret

08011e3c <_write_r>:
 8011e3c:	defffd04 	addi	sp,sp,-12
 8011e40:	dc000015 	stw	r16,0(sp)
 8011e44:	040200b4 	movhi	r16,2050
 8011e48:	dc400115 	stw	r17,4(sp)
 8011e4c:	8422a704 	addi	r16,r16,-30052
 8011e50:	2023883a 	mov	r17,r4
 8011e54:	2809883a 	mov	r4,r5
 8011e58:	300b883a 	mov	r5,r6
 8011e5c:	380d883a 	mov	r6,r7
 8011e60:	dfc00215 	stw	ra,8(sp)
 8011e64:	80000015 	stw	zero,0(r16)
 8011e68:	80120380 	call	8012038 <write>
 8011e6c:	00ffffc4 	movi	r3,-1
 8011e70:	10c0031e 	bne	r2,r3,8011e80 <_write_r+0x44>
 8011e74:	80c00017 	ldw	r3,0(r16)
 8011e78:	18000126 	beq	r3,zero,8011e80 <_write_r+0x44>
 8011e7c:	88c00015 	stw	r3,0(r17)
 8011e80:	dfc00217 	ldw	ra,8(sp)
 8011e84:	dc400117 	ldw	r17,4(sp)
 8011e88:	dc000017 	ldw	r16,0(sp)
 8011e8c:	dec00304 	addi	sp,sp,12
 8011e90:	f800283a 	ret

08011e94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8011e94:	defffc04 	addi	sp,sp,-16
 8011e98:	df000315 	stw	fp,12(sp)
 8011e9c:	df000304 	addi	fp,sp,12
 8011ea0:	e13ffd15 	stw	r4,-12(fp)
 8011ea4:	e17ffe15 	stw	r5,-8(fp)
 8011ea8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8011eac:	e0fffe17 	ldw	r3,-8(fp)
 8011eb0:	e0bffd17 	ldw	r2,-12(fp)
 8011eb4:	18800c26 	beq	r3,r2,8011ee8 <alt_load_section+0x54>
  {
    while( to != end )
 8011eb8:	00000806 	br	8011edc <alt_load_section+0x48>
    {
      *to++ = *from++;
 8011ebc:	e0bffe17 	ldw	r2,-8(fp)
 8011ec0:	10c00104 	addi	r3,r2,4
 8011ec4:	e0fffe15 	stw	r3,-8(fp)
 8011ec8:	e0fffd17 	ldw	r3,-12(fp)
 8011ecc:	19000104 	addi	r4,r3,4
 8011ed0:	e13ffd15 	stw	r4,-12(fp)
 8011ed4:	18c00017 	ldw	r3,0(r3)
 8011ed8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8011edc:	e0fffe17 	ldw	r3,-8(fp)
 8011ee0:	e0bfff17 	ldw	r2,-4(fp)
 8011ee4:	18bff51e 	bne	r3,r2,8011ebc <__alt_data_end+0xffff24bc>
    {
      *to++ = *from++;
    }
  }
}
 8011ee8:	0001883a 	nop
 8011eec:	e037883a 	mov	sp,fp
 8011ef0:	df000017 	ldw	fp,0(sp)
 8011ef4:	dec00104 	addi	sp,sp,4
 8011ef8:	f800283a 	ret

08011efc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8011efc:	defffe04 	addi	sp,sp,-8
 8011f00:	dfc00115 	stw	ra,4(sp)
 8011f04:	df000015 	stw	fp,0(sp)
 8011f08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8011f0c:	01820074 	movhi	r6,2049
 8011f10:	319dd204 	addi	r6,r6,30536
 8011f14:	01420074 	movhi	r5,2049
 8011f18:	2958fd04 	addi	r5,r5,25588
 8011f1c:	01020074 	movhi	r4,2049
 8011f20:	211dd204 	addi	r4,r4,30536
 8011f24:	8011e940 	call	8011e94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8011f28:	01820074 	movhi	r6,2049
 8011f2c:	31808c04 	addi	r6,r6,560
 8011f30:	01420074 	movhi	r5,2049
 8011f34:	29400804 	addi	r5,r5,32
 8011f38:	01020074 	movhi	r4,2049
 8011f3c:	21000804 	addi	r4,r4,32
 8011f40:	8011e940 	call	8011e94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8011f44:	01820074 	movhi	r6,2049
 8011f48:	3198fd04 	addi	r6,r6,25588
 8011f4c:	01420074 	movhi	r5,2049
 8011f50:	29582a04 	addi	r5,r5,24744
 8011f54:	01020074 	movhi	r4,2049
 8011f58:	21182a04 	addi	r4,r4,24744
 8011f5c:	8011e940 	call	8011e94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8011f60:	8014c180 	call	8014c18 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8011f64:	8014e940 	call	8014e94 <alt_icache_flush_all>
}
 8011f68:	0001883a 	nop
 8011f6c:	e037883a 	mov	sp,fp
 8011f70:	dfc00117 	ldw	ra,4(sp)
 8011f74:	df000017 	ldw	fp,0(sp)
 8011f78:	dec00204 	addi	sp,sp,8
 8011f7c:	f800283a 	ret

08011f80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8011f80:	defffd04 	addi	sp,sp,-12
 8011f84:	dfc00215 	stw	ra,8(sp)
 8011f88:	df000115 	stw	fp,4(sp)
 8011f8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8011f90:	0009883a 	mov	r4,zero
 8011f94:	801216c0 	call	801216c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8011f98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8011f9c:	80121a40 	call	80121a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8011fa0:	01820074 	movhi	r6,2049
 8011fa4:	3198e504 	addi	r6,r6,25492
 8011fa8:	01420074 	movhi	r5,2049
 8011fac:	2958e504 	addi	r5,r5,25492
 8011fb0:	01020074 	movhi	r4,2049
 8011fb4:	2118e504 	addi	r4,r4,25492
 8011fb8:	80152380 	call	8015238 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8011fbc:	8014d440 	call	8014d44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8011fc0:	01020074 	movhi	r4,2049
 8011fc4:	21136904 	addi	r4,r4,19876
 8011fc8:	8015c540 	call	8015c54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8011fcc:	d0a4e317 	ldw	r2,-27764(gp)
 8011fd0:	d0e4e417 	ldw	r3,-27760(gp)
 8011fd4:	d124e517 	ldw	r4,-27756(gp)
 8011fd8:	200d883a 	mov	r6,r4
 8011fdc:	180b883a 	mov	r5,r3
 8011fe0:	1009883a 	mov	r4,r2
 8011fe4:	80105c80 	call	80105c8 <main>
 8011fe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8011fec:	01000044 	movi	r4,1
 8011ff0:	8014b400 	call	8014b40 <close>
  exit (result);
 8011ff4:	e13fff17 	ldw	r4,-4(fp)
 8011ff8:	8015c680 	call	8015c68 <exit>

08011ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011ffc:	defffe04 	addi	sp,sp,-8
 8012000:	dfc00115 	stw	ra,4(sp)
 8012004:	df000015 	stw	fp,0(sp)
 8012008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801200c:	d0a00917 	ldw	r2,-32732(gp)
 8012010:	10000326 	beq	r2,zero,8012020 <alt_get_errno+0x24>
 8012014:	d0a00917 	ldw	r2,-32732(gp)
 8012018:	103ee83a 	callr	r2
 801201c:	00000106 	br	8012024 <alt_get_errno+0x28>
 8012020:	d0a4e204 	addi	r2,gp,-27768
}
 8012024:	e037883a 	mov	sp,fp
 8012028:	dfc00117 	ldw	ra,4(sp)
 801202c:	df000017 	ldw	fp,0(sp)
 8012030:	dec00204 	addi	sp,sp,8
 8012034:	f800283a 	ret

08012038 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8012038:	defff904 	addi	sp,sp,-28
 801203c:	dfc00615 	stw	ra,24(sp)
 8012040:	df000515 	stw	fp,20(sp)
 8012044:	df000504 	addi	fp,sp,20
 8012048:	e13ffd15 	stw	r4,-12(fp)
 801204c:	e17ffe15 	stw	r5,-8(fp)
 8012050:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012054:	e0bffd17 	ldw	r2,-12(fp)
 8012058:	10000816 	blt	r2,zero,801207c <write+0x44>
 801205c:	01400304 	movi	r5,12
 8012060:	e13ffd17 	ldw	r4,-12(fp)
 8012064:	80116700 	call	8011670 <__mulsi3>
 8012068:	1007883a 	mov	r3,r2
 801206c:	00820074 	movhi	r2,2049
 8012070:	109d6504 	addi	r2,r2,30100
 8012074:	1885883a 	add	r2,r3,r2
 8012078:	00000106 	br	8012080 <write+0x48>
 801207c:	0005883a 	mov	r2,zero
 8012080:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8012084:	e0bffb17 	ldw	r2,-20(fp)
 8012088:	10002126 	beq	r2,zero,8012110 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 801208c:	e0bffb17 	ldw	r2,-20(fp)
 8012090:	10800217 	ldw	r2,8(r2)
 8012094:	108000cc 	andi	r2,r2,3
 8012098:	10001826 	beq	r2,zero,80120fc <write+0xc4>
 801209c:	e0bffb17 	ldw	r2,-20(fp)
 80120a0:	10800017 	ldw	r2,0(r2)
 80120a4:	10800617 	ldw	r2,24(r2)
 80120a8:	10001426 	beq	r2,zero,80120fc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80120ac:	e0bffb17 	ldw	r2,-20(fp)
 80120b0:	10800017 	ldw	r2,0(r2)
 80120b4:	10800617 	ldw	r2,24(r2)
 80120b8:	e0ffff17 	ldw	r3,-4(fp)
 80120bc:	180d883a 	mov	r6,r3
 80120c0:	e17ffe17 	ldw	r5,-8(fp)
 80120c4:	e13ffb17 	ldw	r4,-20(fp)
 80120c8:	103ee83a 	callr	r2
 80120cc:	e0bffc15 	stw	r2,-16(fp)
 80120d0:	e0bffc17 	ldw	r2,-16(fp)
 80120d4:	1000070e 	bge	r2,zero,80120f4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80120d8:	8011ffc0 	call	8011ffc <alt_get_errno>
 80120dc:	1007883a 	mov	r3,r2
 80120e0:	e0bffc17 	ldw	r2,-16(fp)
 80120e4:	0085c83a 	sub	r2,zero,r2
 80120e8:	18800015 	stw	r2,0(r3)
        return -1;
 80120ec:	00bfffc4 	movi	r2,-1
 80120f0:	00000c06 	br	8012124 <write+0xec>
      }
      return rval;
 80120f4:	e0bffc17 	ldw	r2,-16(fp)
 80120f8:	00000a06 	br	8012124 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80120fc:	8011ffc0 	call	8011ffc <alt_get_errno>
 8012100:	1007883a 	mov	r3,r2
 8012104:	00800344 	movi	r2,13
 8012108:	18800015 	stw	r2,0(r3)
 801210c:	00000406 	br	8012120 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8012110:	8011ffc0 	call	8011ffc <alt_get_errno>
 8012114:	1007883a 	mov	r3,r2
 8012118:	00801444 	movi	r2,81
 801211c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8012120:	00bfffc4 	movi	r2,-1
}
 8012124:	e037883a 	mov	sp,fp
 8012128:	dfc00117 	ldw	ra,4(sp)
 801212c:	df000017 	ldw	fp,0(sp)
 8012130:	dec00204 	addi	sp,sp,8
 8012134:	f800283a 	ret

08012138 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8012138:	defffd04 	addi	sp,sp,-12
 801213c:	dfc00215 	stw	ra,8(sp)
 8012140:	df000115 	stw	fp,4(sp)
 8012144:	df000104 	addi	fp,sp,4
 8012148:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801214c:	d1600604 	addi	r5,gp,-32744
 8012150:	e13fff17 	ldw	r4,-4(fp)
 8012154:	8014ca00 	call	8014ca0 <alt_dev_llist_insert>
}
 8012158:	e037883a 	mov	sp,fp
 801215c:	dfc00117 	ldw	ra,4(sp)
 8012160:	df000017 	ldw	fp,0(sp)
 8012164:	dec00204 	addi	sp,sp,8
 8012168:	f800283a 	ret

0801216c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 801216c:	defffd04 	addi	sp,sp,-12
 8012170:	dfc00215 	stw	ra,8(sp)
 8012174:	df000115 	stw	fp,4(sp)
 8012178:	df000104 	addi	fp,sp,4
 801217c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8012180:	80159c80 	call	80159c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8012184:	00800044 	movi	r2,1
 8012188:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 801218c:	0001883a 	nop
 8012190:	e037883a 	mov	sp,fp
 8012194:	dfc00117 	ldw	ra,4(sp)
 8012198:	df000017 	ldw	fp,0(sp)
 801219c:	dec00204 	addi	sp,sp,8
 80121a0:	f800283a 	ret

080121a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80121a4:	defffe04 	addi	sp,sp,-8
 80121a8:	dfc00115 	stw	ra,4(sp)
 80121ac:	df000015 	stw	fp,0(sp)
 80121b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 80121b4:	01020074 	movhi	r4,2049
 80121b8:	21193504 	addi	r4,r4,25812
 80121bc:	80124500 	call	8012450 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80121c0:	01800044 	movi	r6,1
 80121c4:	000b883a 	mov	r5,zero
 80121c8:	01020074 	movhi	r4,2049
 80121cc:	21194d04 	addi	r4,r4,25908
 80121d0:	8013f7c0 	call	8013f7c <altera_avalon_jtag_uart_init>
 80121d4:	01020074 	movhi	r4,2049
 80121d8:	21194304 	addi	r4,r4,25868
 80121dc:	80121380 	call	8012138 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 80121e0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80121e4:	0001883a 	nop
}
 80121e8:	0001883a 	nop
 80121ec:	e037883a 	mov	sp,fp
 80121f0:	dfc00117 	ldw	ra,4(sp)
 80121f4:	df000017 	ldw	fp,0(sp)
 80121f8:	dec00204 	addi	sp,sp,8
 80121fc:	f800283a 	ret

08012200 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 8012200:	defff904 	addi	sp,sp,-28
 8012204:	dfc00615 	stw	ra,24(sp)
 8012208:	df000515 	stw	fp,20(sp)
 801220c:	df000504 	addi	fp,sp,20
 8012210:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 8012214:	008000b4 	movhi	r2,2
 8012218:	10a1a804 	addi	r2,r2,-31072
 801221c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 8012220:	e0bfff17 	ldw	r2,-4(fp)
 8012224:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8012228:	e0bffc17 	ldw	r2,-16(fp)
 801222c:	10800717 	ldw	r2,28(r2)
 8012230:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8012234:	e0bffd17 	ldw	r2,-12(fp)
 8012238:	10800217 	ldw	r2,8(r2)
 801223c:	10800098 	cmpnei	r2,r2,2
 8012240:	1000251e 	bne	r2,zero,80122d8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8012244:	e0bffd17 	ldw	r2,-12(fp)
 8012248:	10c00017 	ldw	r3,0(r2)
 801224c:	e0bffd17 	ldw	r2,-12(fp)
 8012250:	10800117 	ldw	r2,4(r2)
 8012254:	e13ffe04 	addi	r4,fp,-8
 8012258:	200f883a 	mov	r7,r4
 801225c:	100d883a 	mov	r6,r2
 8012260:	180b883a 	mov	r5,r3
 8012264:	e13ffc17 	ldw	r4,-16(fp)
 8012268:	80129b00 	call	80129b0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 801226c:	e0bffd17 	ldw	r2,-12(fp)
 8012270:	10c00117 	ldw	r3,4(r2)
 8012274:	e0bffe17 	ldw	r2,-8(fp)
 8012278:	1887c83a 	sub	r3,r3,r2
 801227c:	e0bffd17 	ldw	r2,-12(fp)
 8012280:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 8012284:	e0bffd17 	ldw	r2,-12(fp)
 8012288:	10c00017 	ldw	r3,0(r2)
 801228c:	e0bffe17 	ldw	r2,-8(fp)
 8012290:	1887883a 	add	r3,r3,r2
 8012294:	e0bffd17 	ldw	r2,-12(fp)
 8012298:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 801229c:	e0bffd17 	ldw	r2,-12(fp)
 80122a0:	10800117 	ldw	r2,4(r2)
 80122a4:	10000c26 	beq	r2,zero,80122d8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80122a8:	01400704 	movi	r5,28
 80122ac:	e13ffc17 	ldw	r4,-16(fp)
 80122b0:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80122b4:	01400084 	movi	r5,2
 80122b8:	e13ffc17 	ldw	r4,-16(fp)
 80122bc:	8013c0c0 	call	8013c0c <alt_avalon_i2c_int_enable>
 80122c0:	00000e06 	br	80122fc <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 80122c4:	e0bffb17 	ldw	r2,-20(fp)
 80122c8:	10bfffc4 	addi	r2,r2,-1
 80122cc:	e0bffb15 	stw	r2,-20(fp)
 80122d0:	e0bffb17 	ldw	r2,-20(fp)
 80122d4:	10000426 	beq	r2,zero,80122e8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 80122d8:	e13ffc17 	ldw	r4,-16(fp)
 80122dc:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 80122e0:	103ff81e 	bne	r2,zero,80122c4 <__alt_data_end+0xffff28c4>
 80122e4:	00000106 	br	80122ec <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 80122e8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 80122ec:	e13ffc17 	ldw	r4,-16(fp)
 80122f0:	80126140 	call	8012614 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 80122f4:	e0bffd17 	ldw	r2,-12(fp)
 80122f8:	10000215 	stw	zero,8(r2)
}
 80122fc:	e037883a 	mov	sp,fp
 8012300:	dfc00117 	ldw	ra,4(sp)
 8012304:	df000017 	ldw	fp,0(sp)
 8012308:	dec00204 	addi	sp,sp,8
 801230c:	f800283a 	ret

08012310 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8012310:	defffc04 	addi	sp,sp,-16
 8012314:	dfc00315 	stw	ra,12(sp)
 8012318:	df000215 	stw	fp,8(sp)
 801231c:	df000204 	addi	fp,sp,8
 8012320:	e13ffe15 	stw	r4,-8(fp)
 8012324:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 8012328:	e0bfff17 	ldw	r2,-4(fp)
 801232c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8012330:	e1ffff17 	ldw	r7,-4(fp)
 8012334:	000d883a 	mov	r6,zero
 8012338:	01420074 	movhi	r5,2049
 801233c:	29488004 	addi	r5,r5,8704
 8012340:	e13ffe17 	ldw	r4,-8(fp)
 8012344:	80123fc0 	call	80123fc <alt_avalon_i2c_register_callback>
}
 8012348:	0001883a 	nop
 801234c:	e037883a 	mov	sp,fp
 8012350:	dfc00117 	ldw	ra,4(sp)
 8012354:	df000017 	ldw	fp,0(sp)
 8012358:	dec00204 	addi	sp,sp,8
 801235c:	f800283a 	ret

08012360 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 8012360:	defff904 	addi	sp,sp,-28
 8012364:	dfc00615 	stw	ra,24(sp)
 8012368:	df000515 	stw	fp,20(sp)
 801236c:	df000504 	addi	fp,sp,20
 8012370:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8012374:	e0bfff17 	ldw	r2,-4(fp)
 8012378:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 801237c:	014007c4 	movi	r5,31
 8012380:	e13ffb17 	ldw	r4,-20(fp)
 8012384:	8013ba40 	call	8013ba4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8012388:	01400704 	movi	r5,28
 801238c:	e13ffb17 	ldw	r4,-20(fp)
 8012390:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8012394:	e0bffb17 	ldw	r2,-20(fp)
 8012398:	10800617 	ldw	r2,24(r2)
 801239c:	10001126 	beq	r2,zero,80123e4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80123a0:	0005303a 	rdctl	r2,status
 80123a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80123a8:	e0fffd17 	ldw	r3,-12(fp)
 80123ac:	00bfff84 	movi	r2,-2
 80123b0:	1884703a 	and	r2,r3,r2
 80123b4:	1001703a 	wrctl	status,r2
  
  return context;
 80123b8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 80123bc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 80123c0:	e0bffb17 	ldw	r2,-20(fp)
 80123c4:	10800617 	ldw	r2,24(r2)
 80123c8:	e13ffb17 	ldw	r4,-20(fp)
 80123cc:	103ee83a 	callr	r2
 80123d0:	e0bffc17 	ldw	r2,-16(fp)
 80123d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80123d8:	e0bffe17 	ldw	r2,-8(fp)
 80123dc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 80123e0:	0001883a 	nop
 80123e4:	0001883a 	nop
}
 80123e8:	e037883a 	mov	sp,fp
 80123ec:	dfc00117 	ldw	ra,4(sp)
 80123f0:	df000017 	ldw	fp,0(sp)
 80123f4:	dec00204 	addi	sp,sp,8
 80123f8:	f800283a 	ret

080123fc <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 80123fc:	defffb04 	addi	sp,sp,-20
 8012400:	df000415 	stw	fp,16(sp)
 8012404:	df000404 	addi	fp,sp,16
 8012408:	e13ffc15 	stw	r4,-16(fp)
 801240c:	e17ffd15 	stw	r5,-12(fp)
 8012410:	e1bffe15 	stw	r6,-8(fp)
 8012414:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8012418:	e0bffc17 	ldw	r2,-16(fp)
 801241c:	e0fffd17 	ldw	r3,-12(fp)
 8012420:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 8012424:	e0bffc17 	ldw	r2,-16(fp)
 8012428:	e0ffff17 	ldw	r3,-4(fp)
 801242c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 8012430:	e0bffc17 	ldw	r2,-16(fp)
 8012434:	e0fffe17 	ldw	r3,-8(fp)
 8012438:	10c00815 	stw	r3,32(r2)

    return ;
 801243c:	0001883a 	nop
}
 8012440:	e037883a 	mov	sp,fp
 8012444:	df000017 	ldw	fp,0(sp)
 8012448:	dec00104 	addi	sp,sp,4
 801244c:	f800283a 	ret

08012450 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8012450:	defff704 	addi	sp,sp,-36
 8012454:	dfc00815 	stw	ra,32(sp)
 8012458:	df000715 	stw	fp,28(sp)
 801245c:	df000704 	addi	fp,sp,28
 8012460:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8012464:	e13fff17 	ldw	r4,-4(fp)
 8012468:	80126140 	call	8012614 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 801246c:	014007c4 	movi	r5,31
 8012470:	e13fff17 	ldw	r4,-4(fp)
 8012474:	8013ba40 	call	8013ba4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8012478:	01400704 	movi	r5,28
 801247c:	e13fff17 	ldw	r4,-4(fp)
 8012480:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8012484:	014000c4 	movi	r5,3
 8012488:	e13fff17 	ldw	r4,-4(fp)
 801248c:	8013db00 	call	8013db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8012490:	014000c4 	movi	r5,3
 8012494:	e13fff17 	ldw	r4,-4(fp)
 8012498:	8013d000 	call	8013d00 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 801249c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 80124a0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 80124a4:	e0bffb04 	addi	r2,fp,-20
 80124a8:	018000b4 	movhi	r6,2
 80124ac:	31a1a804 	addi	r6,r6,-31072
 80124b0:	100b883a 	mov	r5,r2
 80124b4:	e13fff17 	ldw	r4,-4(fp)
 80124b8:	80128700 	call	8012870 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 80124bc:	e0bffb04 	addi	r2,fp,-20
 80124c0:	100b883a 	mov	r5,r2
 80124c4:	e13fff17 	ldw	r4,-4(fp)
 80124c8:	80127100 	call	8012710 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 80124cc:	d1600204 	addi	r5,gp,-32760
 80124d0:	e13fff17 	ldw	r4,-4(fp)
 80124d4:	8014ca00 	call	8014ca0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80124d8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 80124dc:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 80124e0:	e0bffa17 	ldw	r2,-24(fp)
 80124e4:	10000c1e 	bne	r2,zero,8012518 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 80124e8:	e0bfff17 	ldw	r2,-4(fp)
 80124ec:	10c00417 	ldw	r3,16(r2)
 80124f0:	e0bfff17 	ldw	r2,-4(fp)
 80124f4:	10800517 	ldw	r2,20(r2)
 80124f8:	d8000015 	stw	zero,0(sp)
 80124fc:	e1ffff17 	ldw	r7,-4(fp)
 8012500:	01820074 	movhi	r6,2049
 8012504:	3188d804 	addi	r6,r6,9056
 8012508:	100b883a 	mov	r5,r2
 801250c:	1809883a 	mov	r4,r3
 8012510:	8014eb40 	call	8014eb4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8012514:	00000406 	br	8012528 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 8012518:	01020074 	movhi	r4,2049
 801251c:	2118f204 	addi	r4,r4,25544
 8012520:	80155380 	call	8015538 <alt_printf>
    }

    return;
 8012524:	0001883a 	nop

}
 8012528:	e037883a 	mov	sp,fp
 801252c:	dfc00117 	ldw	ra,4(sp)
 8012530:	df000017 	ldw	fp,0(sp)
 8012534:	dec00204 	addi	sp,sp,8
 8012538:	f800283a 	ret

0801253c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 801253c:	defffc04 	addi	sp,sp,-16
 8012540:	dfc00315 	stw	ra,12(sp)
 8012544:	df000215 	stw	fp,8(sp)
 8012548:	df000204 	addi	fp,sp,8
 801254c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8012550:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8012554:	d1600204 	addi	r5,gp,-32760
 8012558:	e13fff17 	ldw	r4,-4(fp)
 801255c:	8014e040 	call	8014e04 <alt_find_dev>
 8012560:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8012564:	e0bffe17 	ldw	r2,-8(fp)
}
 8012568:	e037883a 	mov	sp,fp
 801256c:	dfc00117 	ldw	ra,4(sp)
 8012570:	df000017 	ldw	fp,0(sp)
 8012574:	dec00204 	addi	sp,sp,8
 8012578:	f800283a 	ret

0801257c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801257c:	defffc04 	addi	sp,sp,-16
 8012580:	df000315 	stw	fp,12(sp)
 8012584:	df000304 	addi	fp,sp,12
 8012588:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 801258c:	e0bfff17 	ldw	r2,-4(fp)
 8012590:	10800717 	ldw	r2,28(r2)
 8012594:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 8012598:	e0bfff17 	ldw	r2,-4(fp)
 801259c:	10800317 	ldw	r2,12(r2)
 80125a0:	10800204 	addi	r2,r2,8
 80125a4:	10800037 	ldwio	r2,0(r2)
 80125a8:	1080004c 	andi	r2,r2,1
 80125ac:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 80125b0:	e0bffe17 	ldw	r2,-8(fp)
 80125b4:	10000226 	beq	r2,zero,80125c0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 80125b8:	00bffe44 	movi	r2,-7
 80125bc:	00001106 	br	8012604 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 80125c0:	e0bfff17 	ldw	r2,-4(fp)
 80125c4:	10c00617 	ldw	r3,24(r2)
 80125c8:	00820074 	movhi	r2,2049
 80125cc:	10888004 	addi	r2,r2,8704
 80125d0:	1880021e 	bne	r3,r2,80125dc <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 80125d4:	e0bffd17 	ldw	r2,-12(fp)
 80125d8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 80125dc:	e0bfff17 	ldw	r2,-4(fp)
 80125e0:	10800317 	ldw	r2,12(r2)
 80125e4:	10800204 	addi	r2,r2,8
 80125e8:	e0ffff17 	ldw	r3,-4(fp)
 80125ec:	18c00317 	ldw	r3,12(r3)
 80125f0:	18c00204 	addi	r3,r3,8
 80125f4:	18c00037 	ldwio	r3,0(r3)
 80125f8:	18c00054 	ori	r3,r3,1
 80125fc:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8012600:	0005883a 	mov	r2,zero
}
 8012604:	e037883a 	mov	sp,fp
 8012608:	df000017 	ldw	fp,0(sp)
 801260c:	dec00104 	addi	sp,sp,4
 8012610:	f800283a 	ret

08012614 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8012614:	defffe04 	addi	sp,sp,-8
 8012618:	df000115 	stw	fp,4(sp)
 801261c:	df000104 	addi	fp,sp,4
 8012620:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8012624:	e0bfff17 	ldw	r2,-4(fp)
 8012628:	10800317 	ldw	r2,12(r2)
 801262c:	10800204 	addi	r2,r2,8
 8012630:	e0ffff17 	ldw	r3,-4(fp)
 8012634:	18c00317 	ldw	r3,12(r3)
 8012638:	18c00204 	addi	r3,r3,8
 801263c:	19000037 	ldwio	r4,0(r3)
 8012640:	00ffff84 	movi	r3,-2
 8012644:	20c6703a 	and	r3,r4,r3
 8012648:	10c00035 	stwio	r3,0(r2)

}
 801264c:	0001883a 	nop
 8012650:	e037883a 	mov	sp,fp
 8012654:	df000017 	ldw	fp,0(sp)
 8012658:	dec00104 	addi	sp,sp,4
 801265c:	f800283a 	ret

08012660 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8012660:	defffd04 	addi	sp,sp,-12
 8012664:	df000215 	stw	fp,8(sp)
 8012668:	df000204 	addi	fp,sp,8
 801266c:	e13ffe15 	stw	r4,-8(fp)
 8012670:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8012674:	e0bffe17 	ldw	r2,-8(fp)
 8012678:	10c00d17 	ldw	r3,52(r2)
 801267c:	e0bfff17 	ldw	r2,-4(fp)
 8012680:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8012684:	e0bffe17 	ldw	r2,-8(fp)
 8012688:	10800317 	ldw	r2,12(r2)
 801268c:	10800204 	addi	r2,r2,8
 8012690:	10800037 	ldwio	r2,0(r2)
 8012694:	1080008c 	andi	r2,r2,2
 8012698:	1005d07a 	srai	r2,r2,1
 801269c:	1007883a 	mov	r3,r2
 80126a0:	e0bfff17 	ldw	r2,-4(fp)
 80126a4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 80126a8:	e0bffe17 	ldw	r2,-8(fp)
 80126ac:	10800317 	ldw	r2,12(r2)
 80126b0:	10800904 	addi	r2,r2,36
 80126b4:	10800037 	ldwio	r2,0(r2)
 80126b8:	1007883a 	mov	r3,r2
 80126bc:	e0bfff17 	ldw	r2,-4(fp)
 80126c0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 80126c4:	e0bffe17 	ldw	r2,-8(fp)
 80126c8:	10800317 	ldw	r2,12(r2)
 80126cc:	10800804 	addi	r2,r2,32
 80126d0:	10800037 	ldwio	r2,0(r2)
 80126d4:	1007883a 	mov	r3,r2
 80126d8:	e0bfff17 	ldw	r2,-4(fp)
 80126dc:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 80126e0:	e0bffe17 	ldw	r2,-8(fp)
 80126e4:	10800317 	ldw	r2,12(r2)
 80126e8:	10800a04 	addi	r2,r2,40
 80126ec:	10800037 	ldwio	r2,0(r2)
 80126f0:	1007883a 	mov	r3,r2
 80126f4:	e0bfff17 	ldw	r2,-4(fp)
 80126f8:	10c0030d 	sth	r3,12(r2)
}
 80126fc:	0001883a 	nop
 8012700:	e037883a 	mov	sp,fp
 8012704:	df000017 	ldw	fp,0(sp)
 8012708:	dec00104 	addi	sp,sp,4
 801270c:	f800283a 	ret

08012710 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8012710:	defffd04 	addi	sp,sp,-12
 8012714:	df000215 	stw	fp,8(sp)
 8012718:	df000204 	addi	fp,sp,8
 801271c:	e13ffe15 	stw	r4,-8(fp)
 8012720:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8012724:	e0bfff17 	ldw	r2,-4(fp)
 8012728:	10c00017 	ldw	r3,0(r2)
 801272c:	e0bffe17 	ldw	r2,-8(fp)
 8012730:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8012734:	e0bffe17 	ldw	r2,-8(fp)
 8012738:	10800317 	ldw	r2,12(r2)
 801273c:	10c00204 	addi	r3,r2,8
 8012740:	e0bffe17 	ldw	r2,-8(fp)
 8012744:	10800317 	ldw	r2,12(r2)
 8012748:	10800204 	addi	r2,r2,8
 801274c:	10800037 	ldwio	r2,0(r2)
 8012750:	1009883a 	mov	r4,r2
 8012754:	00bfff44 	movi	r2,-3
 8012758:	2088703a 	and	r4,r4,r2
 801275c:	e0bfff17 	ldw	r2,-4(fp)
 8012760:	10800117 	ldw	r2,4(r2)
 8012764:	1085883a 	add	r2,r2,r2
 8012768:	1080008c 	andi	r2,r2,2
 801276c:	2084b03a 	or	r2,r4,r2
 8012770:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8012774:	e0bffe17 	ldw	r2,-8(fp)
 8012778:	10800317 	ldw	r2,12(r2)
 801277c:	10800904 	addi	r2,r2,36
 8012780:	e0ffff17 	ldw	r3,-4(fp)
 8012784:	18c0020b 	ldhu	r3,8(r3)
 8012788:	18ffffcc 	andi	r3,r3,65535
 801278c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 8012790:	e0bffe17 	ldw	r2,-8(fp)
 8012794:	10800317 	ldw	r2,12(r2)
 8012798:	10800804 	addi	r2,r2,32
 801279c:	e0ffff17 	ldw	r3,-4(fp)
 80127a0:	18c0028b 	ldhu	r3,10(r3)
 80127a4:	18ffffcc 	andi	r3,r3,65535
 80127a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 80127ac:	e0bffe17 	ldw	r2,-8(fp)
 80127b0:	10800317 	ldw	r2,12(r2)
 80127b4:	10800a04 	addi	r2,r2,40
 80127b8:	e0ffff17 	ldw	r3,-4(fp)
 80127bc:	18c0030b 	ldhu	r3,12(r3)
 80127c0:	18ffffcc 	andi	r3,r3,65535
 80127c4:	10c00035 	stwio	r3,0(r2)
}
 80127c8:	0001883a 	nop
 80127cc:	e037883a 	mov	sp,fp
 80127d0:	df000017 	ldw	fp,0(sp)
 80127d4:	dec00104 	addi	sp,sp,4
 80127d8:	f800283a 	ret

080127dc <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 80127dc:	defffb04 	addi	sp,sp,-20
 80127e0:	dfc00415 	stw	ra,16(sp)
 80127e4:	df000315 	stw	fp,12(sp)
 80127e8:	df000304 	addi	fp,sp,12
 80127ec:	e13ffd15 	stw	r4,-12(fp)
 80127f0:	e17ffe15 	stw	r5,-8(fp)
 80127f4:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 80127f8:	e0bffe17 	ldw	r2,-8(fp)
 80127fc:	1080028b 	ldhu	r2,10(r2)
 8012800:	10bfffcc 	andi	r2,r2,65535
 8012804:	10000426 	beq	r2,zero,8012818 <alt_avalon_i2c_master_config_speed_get+0x3c>
 8012808:	e0bffe17 	ldw	r2,-8(fp)
 801280c:	1080020b 	ldhu	r2,8(r2)
 8012810:	10bfffcc 	andi	r2,r2,65535
 8012814:	1000021e 	bne	r2,zero,8012820 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 8012818:	00bfff44 	movi	r2,-3
 801281c:	00000f06 	br	801285c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8012820:	e0bffd17 	ldw	r2,-12(fp)
 8012824:	11000c17 	ldw	r4,48(r2)
 8012828:	e0bffe17 	ldw	r2,-8(fp)
 801282c:	1080028b 	ldhu	r2,10(r2)
 8012830:	10ffffcc 	andi	r3,r2,65535
 8012834:	e0bffe17 	ldw	r2,-8(fp)
 8012838:	1080020b 	ldhu	r2,8(r2)
 801283c:	10bfffcc 	andi	r2,r2,65535
 8012840:	1885883a 	add	r2,r3,r2
 8012844:	100b883a 	mov	r5,r2
 8012848:	8010a200 	call	8010a20 <__udivsi3>
 801284c:	1007883a 	mov	r3,r2
 8012850:	e0bfff17 	ldw	r2,-4(fp)
 8012854:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8012858:	0005883a 	mov	r2,zero
}
 801285c:	e037883a 	mov	sp,fp
 8012860:	dfc00117 	ldw	ra,4(sp)
 8012864:	df000017 	ldw	fp,0(sp)
 8012868:	dec00204 	addi	sp,sp,8
 801286c:	f800283a 	ret

08012870 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8012870:	defff904 	addi	sp,sp,-28
 8012874:	dfc00615 	stw	ra,24(sp)
 8012878:	df000515 	stw	fp,20(sp)
 801287c:	df000504 	addi	fp,sp,20
 8012880:	e13ffd15 	stw	r4,-12(fp)
 8012884:	e17ffe15 	stw	r5,-8(fp)
 8012888:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 801288c:	e0ffff17 	ldw	r3,-4(fp)
 8012890:	008001b4 	movhi	r2,6
 8012894:	1086a004 	addi	r2,r2,6784
 8012898:	10c00436 	bltu	r2,r3,80128ac <alt_avalon_i2c_master_config_speed_set+0x3c>
 801289c:	e0bfff17 	ldw	r2,-4(fp)
 80128a0:	10000226 	beq	r2,zero,80128ac <alt_avalon_i2c_master_config_speed_set+0x3c>
 80128a4:	e0bfff17 	ldw	r2,-4(fp)
 80128a8:	1000021e 	bne	r2,zero,80128b4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 80128ac:	00bfff04 	movi	r2,-4
 80128b0:	00002906 	br	8012958 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 80128b4:	e0bffd17 	ldw	r2,-12(fp)
 80128b8:	10c00c17 	ldw	r3,48(r2)
 80128bc:	e0bfff17 	ldw	r2,-4(fp)
 80128c0:	1085883a 	add	r2,r2,r2
 80128c4:	100b883a 	mov	r5,r2
 80128c8:	1809883a 	mov	r4,r3
 80128cc:	8010a200 	call	8010a20 <__udivsi3>
 80128d0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80128d4:	e0bffb17 	ldw	r2,-20(fp)
 80128d8:	10800f04 	addi	r2,r2,60
 80128dc:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 80128e0:	e0bffb17 	ldw	r2,-20(fp)
 80128e4:	10bff104 	addi	r2,r2,-60
 80128e8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 80128ec:	e0ffff17 	ldw	r3,-4(fp)
 80128f0:	008000b4 	movhi	r2,2
 80128f4:	10a1a804 	addi	r2,r2,-31072
 80128f8:	10c0042e 	bgeu	r2,r3,801290c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 80128fc:	e0bffe17 	ldw	r2,-8(fp)
 8012900:	00c00044 	movi	r3,1
 8012904:	10c00115 	stw	r3,4(r2)
 8012908:	00000206 	br	8012914 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 801290c:	e0bffe17 	ldw	r2,-8(fp)
 8012910:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8012914:	e0bffb17 	ldw	r2,-20(fp)
 8012918:	1007883a 	mov	r3,r2
 801291c:	e0bffe17 	ldw	r2,-8(fp)
 8012920:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8012924:	e0bffc17 	ldw	r2,-16(fp)
 8012928:	1007883a 	mov	r3,r2
 801292c:	e0bffe17 	ldw	r2,-8(fp)
 8012930:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8012934:	e0bffb17 	ldw	r2,-20(fp)
 8012938:	1007883a 	mov	r3,r2
 801293c:	e0bffb17 	ldw	r2,-20(fp)
 8012940:	1004d07a 	srli	r2,r2,1
 8012944:	1885c83a 	sub	r2,r3,r2
 8012948:	1007883a 	mov	r3,r2
 801294c:	e0bffe17 	ldw	r2,-8(fp)
 8012950:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 8012954:	0005883a 	mov	r2,zero

}
 8012958:	e037883a 	mov	sp,fp
 801295c:	dfc00117 	ldw	ra,4(sp)
 8012960:	df000017 	ldw	fp,0(sp)
 8012964:	dec00204 	addi	sp,sp,8
 8012968:	f800283a 	ret

0801296c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 801296c:	defffe04 	addi	sp,sp,-8
 8012970:	df000115 	stw	fp,4(sp)
 8012974:	df000104 	addi	fp,sp,4
 8012978:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 801297c:	e0bfff17 	ldw	r2,-4(fp)
 8012980:	10800317 	ldw	r2,12(r2)
 8012984:	10800504 	addi	r2,r2,20
 8012988:	10800037 	ldwio	r2,0(r2)
 801298c:	1080004c 	andi	r2,r2,1
 8012990:	10000226 	beq	r2,zero,801299c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 8012994:	00800044 	movi	r2,1
 8012998:	00000106 	br	80129a0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 801299c:	0005883a 	mov	r2,zero
}
 80129a0:	e037883a 	mov	sp,fp
 80129a4:	df000017 	ldw	fp,0(sp)
 80129a8:	dec00104 	addi	sp,sp,4
 80129ac:	f800283a 	ret

080129b0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 80129b0:	defffb04 	addi	sp,sp,-20
 80129b4:	df000415 	stw	fp,16(sp)
 80129b8:	df000404 	addi	fp,sp,16
 80129bc:	e13ffc15 	stw	r4,-16(fp)
 80129c0:	e17ffd15 	stw	r5,-12(fp)
 80129c4:	e1bffe15 	stw	r6,-8(fp)
 80129c8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 80129cc:	e0bfff17 	ldw	r2,-4(fp)
 80129d0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 80129d4:	00001406 	br	8012a28 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80129d8:	e0bfff17 	ldw	r2,-4(fp)
 80129dc:	10800017 	ldw	r2,0(r2)
 80129e0:	e0fffd17 	ldw	r3,-12(fp)
 80129e4:	1885883a 	add	r2,r3,r2
 80129e8:	e0fffc17 	ldw	r3,-16(fp)
 80129ec:	18c00317 	ldw	r3,12(r3)
 80129f0:	18c00104 	addi	r3,r3,4
 80129f4:	18c00037 	ldwio	r3,0(r3)
 80129f8:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 80129fc:	e0bfff17 	ldw	r2,-4(fp)
 8012a00:	10800017 	ldw	r2,0(r2)
 8012a04:	10c00044 	addi	r3,r2,1
 8012a08:	e0bfff17 	ldw	r2,-4(fp)
 8012a0c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8012a10:	e0bfff17 	ldw	r2,-4(fp)
 8012a14:	10c00017 	ldw	r3,0(r2)
 8012a18:	e0bffe17 	ldw	r2,-8(fp)
 8012a1c:	1880021e 	bne	r3,r2,8012a28 <alt_avalon_i2c_rx_read_available+0x78>
 8012a20:	e0bffe17 	ldw	r2,-8(fp)
 8012a24:	1000061e 	bne	r2,zero,8012a40 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8012a28:	e0bffc17 	ldw	r2,-16(fp)
 8012a2c:	10800317 	ldw	r2,12(r2)
 8012a30:	10800704 	addi	r2,r2,28
 8012a34:	10800037 	ldwio	r2,0(r2)
 8012a38:	103fe71e 	bne	r2,zero,80129d8 <__alt_data_end+0xffff2fd8>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 8012a3c:	00000106 	br	8012a44 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8012a40:	0001883a 	nop
    }
}
 8012a44:	0001883a 	nop
 8012a48:	e037883a 	mov	sp,fp
 8012a4c:	df000017 	ldw	fp,0(sp)
 8012a50:	dec00104 	addi	sp,sp,4
 8012a54:	f800283a 	ret

08012a58 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 8012a58:	defffa04 	addi	sp,sp,-24
 8012a5c:	dfc00515 	stw	ra,20(sp)
 8012a60:	df000415 	stw	fp,16(sp)
 8012a64:	df000404 	addi	fp,sp,16
 8012a68:	e13ffe15 	stw	r4,-8(fp)
 8012a6c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 8012a70:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 8012a74:	008000b4 	movhi	r2,2
 8012a78:	10a1a804 	addi	r2,r2,-31072
 8012a7c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8012a80:	00000d06 	br	8012ab8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 8012a84:	e0bffd17 	ldw	r2,-12(fp)
 8012a88:	108002a8 	cmpgeui	r2,r2,10
 8012a8c:	1000021e 	bne	r2,zero,8012a98 <alt_avalon_i2c_rx_read+0x40>
 8012a90:	0109c404 	movi	r4,10000
 8012a94:	80149ac0 	call	80149ac <alt_busy_sleep>
      if (--timeout == 0)
 8012a98:	e0bffd17 	ldw	r2,-12(fp)
 8012a9c:	10bfffc4 	addi	r2,r2,-1
 8012aa0:	e0bffd15 	stw	r2,-12(fp)
 8012aa4:	e0bffd17 	ldw	r2,-12(fp)
 8012aa8:	1000031e 	bne	r2,zero,8012ab8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 8012aac:	00bfff84 	movi	r2,-2
 8012ab0:	e0bffc15 	stw	r2,-16(fp)
        break;
 8012ab4:	00000506 	br	8012acc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8012ab8:	e0bffe17 	ldw	r2,-8(fp)
 8012abc:	10800317 	ldw	r2,12(r2)
 8012ac0:	10800704 	addi	r2,r2,28
 8012ac4:	10800037 	ldwio	r2,0(r2)
 8012ac8:	103fee26 	beq	r2,zero,8012a84 <__alt_data_end+0xffff3084>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 8012acc:	e0bffe17 	ldw	r2,-8(fp)
 8012ad0:	10800317 	ldw	r2,12(r2)
 8012ad4:	10800104 	addi	r2,r2,4
 8012ad8:	10800037 	ldwio	r2,0(r2)
 8012adc:	1007883a 	mov	r3,r2
 8012ae0:	e0bfff17 	ldw	r2,-4(fp)
 8012ae4:	10c00005 	stb	r3,0(r2)
        
    return status;
 8012ae8:	e0bffc17 	ldw	r2,-16(fp)
}
 8012aec:	e037883a 	mov	sp,fp
 8012af0:	dfc00117 	ldw	ra,4(sp)
 8012af4:	df000017 	ldw	fp,0(sp)
 8012af8:	dec00204 	addi	sp,sp,8
 8012afc:	f800283a 	ret

08012b00 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 8012b00:	defff804 	addi	sp,sp,-32
 8012b04:	dfc00715 	stw	ra,28(sp)
 8012b08:	df000615 	stw	fp,24(sp)
 8012b0c:	df000604 	addi	fp,sp,24
 8012b10:	e13ffc15 	stw	r4,-16(fp)
 8012b14:	2809883a 	mov	r4,r5
 8012b18:	3007883a 	mov	r3,r6
 8012b1c:	3805883a 	mov	r2,r7
 8012b20:	e13ffd05 	stb	r4,-12(fp)
 8012b24:	e0fffe05 	stb	r3,-8(fp)
 8012b28:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 8012b2c:	0089c404 	movi	r2,10000
 8012b30:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8012b34:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8012b38:	00000c06 	br	8012b6c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 8012b3c:	e0bffa17 	ldw	r2,-24(fp)
 8012b40:	108002a8 	cmpgeui	r2,r2,10
 8012b44:	1000021e 	bne	r2,zero,8012b50 <alt_avalon_i2c_cmd_write+0x50>
 8012b48:	0109c404 	movi	r4,10000
 8012b4c:	80149ac0 	call	80149ac <alt_busy_sleep>
      if (--timeout == 0)
 8012b50:	e0bffa17 	ldw	r2,-24(fp)
 8012b54:	10bfffc4 	addi	r2,r2,-1
 8012b58:	e0bffa15 	stw	r2,-24(fp)
 8012b5c:	e0bffa17 	ldw	r2,-24(fp)
 8012b60:	1000021e 	bne	r2,zero,8012b6c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 8012b64:	00bfff84 	movi	r2,-2
 8012b68:	00001906 	br	8012bd0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8012b6c:	e0bffc17 	ldw	r2,-16(fp)
 8012b70:	10800317 	ldw	r2,12(r2)
 8012b74:	10800404 	addi	r2,r2,16
 8012b78:	10800037 	ldwio	r2,0(r2)
 8012b7c:	1080004c 	andi	r2,r2,1
 8012b80:	103fee26 	beq	r2,zero,8012b3c <__alt_data_end+0xffff313c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 8012b84:	e0bffc17 	ldw	r2,-16(fp)
 8012b88:	10800317 	ldw	r2,12(r2)
 8012b8c:	e13ffd03 	ldbu	r4,-12(fp)
 8012b90:	e0fffe03 	ldbu	r3,-8(fp)
 8012b94:	1806927a 	slli	r3,r3,9
 8012b98:	20c8b03a 	or	r4,r4,r3
 8012b9c:	e0ffff03 	ldbu	r3,-4(fp)
 8012ba0:	1806923a 	slli	r3,r3,8
 8012ba4:	20c6b03a 	or	r3,r4,r3
 8012ba8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8012bac:	e0bffb04 	addi	r2,fp,-20
 8012bb0:	100b883a 	mov	r5,r2
 8012bb4:	e13ffc17 	ldw	r4,-16(fp)
 8012bb8:	8012d400 	call	8012d40 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 8012bbc:	e0bffb04 	addi	r2,fp,-20
 8012bc0:	100b883a 	mov	r5,r2
 8012bc4:	e13ffc17 	ldw	r4,-16(fp)
 8012bc8:	8012d8c0 	call	8012d8c <alt_avalon_i2c_check_arblost>
    
    return status;
 8012bcc:	e0bffb17 	ldw	r2,-20(fp)
}
 8012bd0:	e037883a 	mov	sp,fp
 8012bd4:	dfc00117 	ldw	ra,4(sp)
 8012bd8:	df000017 	ldw	fp,0(sp)
 8012bdc:	dec00204 	addi	sp,sp,8
 8012be0:	f800283a 	ret

08012be4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 8012be4:	defffa04 	addi	sp,sp,-24
 8012be8:	dfc00515 	stw	ra,20(sp)
 8012bec:	df000415 	stw	fp,16(sp)
 8012bf0:	df000404 	addi	fp,sp,16
 8012bf4:	e13ffd15 	stw	r4,-12(fp)
 8012bf8:	e17ffe15 	stw	r5,-8(fp)
 8012bfc:	3005883a 	mov	r2,r6
 8012c00:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8012c04:	e0bffd17 	ldw	r2,-12(fp)
 8012c08:	10800d17 	ldw	r2,52(r2)
 8012c0c:	10800058 	cmpnei	r2,r2,1
 8012c10:	10001c1e 	bne	r2,zero,8012c84 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8012c14:	e0bffd17 	ldw	r2,-12(fp)
 8012c18:	10800917 	ldw	r2,36(r2)
 8012c1c:	109e0014 	ori	r2,r2,30720
 8012c20:	1004d1fa 	srli	r2,r2,7
 8012c24:	1007883a 	mov	r3,r2
 8012c28:	00bfff84 	movi	r2,-2
 8012c2c:	1884703a 	and	r2,r3,r2
 8012c30:	1007883a 	mov	r3,r2
 8012c34:	e0bffe17 	ldw	r2,-8(fp)
 8012c38:	1884b03a 	or	r2,r3,r2
 8012c3c:	10803fcc 	andi	r2,r2,255
 8012c40:	e0ffff03 	ldbu	r3,-4(fp)
 8012c44:	000f883a 	mov	r7,zero
 8012c48:	180d883a 	mov	r6,r3
 8012c4c:	100b883a 	mov	r5,r2
 8012c50:	e13ffd17 	ldw	r4,-12(fp)
 8012c54:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8012c58:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 8012c5c:	e0bffd17 	ldw	r2,-12(fp)
 8012c60:	10800917 	ldw	r2,36(r2)
 8012c64:	10803fcc 	andi	r2,r2,255
 8012c68:	000f883a 	mov	r7,zero
 8012c6c:	000d883a 	mov	r6,zero
 8012c70:	100b883a 	mov	r5,r2
 8012c74:	e13ffd17 	ldw	r4,-12(fp)
 8012c78:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8012c7c:	e0bffc15 	stw	r2,-16(fp)
 8012c80:	00000e06 	br	8012cbc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8012c84:	e0bffd17 	ldw	r2,-12(fp)
 8012c88:	10800917 	ldw	r2,36(r2)
 8012c8c:	1085883a 	add	r2,r2,r2
 8012c90:	1007883a 	mov	r3,r2
 8012c94:	e0bffe17 	ldw	r2,-8(fp)
 8012c98:	1884b03a 	or	r2,r3,r2
 8012c9c:	10803fcc 	andi	r2,r2,255
 8012ca0:	e0ffff03 	ldbu	r3,-4(fp)
 8012ca4:	000f883a 	mov	r7,zero
 8012ca8:	180d883a 	mov	r6,r3
 8012cac:	100b883a 	mov	r5,r2
 8012cb0:	e13ffd17 	ldw	r4,-12(fp)
 8012cb4:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8012cb8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 8012cbc:	e0bffc17 	ldw	r2,-16(fp)
}
 8012cc0:	e037883a 	mov	sp,fp
 8012cc4:	dfc00117 	ldw	ra,4(sp)
 8012cc8:	df000017 	ldw	fp,0(sp)
 8012ccc:	dec00204 	addi	sp,sp,8
 8012cd0:	f800283a 	ret

08012cd4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 8012cd4:	defffd04 	addi	sp,sp,-12
 8012cd8:	df000215 	stw	fp,8(sp)
 8012cdc:	df000204 	addi	fp,sp,8
 8012ce0:	e13ffe15 	stw	r4,-8(fp)
 8012ce4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 8012ce8:	e0bffe17 	ldw	r2,-8(fp)
 8012cec:	10c00917 	ldw	r3,36(r2)
 8012cf0:	e0bfff17 	ldw	r2,-4(fp)
 8012cf4:	10c00015 	stw	r3,0(r2)
}
 8012cf8:	0001883a 	nop
 8012cfc:	e037883a 	mov	sp,fp
 8012d00:	df000017 	ldw	fp,0(sp)
 8012d04:	dec00104 	addi	sp,sp,4
 8012d08:	f800283a 	ret

08012d0c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 8012d0c:	defffd04 	addi	sp,sp,-12
 8012d10:	df000215 	stw	fp,8(sp)
 8012d14:	df000204 	addi	fp,sp,8
 8012d18:	e13ffe15 	stw	r4,-8(fp)
 8012d1c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 8012d20:	e0bffe17 	ldw	r2,-8(fp)
 8012d24:	e0ffff17 	ldw	r3,-4(fp)
 8012d28:	10c00915 	stw	r3,36(r2)
}
 8012d2c:	0001883a 	nop
 8012d30:	e037883a 	mov	sp,fp
 8012d34:	df000017 	ldw	fp,0(sp)
 8012d38:	dec00104 	addi	sp,sp,4
 8012d3c:	f800283a 	ret

08012d40 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 8012d40:	defffd04 	addi	sp,sp,-12
 8012d44:	df000215 	stw	fp,8(sp)
 8012d48:	df000204 	addi	fp,sp,8
 8012d4c:	e13ffe15 	stw	r4,-8(fp)
 8012d50:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 8012d54:	e0bffe17 	ldw	r2,-8(fp)
 8012d58:	10800317 	ldw	r2,12(r2)
 8012d5c:	10800404 	addi	r2,r2,16
 8012d60:	10800037 	ldwio	r2,0(r2)
 8012d64:	1080010c 	andi	r2,r2,4
 8012d68:	10000326 	beq	r2,zero,8012d78 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 8012d6c:	e0bfff17 	ldw	r2,-4(fp)
 8012d70:	00fffec4 	movi	r3,-5
 8012d74:	10c00015 	stw	r3,0(r2)
    }
}
 8012d78:	0001883a 	nop
 8012d7c:	e037883a 	mov	sp,fp
 8012d80:	df000017 	ldw	fp,0(sp)
 8012d84:	dec00104 	addi	sp,sp,4
 8012d88:	f800283a 	ret

08012d8c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 8012d8c:	defffd04 	addi	sp,sp,-12
 8012d90:	df000215 	stw	fp,8(sp)
 8012d94:	df000204 	addi	fp,sp,8
 8012d98:	e13ffe15 	stw	r4,-8(fp)
 8012d9c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 8012da0:	e0bffe17 	ldw	r2,-8(fp)
 8012da4:	10800317 	ldw	r2,12(r2)
 8012da8:	10800404 	addi	r2,r2,16
 8012dac:	10800037 	ldwio	r2,0(r2)
 8012db0:	1080020c 	andi	r2,r2,8
 8012db4:	10000326 	beq	r2,zero,8012dc4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 8012db8:	e0bfff17 	ldw	r2,-4(fp)
 8012dbc:	00fffe84 	movi	r3,-6
 8012dc0:	10c00015 	stw	r3,0(r2)
    }
}
 8012dc4:	0001883a 	nop
 8012dc8:	e037883a 	mov	sp,fp
 8012dcc:	df000017 	ldw	fp,0(sp)
 8012dd0:	dec00104 	addi	sp,sp,4
 8012dd4:	f800283a 	ret

08012dd8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8012dd8:	defff804 	addi	sp,sp,-32
 8012ddc:	dfc00715 	stw	ra,28(sp)
 8012de0:	df000615 	stw	fp,24(sp)
 8012de4:	df000604 	addi	fp,sp,24
 8012de8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8012dec:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8012df0:	e0bfff17 	ldw	r2,-4(fp)
 8012df4:	10800717 	ldw	r2,28(r2)
 8012df8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 8012dfc:	e0bffb17 	ldw	r2,-20(fp)
 8012e00:	10800117 	ldw	r2,4(r2)
 8012e04:	10800044 	addi	r2,r2,1
 8012e08:	0149c404 	movi	r5,10000
 8012e0c:	1009883a 	mov	r4,r2
 8012e10:	80116700 	call	8011670 <__mulsi3>
 8012e14:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 8012e18:	e0bffd04 	addi	r2,fp,-12
 8012e1c:	100b883a 	mov	r5,r2
 8012e20:	e13fff17 	ldw	r4,-4(fp)
 8012e24:	8013c700 	call	8013c70 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 8012e28:	e0bffd17 	ldw	r2,-12(fp)
 8012e2c:	100b883a 	mov	r5,r2
 8012e30:	e13fff17 	ldw	r4,-4(fp)
 8012e34:	8013ba40 	call	8013ba4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8012e38:	e0bffc04 	addi	r2,fp,-16
 8012e3c:	100b883a 	mov	r5,r2
 8012e40:	e13fff17 	ldw	r4,-4(fp)
 8012e44:	8012d400 	call	8012d40 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 8012e48:	e0bffc17 	ldw	r2,-16(fp)
 8012e4c:	10002226 	beq	r2,zero,8012ed8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 8012e50:	e0bffb17 	ldw	r2,-20(fp)
 8012e54:	10800217 	ldw	r2,8(r2)
 8012e58:	10001d26 	beq	r2,zero,8012ed0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8012e5c:	00000d06 	br	8012e94 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 8012e60:	e0bffa17 	ldw	r2,-24(fp)
 8012e64:	108002a8 	cmpgeui	r2,r2,10
 8012e68:	1000021e 	bne	r2,zero,8012e74 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 8012e6c:	0109c404 	movi	r4,10000
 8012e70:	80149ac0 	call	80149ac <alt_busy_sleep>
              if (--timeout == 0)
 8012e74:	e0bffa17 	ldw	r2,-24(fp)
 8012e78:	10bfffc4 	addi	r2,r2,-1
 8012e7c:	e0bffa15 	stw	r2,-24(fp)
 8012e80:	e0bffa17 	ldw	r2,-24(fp)
 8012e84:	1000031e 	bne	r2,zero,8012e94 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 8012e88:	00bfff84 	movi	r2,-2
 8012e8c:	e0bffc15 	stw	r2,-16(fp)
                 break;
 8012e90:	00000306 	br	8012ea0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8012e94:	e13fff17 	ldw	r4,-4(fp)
 8012e98:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 8012e9c:	103ff01e 	bne	r2,zero,8012e60 <__alt_data_end+0xffff3460>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 8012ea0:	e0bffb17 	ldw	r2,-20(fp)
 8012ea4:	10800017 	ldw	r2,0(r2)
 8012ea8:	e0fffe04 	addi	r3,fp,-8
 8012eac:	180f883a 	mov	r7,r3
 8012eb0:	000d883a 	mov	r6,zero
 8012eb4:	100b883a 	mov	r5,r2
 8012eb8:	e13fff17 	ldw	r4,-4(fp)
 8012ebc:	80129b00 	call	80129b0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 8012ec0:	e13fff17 	ldw	r4,-4(fp)
 8012ec4:	80126140 	call	8012614 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 8012ec8:	e0bffb17 	ldw	r2,-20(fp)
 8012ecc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 8012ed0:	e0bffc17 	ldw	r2,-16(fp)
 8012ed4:	00000a06 	br	8012f00 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 8012ed8:	e0bffb17 	ldw	r2,-20(fp)
 8012edc:	10800217 	ldw	r2,8(r2)
 8012ee0:	10000626 	beq	r2,zero,8012efc <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 8012ee4:	e0bffd17 	ldw	r2,-12(fp)
 8012ee8:	100b883a 	mov	r5,r2
 8012eec:	e13fff17 	ldw	r4,-4(fp)
 8012ef0:	8013c0c0 	call	8013c0c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8012ef4:	00bffe44 	movi	r2,-7
 8012ef8:	00000106 	br	8012f00 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 8012efc:	0005883a 	mov	r2,zero
}
 8012f00:	e037883a 	mov	sp,fp
 8012f04:	dfc00117 	ldw	ra,4(sp)
 8012f08:	df000017 	ldw	fp,0(sp)
 8012f0c:	dec00204 	addi	sp,sp,8
 8012f10:	f800283a 	ret

08012f14 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8012f14:	defff704 	addi	sp,sp,-36
 8012f18:	dfc00815 	stw	ra,32(sp)
 8012f1c:	df000715 	stw	fp,28(sp)
 8012f20:	df000704 	addi	fp,sp,28
 8012f24:	e13ffc15 	stw	r4,-16(fp)
 8012f28:	e17ffd15 	stw	r5,-12(fp)
 8012f2c:	e1bffe15 	stw	r6,-8(fp)
 8012f30:	3805883a 	mov	r2,r7
 8012f34:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8012f38:	0089c404 	movi	r2,10000
 8012f3c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 8012f40:	00002206 	br	8012fcc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8012f44:	e0bffb17 	ldw	r2,-20(fp)
 8012f48:	108002a8 	cmpgeui	r2,r2,10
 8012f4c:	1000021e 	bne	r2,zero,8012f58 <alt_avalon_i2c_master_tx+0x44>
 8012f50:	0109c404 	movi	r4,10000
 8012f54:	80149ac0 	call	80149ac <alt_busy_sleep>
      if (use_interrupts)
 8012f58:	e0bfff03 	ldbu	r2,-4(fp)
 8012f5c:	10000926 	beq	r2,zero,8012f84 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 8012f60:	00800044 	movi	r2,1
 8012f64:	d8800015 	stw	r2,0(sp)
 8012f68:	000f883a 	mov	r7,zero
 8012f6c:	e1bffe17 	ldw	r6,-8(fp)
 8012f70:	e17ffd17 	ldw	r5,-12(fp)
 8012f74:	e13ffc17 	ldw	r4,-16(fp)
 8012f78:	80134c00 	call	80134c0 <alt_avalon_i2c_master_transmit_using_interrupts>
 8012f7c:	e0bffa15 	stw	r2,-24(fp)
 8012f80:	00000806 	br	8012fa4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 8012f84:	00800044 	movi	r2,1
 8012f88:	d8800015 	stw	r2,0(sp)
 8012f8c:	000f883a 	mov	r7,zero
 8012f90:	e1bffe17 	ldw	r6,-8(fp)
 8012f94:	e17ffd17 	ldw	r5,-12(fp)
 8012f98:	e13ffc17 	ldw	r4,-16(fp)
 8012f9c:	80133000 	call	8013300 <alt_avalon_i2c_master_transmit>
 8012fa0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8012fa4:	e0bffa17 	ldw	r2,-24(fp)
 8012fa8:	10bffea0 	cmpeqi	r2,r2,-6
 8012fac:	1000061e 	bne	r2,zero,8012fc8 <alt_avalon_i2c_master_tx+0xb4>
 8012fb0:	e0bffa17 	ldw	r2,-24(fp)
 8012fb4:	10bffee0 	cmpeqi	r2,r2,-5
 8012fb8:	1000031e 	bne	r2,zero,8012fc8 <alt_avalon_i2c_master_tx+0xb4>
 8012fbc:	e0bffa17 	ldw	r2,-24(fp)
 8012fc0:	10bffe58 	cmpnei	r2,r2,-7
 8012fc4:	1000061e 	bne	r2,zero,8012fe0 <alt_avalon_i2c_master_tx+0xcc>
 8012fc8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 8012fcc:	e0bffb17 	ldw	r2,-20(fp)
 8012fd0:	10ffffc4 	addi	r3,r2,-1
 8012fd4:	e0fffb15 	stw	r3,-20(fp)
 8012fd8:	103fda1e 	bne	r2,zero,8012f44 <__alt_data_end+0xffff3544>
 8012fdc:	00000106 	br	8012fe4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 8012fe0:	0001883a 	nop
    }

    return status;
 8012fe4:	e0bffa17 	ldw	r2,-24(fp)
}        
 8012fe8:	e037883a 	mov	sp,fp
 8012fec:	dfc00117 	ldw	ra,4(sp)
 8012ff0:	df000017 	ldw	fp,0(sp)
 8012ff4:	dec00204 	addi	sp,sp,8
 8012ff8:	f800283a 	ret

08012ffc <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8012ffc:	defff704 	addi	sp,sp,-36
 8013000:	dfc00815 	stw	ra,32(sp)
 8013004:	df000715 	stw	fp,28(sp)
 8013008:	df000704 	addi	fp,sp,28
 801300c:	e13ffc15 	stw	r4,-16(fp)
 8013010:	e17ffd15 	stw	r5,-12(fp)
 8013014:	e1bffe15 	stw	r6,-8(fp)
 8013018:	3805883a 	mov	r2,r7
 801301c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8013020:	0089c404 	movi	r2,10000
 8013024:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 8013028:	e0bfff03 	ldbu	r2,-4(fp)
 801302c:	10003426 	beq	r2,zero,8013100 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 8013030:	00001706 	br	8013090 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8013034:	e0bffb17 	ldw	r2,-20(fp)
 8013038:	108002a8 	cmpgeui	r2,r2,10
 801303c:	1000021e 	bne	r2,zero,8013048 <alt_avalon_i2c_master_rx+0x4c>
 8013040:	0109c404 	movi	r4,10000
 8013044:	80149ac0 	call	80149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8013048:	00800044 	movi	r2,1
 801304c:	d8800015 	stw	r2,0(sp)
 8013050:	000f883a 	mov	r7,zero
 8013054:	e1bffe17 	ldw	r6,-8(fp)
 8013058:	e17ffd17 	ldw	r5,-12(fp)
 801305c:	e13ffc17 	ldw	r4,-16(fp)
 8013060:	80138dc0 	call	80138dc <alt_avalon_i2c_master_receive_using_interrupts>
 8013064:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8013068:	e0bffa17 	ldw	r2,-24(fp)
 801306c:	10bffea0 	cmpeqi	r2,r2,-6
 8013070:	1000061e 	bne	r2,zero,801308c <alt_avalon_i2c_master_rx+0x90>
 8013074:	e0bffa17 	ldw	r2,-24(fp)
 8013078:	10bffee0 	cmpeqi	r2,r2,-5
 801307c:	1000031e 	bne	r2,zero,801308c <alt_avalon_i2c_master_rx+0x90>
 8013080:	e0bffa17 	ldw	r2,-24(fp)
 8013084:	10bffe58 	cmpnei	r2,r2,-7
 8013088:	1000221e 	bne	r2,zero,8013114 <alt_avalon_i2c_master_rx+0x118>
 801308c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 8013090:	e0bffb17 	ldw	r2,-20(fp)
 8013094:	10ffffc4 	addi	r3,r2,-1
 8013098:	e0fffb15 	stw	r3,-20(fp)
 801309c:	103fe51e 	bne	r2,zero,8013034 <__alt_data_end+0xffff3634>
 80130a0:	00001f06 	br	8013120 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 80130a4:	e0bffb17 	ldw	r2,-20(fp)
 80130a8:	108002a8 	cmpgeui	r2,r2,10
 80130ac:	1000021e 	bne	r2,zero,80130b8 <alt_avalon_i2c_master_rx+0xbc>
 80130b0:	0109c404 	movi	r4,10000
 80130b4:	80149ac0 	call	80149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 80130b8:	00800044 	movi	r2,1
 80130bc:	d8800015 	stw	r2,0(sp)
 80130c0:	000f883a 	mov	r7,zero
 80130c4:	e1bffe17 	ldw	r6,-8(fp)
 80130c8:	e17ffd17 	ldw	r5,-12(fp)
 80130cc:	e13ffc17 	ldw	r4,-16(fp)
 80130d0:	80136cc0 	call	80136cc <alt_avalon_i2c_master_receive>
 80130d4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80130d8:	e0bffa17 	ldw	r2,-24(fp)
 80130dc:	10bffea0 	cmpeqi	r2,r2,-6
 80130e0:	1000061e 	bne	r2,zero,80130fc <alt_avalon_i2c_master_rx+0x100>
 80130e4:	e0bffa17 	ldw	r2,-24(fp)
 80130e8:	10bffee0 	cmpeqi	r2,r2,-5
 80130ec:	1000031e 	bne	r2,zero,80130fc <alt_avalon_i2c_master_rx+0x100>
 80130f0:	e0bffa17 	ldw	r2,-24(fp)
 80130f4:	10bffe58 	cmpnei	r2,r2,-7
 80130f8:	1000081e 	bne	r2,zero,801311c <alt_avalon_i2c_master_rx+0x120>
 80130fc:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 8013100:	e0bffb17 	ldw	r2,-20(fp)
 8013104:	10ffffc4 	addi	r3,r2,-1
 8013108:	e0fffb15 	stw	r3,-20(fp)
 801310c:	103fe51e 	bne	r2,zero,80130a4 <__alt_data_end+0xffff36a4>
 8013110:	00000306 	br	8013120 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8013114:	0001883a 	nop
 8013118:	00000106 	br	8013120 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 801311c:	0001883a 	nop
      }
    }
    
    return status;
 8013120:	e0bffa17 	ldw	r2,-24(fp)
}        
 8013124:	e037883a 	mov	sp,fp
 8013128:	dfc00117 	ldw	ra,4(sp)
 801312c:	df000017 	ldw	fp,0(sp)
 8013130:	dec00204 	addi	sp,sp,8
 8013134:	f800283a 	ret

08013138 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8013138:	defff604 	addi	sp,sp,-40
 801313c:	dfc00915 	stw	ra,36(sp)
 8013140:	df000815 	stw	fp,32(sp)
 8013144:	df000804 	addi	fp,sp,32
 8013148:	e13ffb15 	stw	r4,-20(fp)
 801314c:	e17ffc15 	stw	r5,-16(fp)
 8013150:	e1bffd15 	stw	r6,-12(fp)
 8013154:	e1fffe15 	stw	r7,-8(fp)
 8013158:	e0800317 	ldw	r2,12(fp)
 801315c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8013160:	0089c404 	movi	r2,10000
 8013164:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 8013168:	e0bfff03 	ldbu	r2,-4(fp)
 801316c:	10005626 	beq	r2,zero,80132c8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 8013170:	00002806 	br	8013214 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8013174:	e0bffa17 	ldw	r2,-24(fp)
 8013178:	108002a8 	cmpgeui	r2,r2,10
 801317c:	1000021e 	bne	r2,zero,8013188 <alt_avalon_i2c_master_tx_rx+0x50>
 8013180:	0109c404 	movi	r4,10000
 8013184:	80149ac0 	call	80149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8013188:	d8000015 	stw	zero,0(sp)
 801318c:	000f883a 	mov	r7,zero
 8013190:	e1bffd17 	ldw	r6,-12(fp)
 8013194:	e17ffc17 	ldw	r5,-16(fp)
 8013198:	e13ffb17 	ldw	r4,-20(fp)
 801319c:	80134c00 	call	80134c0 <alt_avalon_i2c_master_transmit_using_interrupts>
 80131a0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80131a4:	e0bff917 	ldw	r2,-28(fp)
 80131a8:	10bffea0 	cmpeqi	r2,r2,-6
 80131ac:	1000191e 	bne	r2,zero,8013214 <alt_avalon_i2c_master_tx_rx+0xdc>
 80131b0:	e0bff917 	ldw	r2,-28(fp)
 80131b4:	10bffee0 	cmpeqi	r2,r2,-5
 80131b8:	1000161e 	bne	r2,zero,8013214 <alt_avalon_i2c_master_tx_rx+0xdc>
 80131bc:	e0bff917 	ldw	r2,-28(fp)
 80131c0:	10bffe58 	cmpnei	r2,r2,-7
 80131c4:	1000011e 	bne	r2,zero,80131cc <alt_avalon_i2c_master_tx_rx+0x94>
 80131c8:	00001206 	br	8013214 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 80131cc:	00800044 	movi	r2,1
 80131d0:	d8800015 	stw	r2,0(sp)
 80131d4:	01c00044 	movi	r7,1
 80131d8:	e1800217 	ldw	r6,8(fp)
 80131dc:	e17ffe17 	ldw	r5,-8(fp)
 80131e0:	e13ffb17 	ldw	r4,-20(fp)
 80131e4:	80138dc0 	call	80138dc <alt_avalon_i2c_master_receive_using_interrupts>
 80131e8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80131ec:	e0bff917 	ldw	r2,-28(fp)
 80131f0:	10bffea0 	cmpeqi	r2,r2,-6
 80131f4:	1000061e 	bne	r2,zero,8013210 <alt_avalon_i2c_master_tx_rx+0xd8>
 80131f8:	e0bff917 	ldw	r2,-28(fp)
 80131fc:	10bffee0 	cmpeqi	r2,r2,-5
 8013200:	1000031e 	bne	r2,zero,8013210 <alt_avalon_i2c_master_tx_rx+0xd8>
 8013204:	e0bff917 	ldw	r2,-28(fp)
 8013208:	10bffe58 	cmpnei	r2,r2,-7
 801320c:	1000331e 	bne	r2,zero,80132dc <alt_avalon_i2c_master_tx_rx+0x1a4>
 8013210:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 8013214:	e0bffa17 	ldw	r2,-24(fp)
 8013218:	10ffffc4 	addi	r3,r2,-1
 801321c:	e0fffa15 	stw	r3,-24(fp)
 8013220:	103fd41e 	bne	r2,zero,8013174 <__alt_data_end+0xffff3774>
 8013224:	00003006 	br	80132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8013228:	e0bffa17 	ldw	r2,-24(fp)
 801322c:	108002a8 	cmpgeui	r2,r2,10
 8013230:	1000021e 	bne	r2,zero,801323c <alt_avalon_i2c_master_tx_rx+0x104>
 8013234:	0109c404 	movi	r4,10000
 8013238:	80149ac0 	call	80149ac <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 801323c:	d8000015 	stw	zero,0(sp)
 8013240:	000f883a 	mov	r7,zero
 8013244:	e1bffd17 	ldw	r6,-12(fp)
 8013248:	e17ffc17 	ldw	r5,-16(fp)
 801324c:	e13ffb17 	ldw	r4,-20(fp)
 8013250:	80133000 	call	8013300 <alt_avalon_i2c_master_transmit>
 8013254:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8013258:	e0bff917 	ldw	r2,-28(fp)
 801325c:	10bffea0 	cmpeqi	r2,r2,-6
 8013260:	1000191e 	bne	r2,zero,80132c8 <alt_avalon_i2c_master_tx_rx+0x190>
 8013264:	e0bff917 	ldw	r2,-28(fp)
 8013268:	10bffee0 	cmpeqi	r2,r2,-5
 801326c:	1000161e 	bne	r2,zero,80132c8 <alt_avalon_i2c_master_tx_rx+0x190>
 8013270:	e0bff917 	ldw	r2,-28(fp)
 8013274:	10bffe58 	cmpnei	r2,r2,-7
 8013278:	1000011e 	bne	r2,zero,8013280 <alt_avalon_i2c_master_tx_rx+0x148>
 801327c:	00001206 	br	80132c8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 8013280:	00800044 	movi	r2,1
 8013284:	d8800015 	stw	r2,0(sp)
 8013288:	01c00044 	movi	r7,1
 801328c:	e1800217 	ldw	r6,8(fp)
 8013290:	e17ffe17 	ldw	r5,-8(fp)
 8013294:	e13ffb17 	ldw	r4,-20(fp)
 8013298:	80136cc0 	call	80136cc <alt_avalon_i2c_master_receive>
 801329c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80132a0:	e0bff917 	ldw	r2,-28(fp)
 80132a4:	10bffea0 	cmpeqi	r2,r2,-6
 80132a8:	1000061e 	bne	r2,zero,80132c4 <alt_avalon_i2c_master_tx_rx+0x18c>
 80132ac:	e0bff917 	ldw	r2,-28(fp)
 80132b0:	10bffee0 	cmpeqi	r2,r2,-5
 80132b4:	1000031e 	bne	r2,zero,80132c4 <alt_avalon_i2c_master_tx_rx+0x18c>
 80132b8:	e0bff917 	ldw	r2,-28(fp)
 80132bc:	10bffe58 	cmpnei	r2,r2,-7
 80132c0:	1000081e 	bne	r2,zero,80132e4 <alt_avalon_i2c_master_tx_rx+0x1ac>
 80132c4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 80132c8:	e0bffa17 	ldw	r2,-24(fp)
 80132cc:	10ffffc4 	addi	r3,r2,-1
 80132d0:	e0fffa15 	stw	r3,-24(fp)
 80132d4:	103fd41e 	bne	r2,zero,8013228 <__alt_data_end+0xffff3828>
 80132d8:	00000306 	br	80132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 80132dc:	0001883a 	nop
 80132e0:	00000106 	br	80132e8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 80132e4:	0001883a 	nop
      }
    }
    
    return status;
 80132e8:	e0bff917 	ldw	r2,-28(fp)
}                                       
 80132ec:	e037883a 	mov	sp,fp
 80132f0:	dfc00117 	ldw	ra,4(sp)
 80132f4:	df000017 	ldw	fp,0(sp)
 80132f8:	dec00204 	addi	sp,sp,8
 80132fc:	f800283a 	ret

08013300 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8013300:	defff704 	addi	sp,sp,-36
 8013304:	dfc00815 	stw	ra,32(sp)
 8013308:	df000715 	stw	fp,28(sp)
 801330c:	df000704 	addi	fp,sp,28
 8013310:	e13ffb15 	stw	r4,-20(fp)
 8013314:	e17ffc15 	stw	r5,-16(fp)
 8013318:	e1bffd15 	stw	r6,-12(fp)
 801331c:	3807883a 	mov	r3,r7
 8013320:	e0800217 	ldw	r2,8(fp)
 8013324:	e0fffe05 	stb	r3,-8(fp)
 8013328:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801332c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 8013330:	0149c404 	movi	r5,10000
 8013334:	e13ffd17 	ldw	r4,-12(fp)
 8013338:	80116700 	call	8011670 <__mulsi3>
 801333c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 8013340:	e0bffd17 	ldw	r2,-12(fp)
 8013344:	1000021e 	bne	r2,zero,8013350 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8013348:	0005883a 	mov	r2,zero
 801334c:	00005706 	br	80134ac <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8013350:	e0bffe03 	ldbu	r2,-8(fp)
 8013354:	10000a1e 	bne	r2,zero,8013380 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8013358:	e13ffb17 	ldw	r4,-20(fp)
 801335c:	801257c0 	call	801257c <alt_avalon_i2c_enable>
 8013360:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8013364:	e0bffa17 	ldw	r2,-24(fp)
 8013368:	10000226 	beq	r2,zero,8013374 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 801336c:	e0bffa17 	ldw	r2,-24(fp)
 8013370:	00004e06 	br	80134ac <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013374:	01400704 	movi	r5,28
 8013378:	e13ffb17 	ldw	r4,-20(fp)
 801337c:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8013380:	e0bffe03 	ldbu	r2,-8(fp)
 8013384:	100d883a 	mov	r6,r2
 8013388:	000b883a 	mov	r5,zero
 801338c:	e13ffb17 	ldw	r4,-20(fp)
 8013390:	8012be40 	call	8012be4 <alt_avalon_i2c_send_address>
 8013394:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 8013398:	e0bffa17 	ldw	r2,-24(fp)
 801339c:	1000271e 	bne	r2,zero,801343c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 80133a0:	00000f06 	br	80133e0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80133a4:	e0bffc17 	ldw	r2,-16(fp)
 80133a8:	10800003 	ldbu	r2,0(r2)
 80133ac:	10803fcc 	andi	r2,r2,255
 80133b0:	000f883a 	mov	r7,zero
 80133b4:	000d883a 	mov	r6,zero
 80133b8:	100b883a 	mov	r5,r2
 80133bc:	e13ffb17 	ldw	r4,-20(fp)
 80133c0:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 80133c4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 80133c8:	e0bffc17 	ldw	r2,-16(fp)
 80133cc:	10800044 	addi	r2,r2,1
 80133d0:	e0bffc15 	stw	r2,-16(fp)
            --size;
 80133d4:	e0bffd17 	ldw	r2,-12(fp)
 80133d8:	10bfffc4 	addi	r2,r2,-1
 80133dc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 80133e0:	e0bffd17 	ldw	r2,-12(fp)
 80133e4:	108000b0 	cmpltui	r2,r2,2
 80133e8:	1000021e 	bne	r2,zero,80133f4 <alt_avalon_i2c_master_transmit+0xf4>
 80133ec:	e0bffa17 	ldw	r2,-24(fp)
 80133f0:	103fec26 	beq	r2,zero,80133a4 <__alt_data_end+0xffff39a4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80133f4:	e0bffa17 	ldw	r2,-24(fp)
 80133f8:	1000101e 	bne	r2,zero,801343c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80133fc:	e0bffc17 	ldw	r2,-16(fp)
 8013400:	10800003 	ldbu	r2,0(r2)
 8013404:	10803fcc 	andi	r2,r2,255
 8013408:	e0ffff03 	ldbu	r3,-4(fp)
 801340c:	180f883a 	mov	r7,r3
 8013410:	000d883a 	mov	r6,zero
 8013414:	100b883a 	mov	r5,r2
 8013418:	e13ffb17 	ldw	r4,-20(fp)
 801341c:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8013420:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 8013424:	e0bffc17 	ldw	r2,-16(fp)
 8013428:	10800044 	addi	r2,r2,1
 801342c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8013430:	e0bffd17 	ldw	r2,-12(fp)
 8013434:	10bfffc4 	addi	r2,r2,-1
 8013438:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 801343c:	e0bfff03 	ldbu	r2,-4(fp)
 8013440:	1000101e 	bne	r2,zero,8013484 <alt_avalon_i2c_master_transmit+0x184>
 8013444:	e0bffa17 	ldw	r2,-24(fp)
 8013448:	10001726 	beq	r2,zero,80134a8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801344c:	00000d06 	br	8013484 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8013450:	e0bff917 	ldw	r2,-28(fp)
 8013454:	108002a8 	cmpgeui	r2,r2,10
 8013458:	1000021e 	bne	r2,zero,8013464 <alt_avalon_i2c_master_transmit+0x164>
 801345c:	0109c404 	movi	r4,10000
 8013460:	80149ac0 	call	80149ac <alt_busy_sleep>
            if (--timeout == 0)
 8013464:	e0bff917 	ldw	r2,-28(fp)
 8013468:	10bfffc4 	addi	r2,r2,-1
 801346c:	e0bff915 	stw	r2,-28(fp)
 8013470:	e0bff917 	ldw	r2,-28(fp)
 8013474:	1000031e 	bne	r2,zero,8013484 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8013478:	00bfff84 	movi	r2,-2
 801347c:	e0bffa15 	stw	r2,-24(fp)
               break;
 8013480:	00000306 	br	8013490 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8013484:	e13ffb17 	ldw	r4,-20(fp)
 8013488:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 801348c:	103ff01e 	bne	r2,zero,8013450 <__alt_data_end+0xffff3a50>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 8013490:	e0bffa04 	addi	r2,fp,-24
 8013494:	100b883a 	mov	r5,r2
 8013498:	e13ffb17 	ldw	r4,-20(fp)
 801349c:	8012d400 	call	8012d40 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80134a0:	e13ffb17 	ldw	r4,-20(fp)
 80134a4:	80126140 	call	8012614 <alt_avalon_i2c_disable>
    }


    return status;
 80134a8:	e0bffa17 	ldw	r2,-24(fp)
}
 80134ac:	e037883a 	mov	sp,fp
 80134b0:	dfc00117 	ldw	ra,4(sp)
 80134b4:	df000017 	ldw	fp,0(sp)
 80134b8:	dec00204 	addi	sp,sp,8
 80134bc:	f800283a 	ret

080134c0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 80134c0:	defff604 	addi	sp,sp,-40
 80134c4:	dfc00915 	stw	ra,36(sp)
 80134c8:	df000815 	stw	fp,32(sp)
 80134cc:	df000804 	addi	fp,sp,32
 80134d0:	e13ffb15 	stw	r4,-20(fp)
 80134d4:	e17ffc15 	stw	r5,-16(fp)
 80134d8:	e1bffd15 	stw	r6,-12(fp)
 80134dc:	3807883a 	mov	r3,r7
 80134e0:	e0800217 	ldw	r2,8(fp)
 80134e4:	e0fffe05 	stb	r3,-8(fp)
 80134e8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 80134ec:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 80134f0:	0149c404 	movi	r5,10000
 80134f4:	e13ffd17 	ldw	r4,-12(fp)
 80134f8:	80116700 	call	8011670 <__mulsi3>
 80134fc:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8013500:	e0bffb17 	ldw	r2,-20(fp)
 8013504:	10800717 	ldw	r2,28(r2)
 8013508:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 801350c:	e0bffd17 	ldw	r2,-12(fp)
 8013510:	1000021e 	bne	r2,zero,801351c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8013514:	0005883a 	mov	r2,zero
 8013518:	00006706 	br	80136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801351c:	e0bffb17 	ldw	r2,-20(fp)
 8013520:	10c00617 	ldw	r3,24(r2)
 8013524:	00820074 	movhi	r2,2049
 8013528:	10888004 	addi	r2,r2,8704
 801352c:	18800226 	beq	r3,r2,8013538 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8013530:	00bfff44 	movi	r2,-3
 8013534:	00006006 	br	80136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8013538:	e0bffe03 	ldbu	r2,-8(fp)
 801353c:	10000a1e 	bne	r2,zero,8013568 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8013540:	e13ffb17 	ldw	r4,-20(fp)
 8013544:	801257c0 	call	801257c <alt_avalon_i2c_enable>
 8013548:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801354c:	e0bff817 	ldw	r2,-32(fp)
 8013550:	10000226 	beq	r2,zero,801355c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 8013554:	e0bff817 	ldw	r2,-32(fp)
 8013558:	00005706 	br	80136b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801355c:	01400704 	movi	r5,28
 8013560:	e13ffb17 	ldw	r4,-20(fp)
 8013564:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8013568:	e0bffe03 	ldbu	r2,-8(fp)
 801356c:	100d883a 	mov	r6,r2
 8013570:	000b883a 	mov	r5,zero
 8013574:	e13ffb17 	ldw	r4,-20(fp)
 8013578:	8012be40 	call	8012be4 <alt_avalon_i2c_send_address>
 801357c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 8013580:	e0bff817 	ldw	r2,-32(fp)
 8013584:	1000271e 	bne	r2,zero,8013624 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8013588:	00000f06 	br	80135c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801358c:	e0bffc17 	ldw	r2,-16(fp)
 8013590:	10800003 	ldbu	r2,0(r2)
 8013594:	10803fcc 	andi	r2,r2,255
 8013598:	000f883a 	mov	r7,zero
 801359c:	000d883a 	mov	r6,zero
 80135a0:	100b883a 	mov	r5,r2
 80135a4:	e13ffb17 	ldw	r4,-20(fp)
 80135a8:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 80135ac:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 80135b0:	e0bffc17 	ldw	r2,-16(fp)
 80135b4:	10800044 	addi	r2,r2,1
 80135b8:	e0bffc15 	stw	r2,-16(fp)
            --size;
 80135bc:	e0bffd17 	ldw	r2,-12(fp)
 80135c0:	10bfffc4 	addi	r2,r2,-1
 80135c4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 80135c8:	e0bffd17 	ldw	r2,-12(fp)
 80135cc:	108000b0 	cmpltui	r2,r2,2
 80135d0:	1000021e 	bne	r2,zero,80135dc <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 80135d4:	e0bff817 	ldw	r2,-32(fp)
 80135d8:	103fec26 	beq	r2,zero,801358c <__alt_data_end+0xffff3b8c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80135dc:	e0bff817 	ldw	r2,-32(fp)
 80135e0:	1000101e 	bne	r2,zero,8013624 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80135e4:	e0bffc17 	ldw	r2,-16(fp)
 80135e8:	10800003 	ldbu	r2,0(r2)
 80135ec:	10803fcc 	andi	r2,r2,255
 80135f0:	e0ffff03 	ldbu	r3,-4(fp)
 80135f4:	180f883a 	mov	r7,r3
 80135f8:	000d883a 	mov	r6,zero
 80135fc:	100b883a 	mov	r5,r2
 8013600:	e13ffb17 	ldw	r4,-20(fp)
 8013604:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8013608:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 801360c:	e0bffc17 	ldw	r2,-16(fp)
 8013610:	10800044 	addi	r2,r2,1
 8013614:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8013618:	e0bffd17 	ldw	r2,-12(fp)
 801361c:	10bfffc4 	addi	r2,r2,-1
 8013620:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8013624:	e0bff817 	ldw	r2,-32(fp)
 8013628:	10001426 	beq	r2,zero,801367c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 801362c:	00000d06 	br	8013664 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 8013630:	e0bff917 	ldw	r2,-28(fp)
 8013634:	108002a8 	cmpgeui	r2,r2,10
 8013638:	1000021e 	bne	r2,zero,8013644 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 801363c:	0109c404 	movi	r4,10000
 8013640:	80149ac0 	call	80149ac <alt_busy_sleep>
            if (--timeout == 0)
 8013644:	e0bff917 	ldw	r2,-28(fp)
 8013648:	10bfffc4 	addi	r2,r2,-1
 801364c:	e0bff915 	stw	r2,-28(fp)
 8013650:	e0bff917 	ldw	r2,-28(fp)
 8013654:	1000031e 	bne	r2,zero,8013664 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8013658:	00bfff84 	movi	r2,-2
 801365c:	e0bff815 	stw	r2,-32(fp)
               break;
 8013660:	00000306 	br	8013670 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8013664:	e13ffb17 	ldw	r4,-20(fp)
 8013668:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 801366c:	103ff01e 	bne	r2,zero,8013630 <__alt_data_end+0xffff3c30>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8013670:	e13ffb17 	ldw	r4,-20(fp)
 8013674:	80126140 	call	8012614 <alt_avalon_i2c_disable>
 8013678:	00000e06 	br	80136b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 801367c:	e0bfff03 	ldbu	r2,-4(fp)
 8013680:	10000c26 	beq	r2,zero,80136b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013684:	01400704 	movi	r5,28
 8013688:	e13ffb17 	ldw	r4,-20(fp)
 801368c:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 8013690:	000b883a 	mov	r5,zero
 8013694:	e13ffb17 	ldw	r4,-20(fp)
 8013698:	8013db00 	call	8013db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 801369c:	e0bffa17 	ldw	r2,-24(fp)
 80136a0:	00c00044 	movi	r3,1
 80136a4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 80136a8:	01400044 	movi	r5,1
 80136ac:	e13ffb17 	ldw	r4,-20(fp)
 80136b0:	8013c0c0 	call	8013c0c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 80136b4:	e0bff817 	ldw	r2,-32(fp)
}
 80136b8:	e037883a 	mov	sp,fp
 80136bc:	dfc00117 	ldw	ra,4(sp)
 80136c0:	df000017 	ldw	fp,0(sp)
 80136c4:	dec00204 	addi	sp,sp,8
 80136c8:	f800283a 	ret

080136cc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 80136cc:	defff404 	addi	sp,sp,-48
 80136d0:	dfc00b15 	stw	ra,44(sp)
 80136d4:	df000a15 	stw	fp,40(sp)
 80136d8:	df000a04 	addi	fp,sp,40
 80136dc:	e13ffb15 	stw	r4,-20(fp)
 80136e0:	e17ffc15 	stw	r5,-16(fp)
 80136e4:	e1bffd15 	stw	r6,-12(fp)
 80136e8:	3807883a 	mov	r3,r7
 80136ec:	e0800217 	ldw	r2,8(fp)
 80136f0:	e0fffe05 	stb	r3,-8(fp)
 80136f4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 80136f8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 80136fc:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 8013700:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 8013704:	e0bffd17 	ldw	r2,-12(fp)
 8013708:	1000021e 	bne	r2,zero,8013714 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 801370c:	0005883a 	mov	r2,zero
 8013710:	00006d06 	br	80138c8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8013714:	e0bffe03 	ldbu	r2,-8(fp)
 8013718:	10000a1e 	bne	r2,zero,8013744 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801371c:	e13ffb17 	ldw	r4,-20(fp)
 8013720:	801257c0 	call	801257c <alt_avalon_i2c_enable>
 8013724:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8013728:	e0bff917 	ldw	r2,-28(fp)
 801372c:	10000226 	beq	r2,zero,8013738 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 8013730:	e0bff917 	ldw	r2,-28(fp)
 8013734:	00006406 	br	80138c8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013738:	01400704 	movi	r5,28
 801373c:	e13ffb17 	ldw	r4,-20(fp)
 8013740:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8013744:	e0bffe03 	ldbu	r2,-8(fp)
 8013748:	100d883a 	mov	r6,r2
 801374c:	01400044 	movi	r5,1
 8013750:	e13ffb17 	ldw	r4,-20(fp)
 8013754:	8012be40 	call	8012be4 <alt_avalon_i2c_send_address>
 8013758:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 801375c:	e0bff917 	ldw	r2,-28(fp)
 8013760:	1000341e 	bne	r2,zero,8013834 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8013764:	00001906 	br	80137cc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8013768:	000f883a 	mov	r7,zero
 801376c:	000d883a 	mov	r6,zero
 8013770:	000b883a 	mov	r5,zero
 8013774:	e13ffb17 	ldw	r4,-20(fp)
 8013778:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 801377c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 8013780:	e0bff817 	ldw	r2,-32(fp)
 8013784:	10800044 	addi	r2,r2,1
 8013788:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 801378c:	e0bff917 	ldw	r2,-28(fp)
 8013790:	10000e1e 	bne	r2,zero,80137cc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 8013794:	e0bffa04 	addi	r2,fp,-24
 8013798:	100f883a 	mov	r7,r2
 801379c:	000d883a 	mov	r6,zero
 80137a0:	e17ffc17 	ldw	r5,-16(fp)
 80137a4:	e13ffb17 	ldw	r4,-20(fp)
 80137a8:	80129b00 	call	80129b0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 80137ac:	e0bffa17 	ldw	r2,-24(fp)
 80137b0:	e0fffc17 	ldw	r3,-16(fp)
 80137b4:	1885883a 	add	r2,r3,r2
 80137b8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 80137bc:	e0bffa17 	ldw	r2,-24(fp)
 80137c0:	e0fff717 	ldw	r3,-36(fp)
 80137c4:	1885883a 	add	r2,r3,r2
 80137c8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80137cc:	e0bffd17 	ldw	r2,-12(fp)
 80137d0:	10bfffc4 	addi	r2,r2,-1
 80137d4:	e0fff817 	ldw	r3,-32(fp)
 80137d8:	1880022e 	bgeu	r3,r2,80137e4 <alt_avalon_i2c_master_receive+0x118>
 80137dc:	e0bff917 	ldw	r2,-28(fp)
 80137e0:	103fe126 	beq	r2,zero,8013768 <__alt_data_end+0xffff3d68>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80137e4:	e0bff917 	ldw	r2,-28(fp)
 80137e8:	1000121e 	bne	r2,zero,8013834 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80137ec:	e0bfff03 	ldbu	r2,-4(fp)
 80137f0:	100f883a 	mov	r7,r2
 80137f4:	000d883a 	mov	r6,zero
 80137f8:	000b883a 	mov	r5,zero
 80137fc:	e13ffb17 	ldw	r4,-20(fp)
 8013800:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 8013804:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8013808:	00000a06 	br	8013834 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 801380c:	e17ffc17 	ldw	r5,-16(fp)
 8013810:	e13ffb17 	ldw	r4,-20(fp)
 8013814:	8012a580 	call	8012a58 <alt_avalon_i2c_rx_read>
 8013818:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 801381c:	e0bffc17 	ldw	r2,-16(fp)
 8013820:	10800044 	addi	r2,r2,1
 8013824:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 8013828:	e0bff717 	ldw	r2,-36(fp)
 801382c:	10800044 	addi	r2,r2,1
 8013830:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8013834:	e0fff717 	ldw	r3,-36(fp)
 8013838:	e0bffd17 	ldw	r2,-12(fp)
 801383c:	1880022e 	bgeu	r3,r2,8013848 <alt_avalon_i2c_master_receive+0x17c>
 8013840:	e0bff917 	ldw	r2,-28(fp)
 8013844:	103ff126 	beq	r2,zero,801380c <__alt_data_end+0xffff3e0c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8013848:	e0bfff03 	ldbu	r2,-4(fp)
 801384c:	1000021e 	bne	r2,zero,8013858 <alt_avalon_i2c_master_receive+0x18c>
 8013850:	e0bff917 	ldw	r2,-28(fp)
 8013854:	10001b26 	beq	r2,zero,80138c4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 8013858:	0149c404 	movi	r5,10000
 801385c:	e13ffd17 	ldw	r4,-12(fp)
 8013860:	80116700 	call	8011670 <__mulsi3>
 8013864:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8013868:	00000d06 	br	80138a0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 801386c:	e0bff617 	ldw	r2,-40(fp)
 8013870:	108002a8 	cmpgeui	r2,r2,10
 8013874:	1000021e 	bne	r2,zero,8013880 <alt_avalon_i2c_master_receive+0x1b4>
 8013878:	0109c404 	movi	r4,10000
 801387c:	80149ac0 	call	80149ac <alt_busy_sleep>
            if (--timeout == 0)
 8013880:	e0bff617 	ldw	r2,-40(fp)
 8013884:	10bfffc4 	addi	r2,r2,-1
 8013888:	e0bff615 	stw	r2,-40(fp)
 801388c:	e0bff617 	ldw	r2,-40(fp)
 8013890:	1000031e 	bne	r2,zero,80138a0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8013894:	00bfff84 	movi	r2,-2
 8013898:	e0bff915 	stw	r2,-28(fp)
               break;
 801389c:	00000306 	br	80138ac <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80138a0:	e13ffb17 	ldw	r4,-20(fp)
 80138a4:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 80138a8:	103ff01e 	bne	r2,zero,801386c <__alt_data_end+0xffff3e6c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 80138ac:	e0bff904 	addi	r2,fp,-28
 80138b0:	100b883a 	mov	r5,r2
 80138b4:	e13ffb17 	ldw	r4,-20(fp)
 80138b8:	8012d400 	call	8012d40 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80138bc:	e13ffb17 	ldw	r4,-20(fp)
 80138c0:	80126140 	call	8012614 <alt_avalon_i2c_disable>
    }

    return status;
 80138c4:	e0bff917 	ldw	r2,-28(fp)
}
 80138c8:	e037883a 	mov	sp,fp
 80138cc:	dfc00117 	ldw	ra,4(sp)
 80138d0:	df000017 	ldw	fp,0(sp)
 80138d4:	dec00204 	addi	sp,sp,8
 80138d8:	f800283a 	ret

080138dc <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 80138dc:	defff504 	addi	sp,sp,-44
 80138e0:	dfc00a15 	stw	ra,40(sp)
 80138e4:	df000915 	stw	fp,36(sp)
 80138e8:	df000904 	addi	fp,sp,36
 80138ec:	e13ffb15 	stw	r4,-20(fp)
 80138f0:	e17ffc15 	stw	r5,-16(fp)
 80138f4:	e1bffd15 	stw	r6,-12(fp)
 80138f8:	3807883a 	mov	r3,r7
 80138fc:	e0800217 	ldw	r2,8(fp)
 8013900:	e0fffe05 	stb	r3,-8(fp)
 8013904:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8013908:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801390c:	e0bffb17 	ldw	r2,-20(fp)
 8013910:	10800717 	ldw	r2,28(r2)
 8013914:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 8013918:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 801391c:	e0bffd17 	ldw	r2,-12(fp)
 8013920:	1000021e 	bne	r2,zero,801392c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8013924:	0005883a 	mov	r2,zero
 8013928:	00006306 	br	8013ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801392c:	e0bffb17 	ldw	r2,-20(fp)
 8013930:	10c00617 	ldw	r3,24(r2)
 8013934:	00820074 	movhi	r2,2049
 8013938:	10888004 	addi	r2,r2,8704
 801393c:	18800226 	beq	r3,r2,8013948 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8013940:	00bfff44 	movi	r2,-3
 8013944:	00005c06 	br	8013ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8013948:	e0bffe03 	ldbu	r2,-8(fp)
 801394c:	10000a1e 	bne	r2,zero,8013978 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8013950:	e13ffb17 	ldw	r4,-20(fp)
 8013954:	801257c0 	call	801257c <alt_avalon_i2c_enable>
 8013958:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 801395c:	e0bff717 	ldw	r2,-36(fp)
 8013960:	10000226 	beq	r2,zero,801396c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 8013964:	e0bff717 	ldw	r2,-36(fp)
 8013968:	00005306 	br	8013ab8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 801396c:	01400704 	movi	r5,28
 8013970:	e13ffb17 	ldw	r4,-20(fp)
 8013974:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8013978:	e0bffe03 	ldbu	r2,-8(fp)
 801397c:	100d883a 	mov	r6,r2
 8013980:	01400044 	movi	r5,1
 8013984:	e13ffb17 	ldw	r4,-20(fp)
 8013988:	8012be40 	call	8012be4 <alt_avalon_i2c_send_address>
 801398c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8013990:	e0bff717 	ldw	r2,-36(fp)
 8013994:	1000191e 	bne	r2,zero,80139fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8013998:	00000906 	br	80139c0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 801399c:	000f883a 	mov	r7,zero
 80139a0:	000d883a 	mov	r6,zero
 80139a4:	000b883a 	mov	r5,zero
 80139a8:	e13ffb17 	ldw	r4,-20(fp)
 80139ac:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 80139b0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 80139b4:	e0bff917 	ldw	r2,-28(fp)
 80139b8:	10800044 	addi	r2,r2,1
 80139bc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80139c0:	e0bffd17 	ldw	r2,-12(fp)
 80139c4:	10bfffc4 	addi	r2,r2,-1
 80139c8:	e0fff917 	ldw	r3,-28(fp)
 80139cc:	1880022e 	bgeu	r3,r2,80139d8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 80139d0:	e0bff717 	ldw	r2,-36(fp)
 80139d4:	103ff126 	beq	r2,zero,801399c <__alt_data_end+0xffff3f9c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 80139d8:	e0bff717 	ldw	r2,-36(fp)
 80139dc:	1000071e 	bne	r2,zero,80139fc <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 80139e0:	e0bfff03 	ldbu	r2,-4(fp)
 80139e4:	100f883a 	mov	r7,r2
 80139e8:	000d883a 	mov	r6,zero
 80139ec:	000b883a 	mov	r5,zero
 80139f0:	e13ffb17 	ldw	r4,-20(fp)
 80139f4:	8012b000 	call	8012b00 <alt_avalon_i2c_cmd_write>
 80139f8:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 80139fc:	e0bff717 	ldw	r2,-36(fp)
 8013a00:	10001826 	beq	r2,zero,8013a64 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 8013a04:	0149c404 	movi	r5,10000
 8013a08:	e13ffd17 	ldw	r4,-12(fp)
 8013a0c:	80116700 	call	8011670 <__mulsi3>
 8013a10:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8013a14:	00000d06 	br	8013a4c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8013a18:	e0bff817 	ldw	r2,-32(fp)
 8013a1c:	108002a8 	cmpgeui	r2,r2,10
 8013a20:	1000021e 	bne	r2,zero,8013a2c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 8013a24:	0109c404 	movi	r4,10000
 8013a28:	80149ac0 	call	80149ac <alt_busy_sleep>
            if (--timeout == 0)
 8013a2c:	e0bff817 	ldw	r2,-32(fp)
 8013a30:	10bfffc4 	addi	r2,r2,-1
 8013a34:	e0bff815 	stw	r2,-32(fp)
 8013a38:	e0bff817 	ldw	r2,-32(fp)
 8013a3c:	1000031e 	bne	r2,zero,8013a4c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8013a40:	00bfff84 	movi	r2,-2
 8013a44:	e0bff715 	stw	r2,-36(fp)
               break;
 8013a48:	00000306 	br	8013a58 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8013a4c:	e13ffb17 	ldw	r4,-20(fp)
 8013a50:	801296c0 	call	801296c <alt_avalon_i2c_is_busy>
 8013a54:	103ff01e 	bne	r2,zero,8013a18 <__alt_data_end+0xffff4018>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8013a58:	e13ffb17 	ldw	r4,-20(fp)
 8013a5c:	80126140 	call	8012614 <alt_avalon_i2c_disable>
 8013a60:	00001406 	br	8013ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 8013a64:	e0bfff03 	ldbu	r2,-4(fp)
 8013a68:	10001226 	beq	r2,zero,8013ab4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013a6c:	01400704 	movi	r5,28
 8013a70:	e13ffb17 	ldw	r4,-20(fp)
 8013a74:	8013b680 	call	8013b68 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 8013a78:	000b883a 	mov	r5,zero
 8013a7c:	e13ffb17 	ldw	r4,-20(fp)
 8013a80:	8013d000 	call	8013d00 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 8013a84:	e0bffa17 	ldw	r2,-24(fp)
 8013a88:	00c00084 	movi	r3,2
 8013a8c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 8013a90:	e0bffa17 	ldw	r2,-24(fp)
 8013a94:	e0fffc17 	ldw	r3,-16(fp)
 8013a98:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 8013a9c:	e0bffa17 	ldw	r2,-24(fp)
 8013aa0:	e0fffd17 	ldw	r3,-12(fp)
 8013aa4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8013aa8:	01400084 	movi	r5,2
 8013aac:	e13ffb17 	ldw	r4,-20(fp)
 8013ab0:	8013c0c0 	call	8013c0c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 8013ab4:	e0bff717 	ldw	r2,-36(fp)
}
 8013ab8:	e037883a 	mov	sp,fp
 8013abc:	dfc00117 	ldw	ra,4(sp)
 8013ac0:	df000017 	ldw	fp,0(sp)
 8013ac4:	dec00204 	addi	sp,sp,8
 8013ac8:	f800283a 	ret

08013acc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 8013acc:	defffd04 	addi	sp,sp,-12
 8013ad0:	df000215 	stw	fp,8(sp)
 8013ad4:	df000204 	addi	fp,sp,8
 8013ad8:	e13ffe15 	stw	r4,-8(fp)
 8013adc:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 8013ae0:	e0bffe17 	ldw	r2,-8(fp)
 8013ae4:	10800317 	ldw	r2,12(r2)
 8013ae8:	10800404 	addi	r2,r2,16
 8013aec:	10c00037 	ldwio	r3,0(r2)
 8013af0:	e0bffe17 	ldw	r2,-8(fp)
 8013af4:	10800317 	ldw	r2,12(r2)
 8013af8:	10800304 	addi	r2,r2,12
 8013afc:	10800037 	ldwio	r2,0(r2)
 8013b00:	1884703a 	and	r2,r3,r2
 8013b04:	1007883a 	mov	r3,r2
 8013b08:	e0bfff17 	ldw	r2,-4(fp)
 8013b0c:	10c00015 	stw	r3,0(r2)
}
 8013b10:	0001883a 	nop
 8013b14:	e037883a 	mov	sp,fp
 8013b18:	df000017 	ldw	fp,0(sp)
 8013b1c:	dec00104 	addi	sp,sp,4
 8013b20:	f800283a 	ret

08013b24 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 8013b24:	defffd04 	addi	sp,sp,-12
 8013b28:	df000215 	stw	fp,8(sp)
 8013b2c:	df000204 	addi	fp,sp,8
 8013b30:	e13ffe15 	stw	r4,-8(fp)
 8013b34:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 8013b38:	e0bffe17 	ldw	r2,-8(fp)
 8013b3c:	10800317 	ldw	r2,12(r2)
 8013b40:	10800404 	addi	r2,r2,16
 8013b44:	10800037 	ldwio	r2,0(r2)
 8013b48:	1007883a 	mov	r3,r2
 8013b4c:	e0bfff17 	ldw	r2,-4(fp)
 8013b50:	10c00015 	stw	r3,0(r2)
}
 8013b54:	0001883a 	nop
 8013b58:	e037883a 	mov	sp,fp
 8013b5c:	df000017 	ldw	fp,0(sp)
 8013b60:	dec00104 	addi	sp,sp,4
 8013b64:	f800283a 	ret

08013b68 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8013b68:	defffd04 	addi	sp,sp,-12
 8013b6c:	df000215 	stw	fp,8(sp)
 8013b70:	df000204 	addi	fp,sp,8
 8013b74:	e13ffe15 	stw	r4,-8(fp)
 8013b78:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 8013b7c:	e0bffe17 	ldw	r2,-8(fp)
 8013b80:	10800317 	ldw	r2,12(r2)
 8013b84:	10800404 	addi	r2,r2,16
 8013b88:	e0ffff17 	ldw	r3,-4(fp)
 8013b8c:	10c00035 	stwio	r3,0(r2)
}
 8013b90:	0001883a 	nop
 8013b94:	e037883a 	mov	sp,fp
 8013b98:	df000017 	ldw	fp,0(sp)
 8013b9c:	dec00104 	addi	sp,sp,4
 8013ba0:	f800283a 	ret

08013ba4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8013ba4:	defffb04 	addi	sp,sp,-20
 8013ba8:	dfc00415 	stw	ra,16(sp)
 8013bac:	df000315 	stw	fp,12(sp)
 8013bb0:	df000304 	addi	fp,sp,12
 8013bb4:	e13ffe15 	stw	r4,-8(fp)
 8013bb8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8013bbc:	e17ffd04 	addi	r5,fp,-12
 8013bc0:	e13ffe17 	ldw	r4,-8(fp)
 8013bc4:	8013c700 	call	8013c70 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 8013bc8:	e0bfff17 	ldw	r2,-4(fp)
 8013bcc:	0086303a 	nor	r3,zero,r2
 8013bd0:	e0bffd17 	ldw	r2,-12(fp)
 8013bd4:	1884703a 	and	r2,r3,r2
 8013bd8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8013bdc:	e0bffe17 	ldw	r2,-8(fp)
 8013be0:	10800317 	ldw	r2,12(r2)
 8013be4:	10800304 	addi	r2,r2,12
 8013be8:	e0fffd17 	ldw	r3,-12(fp)
 8013bec:	18c007cc 	andi	r3,r3,31
 8013bf0:	10c00035 	stwio	r3,0(r2)
}
 8013bf4:	0001883a 	nop
 8013bf8:	e037883a 	mov	sp,fp
 8013bfc:	dfc00117 	ldw	ra,4(sp)
 8013c00:	df000017 	ldw	fp,0(sp)
 8013c04:	dec00204 	addi	sp,sp,8
 8013c08:	f800283a 	ret

08013c0c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8013c0c:	defffb04 	addi	sp,sp,-20
 8013c10:	dfc00415 	stw	ra,16(sp)
 8013c14:	df000315 	stw	fp,12(sp)
 8013c18:	df000304 	addi	fp,sp,12
 8013c1c:	e13ffe15 	stw	r4,-8(fp)
 8013c20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8013c24:	e17ffd04 	addi	r5,fp,-12
 8013c28:	e13ffe17 	ldw	r4,-8(fp)
 8013c2c:	8013c700 	call	8013c70 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 8013c30:	e0fffd17 	ldw	r3,-12(fp)
 8013c34:	e0bfff17 	ldw	r2,-4(fp)
 8013c38:	1884b03a 	or	r2,r3,r2
 8013c3c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8013c40:	e0bffe17 	ldw	r2,-8(fp)
 8013c44:	10800317 	ldw	r2,12(r2)
 8013c48:	10800304 	addi	r2,r2,12
 8013c4c:	e0fffd17 	ldw	r3,-12(fp)
 8013c50:	18c007cc 	andi	r3,r3,31
 8013c54:	10c00035 	stwio	r3,0(r2)
}
 8013c58:	0001883a 	nop
 8013c5c:	e037883a 	mov	sp,fp
 8013c60:	dfc00117 	ldw	ra,4(sp)
 8013c64:	df000017 	ldw	fp,0(sp)
 8013c68:	dec00204 	addi	sp,sp,8
 8013c6c:	f800283a 	ret

08013c70 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 8013c70:	defffd04 	addi	sp,sp,-12
 8013c74:	df000215 	stw	fp,8(sp)
 8013c78:	df000204 	addi	fp,sp,8
 8013c7c:	e13ffe15 	stw	r4,-8(fp)
 8013c80:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 8013c84:	e0bffe17 	ldw	r2,-8(fp)
 8013c88:	10800317 	ldw	r2,12(r2)
 8013c8c:	10800304 	addi	r2,r2,12
 8013c90:	10800037 	ldwio	r2,0(r2)
 8013c94:	10c007cc 	andi	r3,r2,31
 8013c98:	e0bfff17 	ldw	r2,-4(fp)
 8013c9c:	10c00015 	stw	r3,0(r2)
}
 8013ca0:	0001883a 	nop
 8013ca4:	e037883a 	mov	sp,fp
 8013ca8:	df000017 	ldw	fp,0(sp)
 8013cac:	dec00104 	addi	sp,sp,4
 8013cb0:	f800283a 	ret

08013cb4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 8013cb4:	defffd04 	addi	sp,sp,-12
 8013cb8:	df000215 	stw	fp,8(sp)
 8013cbc:	df000204 	addi	fp,sp,8
 8013cc0:	e13ffe15 	stw	r4,-8(fp)
 8013cc4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 8013cc8:	e0bffe17 	ldw	r2,-8(fp)
 8013ccc:	10800317 	ldw	r2,12(r2)
 8013cd0:	10800204 	addi	r2,r2,8
 8013cd4:	10800037 	ldwio	r2,0(r2)
 8013cd8:	10800c0c 	andi	r2,r2,48
 8013cdc:	1005d13a 	srai	r2,r2,4
 8013ce0:	1007883a 	mov	r3,r2
 8013ce4:	e0bfff17 	ldw	r2,-4(fp)
 8013ce8:	10c00015 	stw	r3,0(r2)
}
 8013cec:	0001883a 	nop
 8013cf0:	e037883a 	mov	sp,fp
 8013cf4:	df000017 	ldw	fp,0(sp)
 8013cf8:	dec00104 	addi	sp,sp,4
 8013cfc:	f800283a 	ret

08013d00 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 8013d00:	defffd04 	addi	sp,sp,-12
 8013d04:	df000215 	stw	fp,8(sp)
 8013d08:	df000204 	addi	fp,sp,8
 8013d0c:	e13ffe15 	stw	r4,-8(fp)
 8013d10:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 8013d14:	e0bffe17 	ldw	r2,-8(fp)
 8013d18:	10800317 	ldw	r2,12(r2)
 8013d1c:	10800204 	addi	r2,r2,8
 8013d20:	e0fffe17 	ldw	r3,-8(fp)
 8013d24:	18c00317 	ldw	r3,12(r3)
 8013d28:	18c00204 	addi	r3,r3,8
 8013d2c:	18c00037 	ldwio	r3,0(r3)
 8013d30:	1809883a 	mov	r4,r3
 8013d34:	00fff3c4 	movi	r3,-49
 8013d38:	20c8703a 	and	r4,r4,r3
 8013d3c:	e0ffff17 	ldw	r3,-4(fp)
 8013d40:	1806913a 	slli	r3,r3,4
 8013d44:	18c00c0c 	andi	r3,r3,48
 8013d48:	20c6b03a 	or	r3,r4,r3
 8013d4c:	10c00035 	stwio	r3,0(r2)
}
 8013d50:	0001883a 	nop
 8013d54:	e037883a 	mov	sp,fp
 8013d58:	df000017 	ldw	fp,0(sp)
 8013d5c:	dec00104 	addi	sp,sp,4
 8013d60:	f800283a 	ret

08013d64 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 8013d64:	defffd04 	addi	sp,sp,-12
 8013d68:	df000215 	stw	fp,8(sp)
 8013d6c:	df000204 	addi	fp,sp,8
 8013d70:	e13ffe15 	stw	r4,-8(fp)
 8013d74:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 8013d78:	e0bffe17 	ldw	r2,-8(fp)
 8013d7c:	10800317 	ldw	r2,12(r2)
 8013d80:	10800204 	addi	r2,r2,8
 8013d84:	10800037 	ldwio	r2,0(r2)
 8013d88:	1080030c 	andi	r2,r2,12
 8013d8c:	1005d0ba 	srai	r2,r2,2
 8013d90:	1007883a 	mov	r3,r2
 8013d94:	e0bfff17 	ldw	r2,-4(fp)
 8013d98:	10c00015 	stw	r3,0(r2)
}
 8013d9c:	0001883a 	nop
 8013da0:	e037883a 	mov	sp,fp
 8013da4:	df000017 	ldw	fp,0(sp)
 8013da8:	dec00104 	addi	sp,sp,4
 8013dac:	f800283a 	ret

08013db0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 8013db0:	defffd04 	addi	sp,sp,-12
 8013db4:	df000215 	stw	fp,8(sp)
 8013db8:	df000204 	addi	fp,sp,8
 8013dbc:	e13ffe15 	stw	r4,-8(fp)
 8013dc0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 8013dc4:	e0bffe17 	ldw	r2,-8(fp)
 8013dc8:	10800317 	ldw	r2,12(r2)
 8013dcc:	10c00204 	addi	r3,r2,8
 8013dd0:	e0bffe17 	ldw	r2,-8(fp)
 8013dd4:	10800317 	ldw	r2,12(r2)
 8013dd8:	10800204 	addi	r2,r2,8
 8013ddc:	10800037 	ldwio	r2,0(r2)
 8013de0:	1009883a 	mov	r4,r2
 8013de4:	00bffcc4 	movi	r2,-13
 8013de8:	2088703a 	and	r4,r4,r2
 8013dec:	e0bfff17 	ldw	r2,-4(fp)
 8013df0:	1085883a 	add	r2,r2,r2
 8013df4:	1085883a 	add	r2,r2,r2
 8013df8:	1080030c 	andi	r2,r2,12
 8013dfc:	2084b03a 	or	r2,r4,r2
 8013e00:	18800035 	stwio	r2,0(r3)
}
 8013e04:	0001883a 	nop
 8013e08:	e037883a 	mov	sp,fp
 8013e0c:	df000017 	ldw	fp,0(sp)
 8013e10:	dec00104 	addi	sp,sp,4
 8013e14:	f800283a 	ret

08013e18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8013e18:	defffa04 	addi	sp,sp,-24
 8013e1c:	dfc00515 	stw	ra,20(sp)
 8013e20:	df000415 	stw	fp,16(sp)
 8013e24:	df000404 	addi	fp,sp,16
 8013e28:	e13ffd15 	stw	r4,-12(fp)
 8013e2c:	e17ffe15 	stw	r5,-8(fp)
 8013e30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013e34:	e0bffd17 	ldw	r2,-12(fp)
 8013e38:	10800017 	ldw	r2,0(r2)
 8013e3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8013e40:	e0bffc17 	ldw	r2,-16(fp)
 8013e44:	10c00a04 	addi	r3,r2,40
 8013e48:	e0bffd17 	ldw	r2,-12(fp)
 8013e4c:	10800217 	ldw	r2,8(r2)
 8013e50:	100f883a 	mov	r7,r2
 8013e54:	e1bfff17 	ldw	r6,-4(fp)
 8013e58:	e17ffe17 	ldw	r5,-8(fp)
 8013e5c:	1809883a 	mov	r4,r3
 8013e60:	80144400 	call	8014440 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8013e64:	e037883a 	mov	sp,fp
 8013e68:	dfc00117 	ldw	ra,4(sp)
 8013e6c:	df000017 	ldw	fp,0(sp)
 8013e70:	dec00204 	addi	sp,sp,8
 8013e74:	f800283a 	ret

08013e78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8013e78:	defffa04 	addi	sp,sp,-24
 8013e7c:	dfc00515 	stw	ra,20(sp)
 8013e80:	df000415 	stw	fp,16(sp)
 8013e84:	df000404 	addi	fp,sp,16
 8013e88:	e13ffd15 	stw	r4,-12(fp)
 8013e8c:	e17ffe15 	stw	r5,-8(fp)
 8013e90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013e94:	e0bffd17 	ldw	r2,-12(fp)
 8013e98:	10800017 	ldw	r2,0(r2)
 8013e9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8013ea0:	e0bffc17 	ldw	r2,-16(fp)
 8013ea4:	10c00a04 	addi	r3,r2,40
 8013ea8:	e0bffd17 	ldw	r2,-12(fp)
 8013eac:	10800217 	ldw	r2,8(r2)
 8013eb0:	100f883a 	mov	r7,r2
 8013eb4:	e1bfff17 	ldw	r6,-4(fp)
 8013eb8:	e17ffe17 	ldw	r5,-8(fp)
 8013ebc:	1809883a 	mov	r4,r3
 8013ec0:	801465c0 	call	801465c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8013ec4:	e037883a 	mov	sp,fp
 8013ec8:	dfc00117 	ldw	ra,4(sp)
 8013ecc:	df000017 	ldw	fp,0(sp)
 8013ed0:	dec00204 	addi	sp,sp,8
 8013ed4:	f800283a 	ret

08013ed8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8013ed8:	defffc04 	addi	sp,sp,-16
 8013edc:	dfc00315 	stw	ra,12(sp)
 8013ee0:	df000215 	stw	fp,8(sp)
 8013ee4:	df000204 	addi	fp,sp,8
 8013ee8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013eec:	e0bfff17 	ldw	r2,-4(fp)
 8013ef0:	10800017 	ldw	r2,0(r2)
 8013ef4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8013ef8:	e0bffe17 	ldw	r2,-8(fp)
 8013efc:	10c00a04 	addi	r3,r2,40
 8013f00:	e0bfff17 	ldw	r2,-4(fp)
 8013f04:	10800217 	ldw	r2,8(r2)
 8013f08:	100b883a 	mov	r5,r2
 8013f0c:	1809883a 	mov	r4,r3
 8013f10:	80142e80 	call	80142e8 <altera_avalon_jtag_uart_close>
}
 8013f14:	e037883a 	mov	sp,fp
 8013f18:	dfc00117 	ldw	ra,4(sp)
 8013f1c:	df000017 	ldw	fp,0(sp)
 8013f20:	dec00204 	addi	sp,sp,8
 8013f24:	f800283a 	ret

08013f28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8013f28:	defffa04 	addi	sp,sp,-24
 8013f2c:	dfc00515 	stw	ra,20(sp)
 8013f30:	df000415 	stw	fp,16(sp)
 8013f34:	df000404 	addi	fp,sp,16
 8013f38:	e13ffd15 	stw	r4,-12(fp)
 8013f3c:	e17ffe15 	stw	r5,-8(fp)
 8013f40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8013f44:	e0bffd17 	ldw	r2,-12(fp)
 8013f48:	10800017 	ldw	r2,0(r2)
 8013f4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8013f50:	e0bffc17 	ldw	r2,-16(fp)
 8013f54:	10800a04 	addi	r2,r2,40
 8013f58:	e1bfff17 	ldw	r6,-4(fp)
 8013f5c:	e17ffe17 	ldw	r5,-8(fp)
 8013f60:	1009883a 	mov	r4,r2
 8013f64:	80143500 	call	8014350 <altera_avalon_jtag_uart_ioctl>
}
 8013f68:	e037883a 	mov	sp,fp
 8013f6c:	dfc00117 	ldw	ra,4(sp)
 8013f70:	df000017 	ldw	fp,0(sp)
 8013f74:	dec00204 	addi	sp,sp,8
 8013f78:	f800283a 	ret

08013f7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013f7c:	defffa04 	addi	sp,sp,-24
 8013f80:	dfc00515 	stw	ra,20(sp)
 8013f84:	df000415 	stw	fp,16(sp)
 8013f88:	df000404 	addi	fp,sp,16
 8013f8c:	e13ffd15 	stw	r4,-12(fp)
 8013f90:	e17ffe15 	stw	r5,-8(fp)
 8013f94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013f98:	e0bffd17 	ldw	r2,-12(fp)
 8013f9c:	00c00044 	movi	r3,1
 8013fa0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8013fa4:	e0bffd17 	ldw	r2,-12(fp)
 8013fa8:	10800017 	ldw	r2,0(r2)
 8013fac:	10800104 	addi	r2,r2,4
 8013fb0:	1007883a 	mov	r3,r2
 8013fb4:	e0bffd17 	ldw	r2,-12(fp)
 8013fb8:	10800817 	ldw	r2,32(r2)
 8013fbc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8013fc0:	e0bffe17 	ldw	r2,-8(fp)
 8013fc4:	e0ffff17 	ldw	r3,-4(fp)
 8013fc8:	d8000015 	stw	zero,0(sp)
 8013fcc:	e1fffd17 	ldw	r7,-12(fp)
 8013fd0:	01820074 	movhi	r6,2049
 8013fd4:	31900f04 	addi	r6,r6,16444
 8013fd8:	180b883a 	mov	r5,r3
 8013fdc:	1009883a 	mov	r4,r2
 8013fe0:	8014eb40 	call	8014eb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8013fe4:	e0bffd17 	ldw	r2,-12(fp)
 8013fe8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8013fec:	e0bffd17 	ldw	r2,-12(fp)
 8013ff0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013ff4:	d0e4e717 	ldw	r3,-27748(gp)
 8013ff8:	e1fffd17 	ldw	r7,-12(fp)
 8013ffc:	01820074 	movhi	r6,2049
 8014000:	31909204 	addi	r6,r6,16968
 8014004:	180b883a 	mov	r5,r3
 8014008:	1009883a 	mov	r4,r2
 801400c:	80148800 	call	8014880 <alt_alarm_start>
 8014010:	1000040e 	bge	r2,zero,8014024 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8014014:	e0fffd17 	ldw	r3,-12(fp)
 8014018:	00a00034 	movhi	r2,32768
 801401c:	10bfffc4 	addi	r2,r2,-1
 8014020:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8014024:	0001883a 	nop
 8014028:	e037883a 	mov	sp,fp
 801402c:	dfc00117 	ldw	ra,4(sp)
 8014030:	df000017 	ldw	fp,0(sp)
 8014034:	dec00204 	addi	sp,sp,8
 8014038:	f800283a 	ret

0801403c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801403c:	defff804 	addi	sp,sp,-32
 8014040:	df000715 	stw	fp,28(sp)
 8014044:	df000704 	addi	fp,sp,28
 8014048:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801404c:	e0bfff17 	ldw	r2,-4(fp)
 8014050:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8014054:	e0bffb17 	ldw	r2,-20(fp)
 8014058:	10800017 	ldw	r2,0(r2)
 801405c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014060:	e0bffc17 	ldw	r2,-16(fp)
 8014064:	10800104 	addi	r2,r2,4
 8014068:	10800037 	ldwio	r2,0(r2)
 801406c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8014070:	e0bffd17 	ldw	r2,-12(fp)
 8014074:	1080c00c 	andi	r2,r2,768
 8014078:	10006d26 	beq	r2,zero,8014230 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801407c:	e0bffd17 	ldw	r2,-12(fp)
 8014080:	1080400c 	andi	r2,r2,256
 8014084:	10003526 	beq	r2,zero,801415c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8014088:	00800074 	movhi	r2,1
 801408c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014090:	e0bffb17 	ldw	r2,-20(fp)
 8014094:	10800a17 	ldw	r2,40(r2)
 8014098:	10800044 	addi	r2,r2,1
 801409c:	1081ffcc 	andi	r2,r2,2047
 80140a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80140a4:	e0bffb17 	ldw	r2,-20(fp)
 80140a8:	10c00b17 	ldw	r3,44(r2)
 80140ac:	e0bffe17 	ldw	r2,-8(fp)
 80140b0:	18801526 	beq	r3,r2,8014108 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80140b4:	e0bffc17 	ldw	r2,-16(fp)
 80140b8:	10800037 	ldwio	r2,0(r2)
 80140bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80140c0:	e0bff917 	ldw	r2,-28(fp)
 80140c4:	10a0000c 	andi	r2,r2,32768
 80140c8:	10001126 	beq	r2,zero,8014110 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80140cc:	e0bffb17 	ldw	r2,-20(fp)
 80140d0:	10800a17 	ldw	r2,40(r2)
 80140d4:	e0fff917 	ldw	r3,-28(fp)
 80140d8:	1809883a 	mov	r4,r3
 80140dc:	e0fffb17 	ldw	r3,-20(fp)
 80140e0:	1885883a 	add	r2,r3,r2
 80140e4:	10800e04 	addi	r2,r2,56
 80140e8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80140ec:	e0bffb17 	ldw	r2,-20(fp)
 80140f0:	10800a17 	ldw	r2,40(r2)
 80140f4:	10800044 	addi	r2,r2,1
 80140f8:	10c1ffcc 	andi	r3,r2,2047
 80140fc:	e0bffb17 	ldw	r2,-20(fp)
 8014100:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8014104:	003fe206 	br	8014090 <__alt_data_end+0xffff4690>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8014108:	0001883a 	nop
 801410c:	00000106 	br	8014114 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8014110:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8014114:	e0bff917 	ldw	r2,-28(fp)
 8014118:	10bfffec 	andhi	r2,r2,65535
 801411c:	10000f26 	beq	r2,zero,801415c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014120:	e0bffb17 	ldw	r2,-20(fp)
 8014124:	10c00817 	ldw	r3,32(r2)
 8014128:	00bfff84 	movi	r2,-2
 801412c:	1886703a 	and	r3,r3,r2
 8014130:	e0bffb17 	ldw	r2,-20(fp)
 8014134:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8014138:	e0bffc17 	ldw	r2,-16(fp)
 801413c:	10800104 	addi	r2,r2,4
 8014140:	1007883a 	mov	r3,r2
 8014144:	e0bffb17 	ldw	r2,-20(fp)
 8014148:	10800817 	ldw	r2,32(r2)
 801414c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014150:	e0bffc17 	ldw	r2,-16(fp)
 8014154:	10800104 	addi	r2,r2,4
 8014158:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801415c:	e0bffd17 	ldw	r2,-12(fp)
 8014160:	1080800c 	andi	r2,r2,512
 8014164:	103fbe26 	beq	r2,zero,8014060 <__alt_data_end+0xffff4660>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8014168:	e0bffd17 	ldw	r2,-12(fp)
 801416c:	1004d43a 	srli	r2,r2,16
 8014170:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8014174:	00001406 	br	80141c8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8014178:	e0bffc17 	ldw	r2,-16(fp)
 801417c:	e0fffb17 	ldw	r3,-20(fp)
 8014180:	18c00d17 	ldw	r3,52(r3)
 8014184:	e13ffb17 	ldw	r4,-20(fp)
 8014188:	20c7883a 	add	r3,r4,r3
 801418c:	18c20e04 	addi	r3,r3,2104
 8014190:	18c00003 	ldbu	r3,0(r3)
 8014194:	18c03fcc 	andi	r3,r3,255
 8014198:	18c0201c 	xori	r3,r3,128
 801419c:	18ffe004 	addi	r3,r3,-128
 80141a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80141a4:	e0bffb17 	ldw	r2,-20(fp)
 80141a8:	10800d17 	ldw	r2,52(r2)
 80141ac:	10800044 	addi	r2,r2,1
 80141b0:	10c1ffcc 	andi	r3,r2,2047
 80141b4:	e0bffb17 	ldw	r2,-20(fp)
 80141b8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80141bc:	e0bffa17 	ldw	r2,-24(fp)
 80141c0:	10bfffc4 	addi	r2,r2,-1
 80141c4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80141c8:	e0bffa17 	ldw	r2,-24(fp)
 80141cc:	10000526 	beq	r2,zero,80141e4 <altera_avalon_jtag_uart_irq+0x1a8>
 80141d0:	e0bffb17 	ldw	r2,-20(fp)
 80141d4:	10c00d17 	ldw	r3,52(r2)
 80141d8:	e0bffb17 	ldw	r2,-20(fp)
 80141dc:	10800c17 	ldw	r2,48(r2)
 80141e0:	18bfe51e 	bne	r3,r2,8014178 <__alt_data_end+0xffff4778>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80141e4:	e0bffa17 	ldw	r2,-24(fp)
 80141e8:	103f9d26 	beq	r2,zero,8014060 <__alt_data_end+0xffff4660>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80141ec:	e0bffb17 	ldw	r2,-20(fp)
 80141f0:	10c00817 	ldw	r3,32(r2)
 80141f4:	00bfff44 	movi	r2,-3
 80141f8:	1886703a 	and	r3,r3,r2
 80141fc:	e0bffb17 	ldw	r2,-20(fp)
 8014200:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8014204:	e0bffb17 	ldw	r2,-20(fp)
 8014208:	10800017 	ldw	r2,0(r2)
 801420c:	10800104 	addi	r2,r2,4
 8014210:	1007883a 	mov	r3,r2
 8014214:	e0bffb17 	ldw	r2,-20(fp)
 8014218:	10800817 	ldw	r2,32(r2)
 801421c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8014220:	e0bffc17 	ldw	r2,-16(fp)
 8014224:	10800104 	addi	r2,r2,4
 8014228:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801422c:	003f8c06 	br	8014060 <__alt_data_end+0xffff4660>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8014230:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8014234:	0001883a 	nop
 8014238:	e037883a 	mov	sp,fp
 801423c:	df000017 	ldw	fp,0(sp)
 8014240:	dec00104 	addi	sp,sp,4
 8014244:	f800283a 	ret

08014248 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8014248:	defff804 	addi	sp,sp,-32
 801424c:	df000715 	stw	fp,28(sp)
 8014250:	df000704 	addi	fp,sp,28
 8014254:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8014258:	e0bffb17 	ldw	r2,-20(fp)
 801425c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8014260:	e0bff917 	ldw	r2,-28(fp)
 8014264:	10800017 	ldw	r2,0(r2)
 8014268:	10800104 	addi	r2,r2,4
 801426c:	10800037 	ldwio	r2,0(r2)
 8014270:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8014274:	e0bffa17 	ldw	r2,-24(fp)
 8014278:	1081000c 	andi	r2,r2,1024
 801427c:	10000b26 	beq	r2,zero,80142ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8014280:	e0bff917 	ldw	r2,-28(fp)
 8014284:	10800017 	ldw	r2,0(r2)
 8014288:	10800104 	addi	r2,r2,4
 801428c:	1007883a 	mov	r3,r2
 8014290:	e0bff917 	ldw	r2,-28(fp)
 8014294:	10800817 	ldw	r2,32(r2)
 8014298:	10810014 	ori	r2,r2,1024
 801429c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80142a0:	e0bff917 	ldw	r2,-28(fp)
 80142a4:	10000915 	stw	zero,36(r2)
 80142a8:	00000a06 	br	80142d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80142ac:	e0bff917 	ldw	r2,-28(fp)
 80142b0:	10c00917 	ldw	r3,36(r2)
 80142b4:	00a00034 	movhi	r2,32768
 80142b8:	10bfff04 	addi	r2,r2,-4
 80142bc:	10c00536 	bltu	r2,r3,80142d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80142c0:	e0bff917 	ldw	r2,-28(fp)
 80142c4:	10800917 	ldw	r2,36(r2)
 80142c8:	10c00044 	addi	r3,r2,1
 80142cc:	e0bff917 	ldw	r2,-28(fp)
 80142d0:	10c00915 	stw	r3,36(r2)
 80142d4:	d0a4e717 	ldw	r2,-27748(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80142d8:	e037883a 	mov	sp,fp
 80142dc:	df000017 	ldw	fp,0(sp)
 80142e0:	dec00104 	addi	sp,sp,4
 80142e4:	f800283a 	ret

080142e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80142e8:	defffd04 	addi	sp,sp,-12
 80142ec:	df000215 	stw	fp,8(sp)
 80142f0:	df000204 	addi	fp,sp,8
 80142f4:	e13ffe15 	stw	r4,-8(fp)
 80142f8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80142fc:	00000506 	br	8014314 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8014300:	e0bfff17 	ldw	r2,-4(fp)
 8014304:	1090000c 	andi	r2,r2,16384
 8014308:	10000226 	beq	r2,zero,8014314 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801430c:	00bffd44 	movi	r2,-11
 8014310:	00000b06 	br	8014340 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8014314:	e0bffe17 	ldw	r2,-8(fp)
 8014318:	10c00d17 	ldw	r3,52(r2)
 801431c:	e0bffe17 	ldw	r2,-8(fp)
 8014320:	10800c17 	ldw	r2,48(r2)
 8014324:	18800526 	beq	r3,r2,801433c <altera_avalon_jtag_uart_close+0x54>
 8014328:	e0bffe17 	ldw	r2,-8(fp)
 801432c:	10c00917 	ldw	r3,36(r2)
 8014330:	e0bffe17 	ldw	r2,-8(fp)
 8014334:	10800117 	ldw	r2,4(r2)
 8014338:	18bff136 	bltu	r3,r2,8014300 <__alt_data_end+0xffff4900>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801433c:	0005883a 	mov	r2,zero
}
 8014340:	e037883a 	mov	sp,fp
 8014344:	df000017 	ldw	fp,0(sp)
 8014348:	dec00104 	addi	sp,sp,4
 801434c:	f800283a 	ret

08014350 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8014350:	defffa04 	addi	sp,sp,-24
 8014354:	df000515 	stw	fp,20(sp)
 8014358:	df000504 	addi	fp,sp,20
 801435c:	e13ffd15 	stw	r4,-12(fp)
 8014360:	e17ffe15 	stw	r5,-8(fp)
 8014364:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8014368:	00bff9c4 	movi	r2,-25
 801436c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8014370:	e0bffe17 	ldw	r2,-8(fp)
 8014374:	10da8060 	cmpeqi	r3,r2,27137
 8014378:	1800031e 	bne	r3,zero,8014388 <altera_avalon_jtag_uart_ioctl+0x38>
 801437c:	109a80a0 	cmpeqi	r2,r2,27138
 8014380:	1000181e 	bne	r2,zero,80143e4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8014384:	00002906 	br	801442c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8014388:	e0bffd17 	ldw	r2,-12(fp)
 801438c:	10c00117 	ldw	r3,4(r2)
 8014390:	00a00034 	movhi	r2,32768
 8014394:	10bfffc4 	addi	r2,r2,-1
 8014398:	18802126 	beq	r3,r2,8014420 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 801439c:	e0bfff17 	ldw	r2,-4(fp)
 80143a0:	10800017 	ldw	r2,0(r2)
 80143a4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80143a8:	e0bffc17 	ldw	r2,-16(fp)
 80143ac:	10800090 	cmplti	r2,r2,2
 80143b0:	1000061e 	bne	r2,zero,80143cc <altera_avalon_jtag_uart_ioctl+0x7c>
 80143b4:	e0fffc17 	ldw	r3,-16(fp)
 80143b8:	00a00034 	movhi	r2,32768
 80143bc:	10bfffc4 	addi	r2,r2,-1
 80143c0:	18800226 	beq	r3,r2,80143cc <altera_avalon_jtag_uart_ioctl+0x7c>
 80143c4:	e0bffc17 	ldw	r2,-16(fp)
 80143c8:	00000206 	br	80143d4 <altera_avalon_jtag_uart_ioctl+0x84>
 80143cc:	00a00034 	movhi	r2,32768
 80143d0:	10bfff84 	addi	r2,r2,-2
 80143d4:	e0fffd17 	ldw	r3,-12(fp)
 80143d8:	18800115 	stw	r2,4(r3)
      rc = 0;
 80143dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80143e0:	00000f06 	br	8014420 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80143e4:	e0bffd17 	ldw	r2,-12(fp)
 80143e8:	10c00117 	ldw	r3,4(r2)
 80143ec:	00a00034 	movhi	r2,32768
 80143f0:	10bfffc4 	addi	r2,r2,-1
 80143f4:	18800c26 	beq	r3,r2,8014428 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80143f8:	e0bffd17 	ldw	r2,-12(fp)
 80143fc:	10c00917 	ldw	r3,36(r2)
 8014400:	e0bffd17 	ldw	r2,-12(fp)
 8014404:	10800117 	ldw	r2,4(r2)
 8014408:	1885803a 	cmpltu	r2,r3,r2
 801440c:	10c03fcc 	andi	r3,r2,255
 8014410:	e0bfff17 	ldw	r2,-4(fp)
 8014414:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8014418:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801441c:	00000206 	br	8014428 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8014420:	0001883a 	nop
 8014424:	00000106 	br	801442c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8014428:	0001883a 	nop

  default:
    break;
  }

  return rc;
 801442c:	e0bffb17 	ldw	r2,-20(fp)
}
 8014430:	e037883a 	mov	sp,fp
 8014434:	df000017 	ldw	fp,0(sp)
 8014438:	dec00104 	addi	sp,sp,4
 801443c:	f800283a 	ret

08014440 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8014440:	defff304 	addi	sp,sp,-52
 8014444:	dfc00c15 	stw	ra,48(sp)
 8014448:	df000b15 	stw	fp,44(sp)
 801444c:	df000b04 	addi	fp,sp,44
 8014450:	e13ffc15 	stw	r4,-16(fp)
 8014454:	e17ffd15 	stw	r5,-12(fp)
 8014458:	e1bffe15 	stw	r6,-8(fp)
 801445c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8014460:	e0bffd17 	ldw	r2,-12(fp)
 8014464:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8014468:	00004706 	br	8014588 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801446c:	e0bffc17 	ldw	r2,-16(fp)
 8014470:	10800a17 	ldw	r2,40(r2)
 8014474:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8014478:	e0bffc17 	ldw	r2,-16(fp)
 801447c:	10800b17 	ldw	r2,44(r2)
 8014480:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8014484:	e0fff717 	ldw	r3,-36(fp)
 8014488:	e0bff817 	ldw	r2,-32(fp)
 801448c:	18800536 	bltu	r3,r2,80144a4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8014490:	e0fff717 	ldw	r3,-36(fp)
 8014494:	e0bff817 	ldw	r2,-32(fp)
 8014498:	1885c83a 	sub	r2,r3,r2
 801449c:	e0bff615 	stw	r2,-40(fp)
 80144a0:	00000406 	br	80144b4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80144a4:	00c20004 	movi	r3,2048
 80144a8:	e0bff817 	ldw	r2,-32(fp)
 80144ac:	1885c83a 	sub	r2,r3,r2
 80144b0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80144b4:	e0bff617 	ldw	r2,-40(fp)
 80144b8:	10001e26 	beq	r2,zero,8014534 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80144bc:	e0fffe17 	ldw	r3,-8(fp)
 80144c0:	e0bff617 	ldw	r2,-40(fp)
 80144c4:	1880022e 	bgeu	r3,r2,80144d0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80144c8:	e0bffe17 	ldw	r2,-8(fp)
 80144cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80144d0:	e0bffc17 	ldw	r2,-16(fp)
 80144d4:	10c00e04 	addi	r3,r2,56
 80144d8:	e0bff817 	ldw	r2,-32(fp)
 80144dc:	1885883a 	add	r2,r3,r2
 80144e0:	e1bff617 	ldw	r6,-40(fp)
 80144e4:	100b883a 	mov	r5,r2
 80144e8:	e13ff517 	ldw	r4,-44(fp)
 80144ec:	8015cb80 	call	8015cb8 <memcpy>
      ptr   += n;
 80144f0:	e0fff517 	ldw	r3,-44(fp)
 80144f4:	e0bff617 	ldw	r2,-40(fp)
 80144f8:	1885883a 	add	r2,r3,r2
 80144fc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8014500:	e0fffe17 	ldw	r3,-8(fp)
 8014504:	e0bff617 	ldw	r2,-40(fp)
 8014508:	1885c83a 	sub	r2,r3,r2
 801450c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014510:	e0fff817 	ldw	r3,-32(fp)
 8014514:	e0bff617 	ldw	r2,-40(fp)
 8014518:	1885883a 	add	r2,r3,r2
 801451c:	10c1ffcc 	andi	r3,r2,2047
 8014520:	e0bffc17 	ldw	r2,-16(fp)
 8014524:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8014528:	e0bffe17 	ldw	r2,-8(fp)
 801452c:	00bfcf16 	blt	zero,r2,801446c <__alt_data_end+0xffff4a6c>
 8014530:	00000106 	br	8014538 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8014534:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8014538:	e0fff517 	ldw	r3,-44(fp)
 801453c:	e0bffd17 	ldw	r2,-12(fp)
 8014540:	1880141e 	bne	r3,r2,8014594 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8014544:	e0bfff17 	ldw	r2,-4(fp)
 8014548:	1090000c 	andi	r2,r2,16384
 801454c:	1000131e 	bne	r2,zero,801459c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8014550:	0001883a 	nop
 8014554:	e0bffc17 	ldw	r2,-16(fp)
 8014558:	10c00a17 	ldw	r3,40(r2)
 801455c:	e0bff717 	ldw	r2,-36(fp)
 8014560:	1880051e 	bne	r3,r2,8014578 <altera_avalon_jtag_uart_read+0x138>
 8014564:	e0bffc17 	ldw	r2,-16(fp)
 8014568:	10c00917 	ldw	r3,36(r2)
 801456c:	e0bffc17 	ldw	r2,-16(fp)
 8014570:	10800117 	ldw	r2,4(r2)
 8014574:	18bff736 	bltu	r3,r2,8014554 <__alt_data_end+0xffff4b54>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8014578:	e0bffc17 	ldw	r2,-16(fp)
 801457c:	10c00a17 	ldw	r3,40(r2)
 8014580:	e0bff717 	ldw	r2,-36(fp)
 8014584:	18800726 	beq	r3,r2,80145a4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8014588:	e0bffe17 	ldw	r2,-8(fp)
 801458c:	00bfb716 	blt	zero,r2,801446c <__alt_data_end+0xffff4a6c>
 8014590:	00000506 	br	80145a8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8014594:	0001883a 	nop
 8014598:	00000306 	br	80145a8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 801459c:	0001883a 	nop
 80145a0:	00000106 	br	80145a8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80145a4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80145a8:	e0fff517 	ldw	r3,-44(fp)
 80145ac:	e0bffd17 	ldw	r2,-12(fp)
 80145b0:	18801826 	beq	r3,r2,8014614 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80145b4:	0005303a 	rdctl	r2,status
 80145b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80145bc:	e0fffb17 	ldw	r3,-20(fp)
 80145c0:	00bfff84 	movi	r2,-2
 80145c4:	1884703a 	and	r2,r3,r2
 80145c8:	1001703a 	wrctl	status,r2
  
  return context;
 80145cc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80145d0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80145d4:	e0bffc17 	ldw	r2,-16(fp)
 80145d8:	10800817 	ldw	r2,32(r2)
 80145dc:	10c00054 	ori	r3,r2,1
 80145e0:	e0bffc17 	ldw	r2,-16(fp)
 80145e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80145e8:	e0bffc17 	ldw	r2,-16(fp)
 80145ec:	10800017 	ldw	r2,0(r2)
 80145f0:	10800104 	addi	r2,r2,4
 80145f4:	1007883a 	mov	r3,r2
 80145f8:	e0bffc17 	ldw	r2,-16(fp)
 80145fc:	10800817 	ldw	r2,32(r2)
 8014600:	18800035 	stwio	r2,0(r3)
 8014604:	e0bffa17 	ldw	r2,-24(fp)
 8014608:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801460c:	e0bff917 	ldw	r2,-28(fp)
 8014610:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8014614:	e0fff517 	ldw	r3,-44(fp)
 8014618:	e0bffd17 	ldw	r2,-12(fp)
 801461c:	18800426 	beq	r3,r2,8014630 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8014620:	e0fff517 	ldw	r3,-44(fp)
 8014624:	e0bffd17 	ldw	r2,-12(fp)
 8014628:	1885c83a 	sub	r2,r3,r2
 801462c:	00000606 	br	8014648 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8014630:	e0bfff17 	ldw	r2,-4(fp)
 8014634:	1090000c 	andi	r2,r2,16384
 8014638:	10000226 	beq	r2,zero,8014644 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 801463c:	00bffd44 	movi	r2,-11
 8014640:	00000106 	br	8014648 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8014644:	00bffec4 	movi	r2,-5
}
 8014648:	e037883a 	mov	sp,fp
 801464c:	dfc00117 	ldw	ra,4(sp)
 8014650:	df000017 	ldw	fp,0(sp)
 8014654:	dec00204 	addi	sp,sp,8
 8014658:	f800283a 	ret

0801465c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801465c:	defff304 	addi	sp,sp,-52
 8014660:	dfc00c15 	stw	ra,48(sp)
 8014664:	df000b15 	stw	fp,44(sp)
 8014668:	df000b04 	addi	fp,sp,44
 801466c:	e13ffc15 	stw	r4,-16(fp)
 8014670:	e17ffd15 	stw	r5,-12(fp)
 8014674:	e1bffe15 	stw	r6,-8(fp)
 8014678:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801467c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8014680:	e0bffd17 	ldw	r2,-12(fp)
 8014684:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8014688:	00003706 	br	8014768 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801468c:	e0bffc17 	ldw	r2,-16(fp)
 8014690:	10800c17 	ldw	r2,48(r2)
 8014694:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8014698:	e0bffc17 	ldw	r2,-16(fp)
 801469c:	10800d17 	ldw	r2,52(r2)
 80146a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80146a4:	e0fff917 	ldw	r3,-28(fp)
 80146a8:	e0bff517 	ldw	r2,-44(fp)
 80146ac:	1880062e 	bgeu	r3,r2,80146c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80146b0:	e0fff517 	ldw	r3,-44(fp)
 80146b4:	e0bff917 	ldw	r2,-28(fp)
 80146b8:	1885c83a 	sub	r2,r3,r2
 80146bc:	10bfffc4 	addi	r2,r2,-1
 80146c0:	e0bff615 	stw	r2,-40(fp)
 80146c4:	00000b06 	br	80146f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80146c8:	e0bff517 	ldw	r2,-44(fp)
 80146cc:	10000526 	beq	r2,zero,80146e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80146d0:	00c20004 	movi	r3,2048
 80146d4:	e0bff917 	ldw	r2,-28(fp)
 80146d8:	1885c83a 	sub	r2,r3,r2
 80146dc:	e0bff615 	stw	r2,-40(fp)
 80146e0:	00000406 	br	80146f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80146e4:	00c1ffc4 	movi	r3,2047
 80146e8:	e0bff917 	ldw	r2,-28(fp)
 80146ec:	1885c83a 	sub	r2,r3,r2
 80146f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80146f4:	e0bff617 	ldw	r2,-40(fp)
 80146f8:	10001e26 	beq	r2,zero,8014774 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80146fc:	e0fffe17 	ldw	r3,-8(fp)
 8014700:	e0bff617 	ldw	r2,-40(fp)
 8014704:	1880022e 	bgeu	r3,r2,8014710 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8014708:	e0bffe17 	ldw	r2,-8(fp)
 801470c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8014710:	e0bffc17 	ldw	r2,-16(fp)
 8014714:	10c20e04 	addi	r3,r2,2104
 8014718:	e0bff917 	ldw	r2,-28(fp)
 801471c:	1885883a 	add	r2,r3,r2
 8014720:	e1bff617 	ldw	r6,-40(fp)
 8014724:	e17ffd17 	ldw	r5,-12(fp)
 8014728:	1009883a 	mov	r4,r2
 801472c:	8015cb80 	call	8015cb8 <memcpy>
      ptr   += n;
 8014730:	e0fffd17 	ldw	r3,-12(fp)
 8014734:	e0bff617 	ldw	r2,-40(fp)
 8014738:	1885883a 	add	r2,r3,r2
 801473c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8014740:	e0fffe17 	ldw	r3,-8(fp)
 8014744:	e0bff617 	ldw	r2,-40(fp)
 8014748:	1885c83a 	sub	r2,r3,r2
 801474c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014750:	e0fff917 	ldw	r3,-28(fp)
 8014754:	e0bff617 	ldw	r2,-40(fp)
 8014758:	1885883a 	add	r2,r3,r2
 801475c:	10c1ffcc 	andi	r3,r2,2047
 8014760:	e0bffc17 	ldw	r2,-16(fp)
 8014764:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8014768:	e0bffe17 	ldw	r2,-8(fp)
 801476c:	00bfc716 	blt	zero,r2,801468c <__alt_data_end+0xffff4c8c>
 8014770:	00000106 	br	8014778 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8014774:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014778:	0005303a 	rdctl	r2,status
 801477c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014780:	e0fffb17 	ldw	r3,-20(fp)
 8014784:	00bfff84 	movi	r2,-2
 8014788:	1884703a 	and	r2,r3,r2
 801478c:	1001703a 	wrctl	status,r2
  
  return context;
 8014790:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8014794:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8014798:	e0bffc17 	ldw	r2,-16(fp)
 801479c:	10800817 	ldw	r2,32(r2)
 80147a0:	10c00094 	ori	r3,r2,2
 80147a4:	e0bffc17 	ldw	r2,-16(fp)
 80147a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80147ac:	e0bffc17 	ldw	r2,-16(fp)
 80147b0:	10800017 	ldw	r2,0(r2)
 80147b4:	10800104 	addi	r2,r2,4
 80147b8:	1007883a 	mov	r3,r2
 80147bc:	e0bffc17 	ldw	r2,-16(fp)
 80147c0:	10800817 	ldw	r2,32(r2)
 80147c4:	18800035 	stwio	r2,0(r3)
 80147c8:	e0bffa17 	ldw	r2,-24(fp)
 80147cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80147d0:	e0bff817 	ldw	r2,-32(fp)
 80147d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80147d8:	e0bffe17 	ldw	r2,-8(fp)
 80147dc:	0080100e 	bge	zero,r2,8014820 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80147e0:	e0bfff17 	ldw	r2,-4(fp)
 80147e4:	1090000c 	andi	r2,r2,16384
 80147e8:	1000101e 	bne	r2,zero,801482c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80147ec:	0001883a 	nop
 80147f0:	e0bffc17 	ldw	r2,-16(fp)
 80147f4:	10c00d17 	ldw	r3,52(r2)
 80147f8:	e0bff517 	ldw	r2,-44(fp)
 80147fc:	1880051e 	bne	r3,r2,8014814 <altera_avalon_jtag_uart_write+0x1b8>
 8014800:	e0bffc17 	ldw	r2,-16(fp)
 8014804:	10c00917 	ldw	r3,36(r2)
 8014808:	e0bffc17 	ldw	r2,-16(fp)
 801480c:	10800117 	ldw	r2,4(r2)
 8014810:	18bff736 	bltu	r3,r2,80147f0 <__alt_data_end+0xffff4df0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8014814:	e0bffc17 	ldw	r2,-16(fp)
 8014818:	10800917 	ldw	r2,36(r2)
 801481c:	1000051e 	bne	r2,zero,8014834 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8014820:	e0bffe17 	ldw	r2,-8(fp)
 8014824:	00bfd016 	blt	zero,r2,8014768 <__alt_data_end+0xffff4d68>
 8014828:	00000306 	br	8014838 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 801482c:	0001883a 	nop
 8014830:	00000106 	br	8014838 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8014834:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8014838:	e0fffd17 	ldw	r3,-12(fp)
 801483c:	e0bff717 	ldw	r2,-36(fp)
 8014840:	18800426 	beq	r3,r2,8014854 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8014844:	e0fffd17 	ldw	r3,-12(fp)
 8014848:	e0bff717 	ldw	r2,-36(fp)
 801484c:	1885c83a 	sub	r2,r3,r2
 8014850:	00000606 	br	801486c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8014854:	e0bfff17 	ldw	r2,-4(fp)
 8014858:	1090000c 	andi	r2,r2,16384
 801485c:	10000226 	beq	r2,zero,8014868 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8014860:	00bffd44 	movi	r2,-11
 8014864:	00000106 	br	801486c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8014868:	00bffec4 	movi	r2,-5
}
 801486c:	e037883a 	mov	sp,fp
 8014870:	dfc00117 	ldw	ra,4(sp)
 8014874:	df000017 	ldw	fp,0(sp)
 8014878:	dec00204 	addi	sp,sp,8
 801487c:	f800283a 	ret

08014880 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8014880:	defff504 	addi	sp,sp,-44
 8014884:	df000a15 	stw	fp,40(sp)
 8014888:	df000a04 	addi	fp,sp,40
 801488c:	e13ffc15 	stw	r4,-16(fp)
 8014890:	e17ffd15 	stw	r5,-12(fp)
 8014894:	e1bffe15 	stw	r6,-8(fp)
 8014898:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801489c:	e03ff615 	stw	zero,-40(fp)
 80148a0:	d0a4e717 	ldw	r2,-27748(gp)
  
  if (alt_ticks_per_second ())
 80148a4:	10003c26 	beq	r2,zero,8014998 <alt_alarm_start+0x118>
  {
    if (alarm)
 80148a8:	e0bffc17 	ldw	r2,-16(fp)
 80148ac:	10003826 	beq	r2,zero,8014990 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80148b0:	e0bffc17 	ldw	r2,-16(fp)
 80148b4:	e0fffe17 	ldw	r3,-8(fp)
 80148b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80148bc:	e0bffc17 	ldw	r2,-16(fp)
 80148c0:	e0ffff17 	ldw	r3,-4(fp)
 80148c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80148c8:	0005303a 	rdctl	r2,status
 80148cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80148d0:	e0fff917 	ldw	r3,-28(fp)
 80148d4:	00bfff84 	movi	r2,-2
 80148d8:	1884703a 	and	r2,r3,r2
 80148dc:	1001703a 	wrctl	status,r2
  
  return context;
 80148e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80148e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80148e8:	d0a4e817 	ldw	r2,-27744(gp)
      
      current_nticks = alt_nticks();
 80148ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80148f0:	e0fffd17 	ldw	r3,-12(fp)
 80148f4:	e0bff617 	ldw	r2,-40(fp)
 80148f8:	1885883a 	add	r2,r3,r2
 80148fc:	10c00044 	addi	r3,r2,1
 8014900:	e0bffc17 	ldw	r2,-16(fp)
 8014904:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8014908:	e0bffc17 	ldw	r2,-16(fp)
 801490c:	10c00217 	ldw	r3,8(r2)
 8014910:	e0bff617 	ldw	r2,-40(fp)
 8014914:	1880042e 	bgeu	r3,r2,8014928 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8014918:	e0bffc17 	ldw	r2,-16(fp)
 801491c:	00c00044 	movi	r3,1
 8014920:	10c00405 	stb	r3,16(r2)
 8014924:	00000206 	br	8014930 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8014928:	e0bffc17 	ldw	r2,-16(fp)
 801492c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8014930:	e0bffc17 	ldw	r2,-16(fp)
 8014934:	d0e00b04 	addi	r3,gp,-32724
 8014938:	e0fffa15 	stw	r3,-24(fp)
 801493c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014940:	e0bffb17 	ldw	r2,-20(fp)
 8014944:	e0fffa17 	ldw	r3,-24(fp)
 8014948:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801494c:	e0bffa17 	ldw	r2,-24(fp)
 8014950:	10c00017 	ldw	r3,0(r2)
 8014954:	e0bffb17 	ldw	r2,-20(fp)
 8014958:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801495c:	e0bffa17 	ldw	r2,-24(fp)
 8014960:	10800017 	ldw	r2,0(r2)
 8014964:	e0fffb17 	ldw	r3,-20(fp)
 8014968:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801496c:	e0bffa17 	ldw	r2,-24(fp)
 8014970:	e0fffb17 	ldw	r3,-20(fp)
 8014974:	10c00015 	stw	r3,0(r2)
 8014978:	e0bff817 	ldw	r2,-32(fp)
 801497c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014980:	e0bff717 	ldw	r2,-36(fp)
 8014984:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8014988:	0005883a 	mov	r2,zero
 801498c:	00000306 	br	801499c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8014990:	00bffa84 	movi	r2,-22
 8014994:	00000106 	br	801499c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8014998:	00bfde84 	movi	r2,-134
  }
}
 801499c:	e037883a 	mov	sp,fp
 80149a0:	df000017 	ldw	fp,0(sp)
 80149a4:	dec00104 	addi	sp,sp,4
 80149a8:	f800283a 	ret

080149ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80149ac:	defffa04 	addi	sp,sp,-24
 80149b0:	dfc00515 	stw	ra,20(sp)
 80149b4:	df000415 	stw	fp,16(sp)
 80149b8:	df000404 	addi	fp,sp,16
 80149bc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80149c0:	00800244 	movi	r2,9
 80149c4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80149c8:	014003f4 	movhi	r5,15
 80149cc:	29509004 	addi	r5,r5,16960
 80149d0:	e13ffd17 	ldw	r4,-12(fp)
 80149d4:	80116700 	call	8011670 <__mulsi3>
 80149d8:	100b883a 	mov	r5,r2
 80149dc:	0100bef4 	movhi	r4,763
 80149e0:	213c2004 	addi	r4,r4,-3968
 80149e4:	8010a200 	call	8010a20 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80149e8:	100b883a 	mov	r5,r2
 80149ec:	01200034 	movhi	r4,32768
 80149f0:	213fffc4 	addi	r4,r4,-1
 80149f4:	8010a200 	call	8010a20 <__udivsi3>
 80149f8:	100b883a 	mov	r5,r2
 80149fc:	e13fff17 	ldw	r4,-4(fp)
 8014a00:	8010a200 	call	8010a20 <__udivsi3>
 8014a04:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8014a08:	e0bffe17 	ldw	r2,-8(fp)
 8014a0c:	10002a26 	beq	r2,zero,8014ab8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8014a10:	e03ffc15 	stw	zero,-16(fp)
 8014a14:	00001706 	br	8014a74 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8014a18:	00a00034 	movhi	r2,32768
 8014a1c:	10bfffc4 	addi	r2,r2,-1
 8014a20:	10bfffc4 	addi	r2,r2,-1
 8014a24:	103ffe1e 	bne	r2,zero,8014a20 <__alt_data_end+0xffff5020>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8014a28:	014003f4 	movhi	r5,15
 8014a2c:	29509004 	addi	r5,r5,16960
 8014a30:	e13ffd17 	ldw	r4,-12(fp)
 8014a34:	80116700 	call	8011670 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8014a38:	100b883a 	mov	r5,r2
 8014a3c:	0100bef4 	movhi	r4,763
 8014a40:	213c2004 	addi	r4,r4,-3968
 8014a44:	8010a200 	call	8010a20 <__udivsi3>
 8014a48:	100b883a 	mov	r5,r2
 8014a4c:	01200034 	movhi	r4,32768
 8014a50:	213fffc4 	addi	r4,r4,-1
 8014a54:	8010a200 	call	8010a20 <__udivsi3>
 8014a58:	1007883a 	mov	r3,r2
 8014a5c:	e0bfff17 	ldw	r2,-4(fp)
 8014a60:	10c5c83a 	sub	r2,r2,r3
 8014a64:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8014a68:	e0bffc17 	ldw	r2,-16(fp)
 8014a6c:	10800044 	addi	r2,r2,1
 8014a70:	e0bffc15 	stw	r2,-16(fp)
 8014a74:	e0fffc17 	ldw	r3,-16(fp)
 8014a78:	e0bffe17 	ldw	r2,-8(fp)
 8014a7c:	18bfe616 	blt	r3,r2,8014a18 <__alt_data_end+0xffff5018>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014a80:	014003f4 	movhi	r5,15
 8014a84:	29509004 	addi	r5,r5,16960
 8014a88:	e13ffd17 	ldw	r4,-12(fp)
 8014a8c:	80116700 	call	8011670 <__mulsi3>
 8014a90:	100b883a 	mov	r5,r2
 8014a94:	0100bef4 	movhi	r4,763
 8014a98:	213c2004 	addi	r4,r4,-3968
 8014a9c:	8010a200 	call	8010a20 <__udivsi3>
 8014aa0:	e17fff17 	ldw	r5,-4(fp)
 8014aa4:	1009883a 	mov	r4,r2
 8014aa8:	80116700 	call	8011670 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014aac:	10bfffc4 	addi	r2,r2,-1
 8014ab0:	103ffe1e 	bne	r2,zero,8014aac <__alt_data_end+0xffff50ac>
 8014ab4:	00000d06 	br	8014aec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014ab8:	014003f4 	movhi	r5,15
 8014abc:	29509004 	addi	r5,r5,16960
 8014ac0:	e13ffd17 	ldw	r4,-12(fp)
 8014ac4:	80116700 	call	8011670 <__mulsi3>
 8014ac8:	100b883a 	mov	r5,r2
 8014acc:	0100bef4 	movhi	r4,763
 8014ad0:	213c2004 	addi	r4,r4,-3968
 8014ad4:	8010a200 	call	8010a20 <__udivsi3>
 8014ad8:	e17fff17 	ldw	r5,-4(fp)
 8014adc:	1009883a 	mov	r4,r2
 8014ae0:	80116700 	call	8011670 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014ae4:	10bfffc4 	addi	r2,r2,-1
 8014ae8:	00bffe16 	blt	zero,r2,8014ae4 <__alt_data_end+0xffff50e4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8014aec:	0005883a 	mov	r2,zero
}
 8014af0:	e037883a 	mov	sp,fp
 8014af4:	dfc00117 	ldw	ra,4(sp)
 8014af8:	df000017 	ldw	fp,0(sp)
 8014afc:	dec00204 	addi	sp,sp,8
 8014b00:	f800283a 	ret

08014b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014b04:	defffe04 	addi	sp,sp,-8
 8014b08:	dfc00115 	stw	ra,4(sp)
 8014b0c:	df000015 	stw	fp,0(sp)
 8014b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014b14:	d0a00917 	ldw	r2,-32732(gp)
 8014b18:	10000326 	beq	r2,zero,8014b28 <alt_get_errno+0x24>
 8014b1c:	d0a00917 	ldw	r2,-32732(gp)
 8014b20:	103ee83a 	callr	r2
 8014b24:	00000106 	br	8014b2c <alt_get_errno+0x28>
 8014b28:	d0a4e204 	addi	r2,gp,-27768
}
 8014b2c:	e037883a 	mov	sp,fp
 8014b30:	dfc00117 	ldw	ra,4(sp)
 8014b34:	df000017 	ldw	fp,0(sp)
 8014b38:	dec00204 	addi	sp,sp,8
 8014b3c:	f800283a 	ret

08014b40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8014b40:	defffb04 	addi	sp,sp,-20
 8014b44:	dfc00415 	stw	ra,16(sp)
 8014b48:	df000315 	stw	fp,12(sp)
 8014b4c:	df000304 	addi	fp,sp,12
 8014b50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8014b54:	e0bfff17 	ldw	r2,-4(fp)
 8014b58:	10000816 	blt	r2,zero,8014b7c <close+0x3c>
 8014b5c:	01400304 	movi	r5,12
 8014b60:	e13fff17 	ldw	r4,-4(fp)
 8014b64:	80116700 	call	8011670 <__mulsi3>
 8014b68:	1007883a 	mov	r3,r2
 8014b6c:	00820074 	movhi	r2,2049
 8014b70:	109d6504 	addi	r2,r2,30100
 8014b74:	1885883a 	add	r2,r3,r2
 8014b78:	00000106 	br	8014b80 <close+0x40>
 8014b7c:	0005883a 	mov	r2,zero
 8014b80:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8014b84:	e0bffd17 	ldw	r2,-12(fp)
 8014b88:	10001926 	beq	r2,zero,8014bf0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8014b8c:	e0bffd17 	ldw	r2,-12(fp)
 8014b90:	10800017 	ldw	r2,0(r2)
 8014b94:	10800417 	ldw	r2,16(r2)
 8014b98:	10000626 	beq	r2,zero,8014bb4 <close+0x74>
 8014b9c:	e0bffd17 	ldw	r2,-12(fp)
 8014ba0:	10800017 	ldw	r2,0(r2)
 8014ba4:	10800417 	ldw	r2,16(r2)
 8014ba8:	e13ffd17 	ldw	r4,-12(fp)
 8014bac:	103ee83a 	callr	r2
 8014bb0:	00000106 	br	8014bb8 <close+0x78>
 8014bb4:	0005883a 	mov	r2,zero
 8014bb8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8014bbc:	e13fff17 	ldw	r4,-4(fp)
 8014bc0:	80157a00 	call	80157a0 <alt_release_fd>
    if (rval < 0)
 8014bc4:	e0bffe17 	ldw	r2,-8(fp)
 8014bc8:	1000070e 	bge	r2,zero,8014be8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8014bcc:	8014b040 	call	8014b04 <alt_get_errno>
 8014bd0:	1007883a 	mov	r3,r2
 8014bd4:	e0bffe17 	ldw	r2,-8(fp)
 8014bd8:	0085c83a 	sub	r2,zero,r2
 8014bdc:	18800015 	stw	r2,0(r3)
      return -1;
 8014be0:	00bfffc4 	movi	r2,-1
 8014be4:	00000706 	br	8014c04 <close+0xc4>
    }
    return 0;
 8014be8:	0005883a 	mov	r2,zero
 8014bec:	00000506 	br	8014c04 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8014bf0:	8014b040 	call	8014b04 <alt_get_errno>
 8014bf4:	1007883a 	mov	r3,r2
 8014bf8:	00801444 	movi	r2,81
 8014bfc:	18800015 	stw	r2,0(r3)
    return -1;
 8014c00:	00bfffc4 	movi	r2,-1
  }
}
 8014c04:	e037883a 	mov	sp,fp
 8014c08:	dfc00117 	ldw	ra,4(sp)
 8014c0c:	df000017 	ldw	fp,0(sp)
 8014c10:	dec00204 	addi	sp,sp,8
 8014c14:	f800283a 	ret

08014c18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8014c18:	deffff04 	addi	sp,sp,-4
 8014c1c:	df000015 	stw	fp,0(sp)
 8014c20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014c24:	0001883a 	nop
 8014c28:	e037883a 	mov	sp,fp
 8014c2c:	df000017 	ldw	fp,0(sp)
 8014c30:	dec00104 	addi	sp,sp,4
 8014c34:	f800283a 	ret

08014c38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8014c38:	defffc04 	addi	sp,sp,-16
 8014c3c:	df000315 	stw	fp,12(sp)
 8014c40:	df000304 	addi	fp,sp,12
 8014c44:	e13ffd15 	stw	r4,-12(fp)
 8014c48:	e17ffe15 	stw	r5,-8(fp)
 8014c4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8014c50:	e0bfff17 	ldw	r2,-4(fp)
}
 8014c54:	e037883a 	mov	sp,fp
 8014c58:	df000017 	ldw	fp,0(sp)
 8014c5c:	dec00104 	addi	sp,sp,4
 8014c60:	f800283a 	ret

08014c64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014c64:	defffe04 	addi	sp,sp,-8
 8014c68:	dfc00115 	stw	ra,4(sp)
 8014c6c:	df000015 	stw	fp,0(sp)
 8014c70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014c74:	d0a00917 	ldw	r2,-32732(gp)
 8014c78:	10000326 	beq	r2,zero,8014c88 <alt_get_errno+0x24>
 8014c7c:	d0a00917 	ldw	r2,-32732(gp)
 8014c80:	103ee83a 	callr	r2
 8014c84:	00000106 	br	8014c8c <alt_get_errno+0x28>
 8014c88:	d0a4e204 	addi	r2,gp,-27768
}
 8014c8c:	e037883a 	mov	sp,fp
 8014c90:	dfc00117 	ldw	ra,4(sp)
 8014c94:	df000017 	ldw	fp,0(sp)
 8014c98:	dec00204 	addi	sp,sp,8
 8014c9c:	f800283a 	ret

08014ca0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014ca0:	defffa04 	addi	sp,sp,-24
 8014ca4:	dfc00515 	stw	ra,20(sp)
 8014ca8:	df000415 	stw	fp,16(sp)
 8014cac:	df000404 	addi	fp,sp,16
 8014cb0:	e13ffe15 	stw	r4,-8(fp)
 8014cb4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8014cb8:	e0bffe17 	ldw	r2,-8(fp)
 8014cbc:	10000326 	beq	r2,zero,8014ccc <alt_dev_llist_insert+0x2c>
 8014cc0:	e0bffe17 	ldw	r2,-8(fp)
 8014cc4:	10800217 	ldw	r2,8(r2)
 8014cc8:	1000061e 	bne	r2,zero,8014ce4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014ccc:	8014c640 	call	8014c64 <alt_get_errno>
 8014cd0:	1007883a 	mov	r3,r2
 8014cd4:	00800584 	movi	r2,22
 8014cd8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8014cdc:	00bffa84 	movi	r2,-22
 8014ce0:	00001306 	br	8014d30 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014ce4:	e0bffe17 	ldw	r2,-8(fp)
 8014ce8:	e0ffff17 	ldw	r3,-4(fp)
 8014cec:	e0fffc15 	stw	r3,-16(fp)
 8014cf0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014cf4:	e0bffd17 	ldw	r2,-12(fp)
 8014cf8:	e0fffc17 	ldw	r3,-16(fp)
 8014cfc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014d00:	e0bffc17 	ldw	r2,-16(fp)
 8014d04:	10c00017 	ldw	r3,0(r2)
 8014d08:	e0bffd17 	ldw	r2,-12(fp)
 8014d0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014d10:	e0bffc17 	ldw	r2,-16(fp)
 8014d14:	10800017 	ldw	r2,0(r2)
 8014d18:	e0fffd17 	ldw	r3,-12(fp)
 8014d1c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014d20:	e0bffc17 	ldw	r2,-16(fp)
 8014d24:	e0fffd17 	ldw	r3,-12(fp)
 8014d28:	10c00015 	stw	r3,0(r2)

  return 0;  
 8014d2c:	0005883a 	mov	r2,zero
}
 8014d30:	e037883a 	mov	sp,fp
 8014d34:	dfc00117 	ldw	ra,4(sp)
 8014d38:	df000017 	ldw	fp,0(sp)
 8014d3c:	dec00204 	addi	sp,sp,8
 8014d40:	f800283a 	ret

08014d44 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014d44:	defffd04 	addi	sp,sp,-12
 8014d48:	dfc00215 	stw	ra,8(sp)
 8014d4c:	df000115 	stw	fp,4(sp)
 8014d50:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014d54:	00820074 	movhi	r2,2049
 8014d58:	10982904 	addi	r2,r2,24740
 8014d5c:	e0bfff15 	stw	r2,-4(fp)
 8014d60:	00000606 	br	8014d7c <_do_ctors+0x38>
        (*ctor) (); 
 8014d64:	e0bfff17 	ldw	r2,-4(fp)
 8014d68:	10800017 	ldw	r2,0(r2)
 8014d6c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014d70:	e0bfff17 	ldw	r2,-4(fp)
 8014d74:	10bfff04 	addi	r2,r2,-4
 8014d78:	e0bfff15 	stw	r2,-4(fp)
 8014d7c:	e0ffff17 	ldw	r3,-4(fp)
 8014d80:	00820074 	movhi	r2,2049
 8014d84:	10982a04 	addi	r2,r2,24744
 8014d88:	18bff62e 	bgeu	r3,r2,8014d64 <__alt_data_end+0xffff5364>
        (*ctor) (); 
}
 8014d8c:	0001883a 	nop
 8014d90:	e037883a 	mov	sp,fp
 8014d94:	dfc00117 	ldw	ra,4(sp)
 8014d98:	df000017 	ldw	fp,0(sp)
 8014d9c:	dec00204 	addi	sp,sp,8
 8014da0:	f800283a 	ret

08014da4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8014da4:	defffd04 	addi	sp,sp,-12
 8014da8:	dfc00215 	stw	ra,8(sp)
 8014dac:	df000115 	stw	fp,4(sp)
 8014db0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014db4:	00820074 	movhi	r2,2049
 8014db8:	10982904 	addi	r2,r2,24740
 8014dbc:	e0bfff15 	stw	r2,-4(fp)
 8014dc0:	00000606 	br	8014ddc <_do_dtors+0x38>
        (*dtor) (); 
 8014dc4:	e0bfff17 	ldw	r2,-4(fp)
 8014dc8:	10800017 	ldw	r2,0(r2)
 8014dcc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014dd0:	e0bfff17 	ldw	r2,-4(fp)
 8014dd4:	10bfff04 	addi	r2,r2,-4
 8014dd8:	e0bfff15 	stw	r2,-4(fp)
 8014ddc:	e0ffff17 	ldw	r3,-4(fp)
 8014de0:	00820074 	movhi	r2,2049
 8014de4:	10982a04 	addi	r2,r2,24744
 8014de8:	18bff62e 	bgeu	r3,r2,8014dc4 <__alt_data_end+0xffff53c4>
        (*dtor) (); 
}
 8014dec:	0001883a 	nop
 8014df0:	e037883a 	mov	sp,fp
 8014df4:	dfc00117 	ldw	ra,4(sp)
 8014df8:	df000017 	ldw	fp,0(sp)
 8014dfc:	dec00204 	addi	sp,sp,8
 8014e00:	f800283a 	ret

08014e04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8014e04:	defffa04 	addi	sp,sp,-24
 8014e08:	dfc00515 	stw	ra,20(sp)
 8014e0c:	df000415 	stw	fp,16(sp)
 8014e10:	df000404 	addi	fp,sp,16
 8014e14:	e13ffe15 	stw	r4,-8(fp)
 8014e18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8014e1c:	e0bfff17 	ldw	r2,-4(fp)
 8014e20:	10800017 	ldw	r2,0(r2)
 8014e24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8014e28:	e13ffe17 	ldw	r4,-8(fp)
 8014e2c:	80117b40 	call	80117b4 <strlen>
 8014e30:	10800044 	addi	r2,r2,1
 8014e34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014e38:	00000d06 	br	8014e70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8014e3c:	e0bffc17 	ldw	r2,-16(fp)
 8014e40:	10800217 	ldw	r2,8(r2)
 8014e44:	e0fffd17 	ldw	r3,-12(fp)
 8014e48:	180d883a 	mov	r6,r3
 8014e4c:	e17ffe17 	ldw	r5,-8(fp)
 8014e50:	1009883a 	mov	r4,r2
 8014e54:	8015c880 	call	8015c88 <memcmp>
 8014e58:	1000021e 	bne	r2,zero,8014e64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8014e5c:	e0bffc17 	ldw	r2,-16(fp)
 8014e60:	00000706 	br	8014e80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8014e64:	e0bffc17 	ldw	r2,-16(fp)
 8014e68:	10800017 	ldw	r2,0(r2)
 8014e6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014e70:	e0fffc17 	ldw	r3,-16(fp)
 8014e74:	e0bfff17 	ldw	r2,-4(fp)
 8014e78:	18bff01e 	bne	r3,r2,8014e3c <__alt_data_end+0xffff543c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014e7c:	0005883a 	mov	r2,zero
}
 8014e80:	e037883a 	mov	sp,fp
 8014e84:	dfc00117 	ldw	ra,4(sp)
 8014e88:	df000017 	ldw	fp,0(sp)
 8014e8c:	dec00204 	addi	sp,sp,8
 8014e90:	f800283a 	ret

08014e94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014e94:	deffff04 	addi	sp,sp,-4
 8014e98:	df000015 	stw	fp,0(sp)
 8014e9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8014ea0:	0001883a 	nop
 8014ea4:	e037883a 	mov	sp,fp
 8014ea8:	df000017 	ldw	fp,0(sp)
 8014eac:	dec00104 	addi	sp,sp,4
 8014eb0:	f800283a 	ret

08014eb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014eb4:	defff904 	addi	sp,sp,-28
 8014eb8:	dfc00615 	stw	ra,24(sp)
 8014ebc:	df000515 	stw	fp,20(sp)
 8014ec0:	df000504 	addi	fp,sp,20
 8014ec4:	e13ffc15 	stw	r4,-16(fp)
 8014ec8:	e17ffd15 	stw	r5,-12(fp)
 8014ecc:	e1bffe15 	stw	r6,-8(fp)
 8014ed0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014ed4:	e0800217 	ldw	r2,8(fp)
 8014ed8:	d8800015 	stw	r2,0(sp)
 8014edc:	e1ffff17 	ldw	r7,-4(fp)
 8014ee0:	e1bffe17 	ldw	r6,-8(fp)
 8014ee4:	e17ffd17 	ldw	r5,-12(fp)
 8014ee8:	e13ffc17 	ldw	r4,-16(fp)
 8014eec:	80150640 	call	8015064 <alt_iic_isr_register>
}  
 8014ef0:	e037883a 	mov	sp,fp
 8014ef4:	dfc00117 	ldw	ra,4(sp)
 8014ef8:	df000017 	ldw	fp,0(sp)
 8014efc:	dec00204 	addi	sp,sp,8
 8014f00:	f800283a 	ret

08014f04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8014f04:	defff904 	addi	sp,sp,-28
 8014f08:	df000615 	stw	fp,24(sp)
 8014f0c:	df000604 	addi	fp,sp,24
 8014f10:	e13ffe15 	stw	r4,-8(fp)
 8014f14:	e17fff15 	stw	r5,-4(fp)
 8014f18:	e0bfff17 	ldw	r2,-4(fp)
 8014f1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014f20:	0005303a 	rdctl	r2,status
 8014f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014f28:	e0fffb17 	ldw	r3,-20(fp)
 8014f2c:	00bfff84 	movi	r2,-2
 8014f30:	1884703a 	and	r2,r3,r2
 8014f34:	1001703a 	wrctl	status,r2
  
  return context;
 8014f38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014f3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8014f40:	00c00044 	movi	r3,1
 8014f44:	e0bffa17 	ldw	r2,-24(fp)
 8014f48:	1884983a 	sll	r2,r3,r2
 8014f4c:	1007883a 	mov	r3,r2
 8014f50:	d0a4e617 	ldw	r2,-27752(gp)
 8014f54:	1884b03a 	or	r2,r3,r2
 8014f58:	d0a4e615 	stw	r2,-27752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014f5c:	d0a4e617 	ldw	r2,-27752(gp)
 8014f60:	100170fa 	wrctl	ienable,r2
 8014f64:	e0bffc17 	ldw	r2,-16(fp)
 8014f68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014f6c:	e0bffd17 	ldw	r2,-12(fp)
 8014f70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014f74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014f78:	0001883a 	nop
}
 8014f7c:	e037883a 	mov	sp,fp
 8014f80:	df000017 	ldw	fp,0(sp)
 8014f84:	dec00104 	addi	sp,sp,4
 8014f88:	f800283a 	ret

08014f8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8014f8c:	defff904 	addi	sp,sp,-28
 8014f90:	df000615 	stw	fp,24(sp)
 8014f94:	df000604 	addi	fp,sp,24
 8014f98:	e13ffe15 	stw	r4,-8(fp)
 8014f9c:	e17fff15 	stw	r5,-4(fp)
 8014fa0:	e0bfff17 	ldw	r2,-4(fp)
 8014fa4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014fa8:	0005303a 	rdctl	r2,status
 8014fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014fb0:	e0fffb17 	ldw	r3,-20(fp)
 8014fb4:	00bfff84 	movi	r2,-2
 8014fb8:	1884703a 	and	r2,r3,r2
 8014fbc:	1001703a 	wrctl	status,r2
  
  return context;
 8014fc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014fc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014fc8:	00c00044 	movi	r3,1
 8014fcc:	e0bffa17 	ldw	r2,-24(fp)
 8014fd0:	1884983a 	sll	r2,r3,r2
 8014fd4:	0084303a 	nor	r2,zero,r2
 8014fd8:	1007883a 	mov	r3,r2
 8014fdc:	d0a4e617 	ldw	r2,-27752(gp)
 8014fe0:	1884703a 	and	r2,r3,r2
 8014fe4:	d0a4e615 	stw	r2,-27752(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014fe8:	d0a4e617 	ldw	r2,-27752(gp)
 8014fec:	100170fa 	wrctl	ienable,r2
 8014ff0:	e0bffc17 	ldw	r2,-16(fp)
 8014ff4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ff8:	e0bffd17 	ldw	r2,-12(fp)
 8014ffc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8015000:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8015004:	0001883a 	nop
}
 8015008:	e037883a 	mov	sp,fp
 801500c:	df000017 	ldw	fp,0(sp)
 8015010:	dec00104 	addi	sp,sp,4
 8015014:	f800283a 	ret

08015018 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8015018:	defffc04 	addi	sp,sp,-16
 801501c:	df000315 	stw	fp,12(sp)
 8015020:	df000304 	addi	fp,sp,12
 8015024:	e13ffe15 	stw	r4,-8(fp)
 8015028:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801502c:	000530fa 	rdctl	r2,ienable
 8015030:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8015034:	00c00044 	movi	r3,1
 8015038:	e0bfff17 	ldw	r2,-4(fp)
 801503c:	1884983a 	sll	r2,r3,r2
 8015040:	1007883a 	mov	r3,r2
 8015044:	e0bffd17 	ldw	r2,-12(fp)
 8015048:	1884703a 	and	r2,r3,r2
 801504c:	1004c03a 	cmpne	r2,r2,zero
 8015050:	10803fcc 	andi	r2,r2,255
}
 8015054:	e037883a 	mov	sp,fp
 8015058:	df000017 	ldw	fp,0(sp)
 801505c:	dec00104 	addi	sp,sp,4
 8015060:	f800283a 	ret

08015064 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8015064:	defff504 	addi	sp,sp,-44
 8015068:	dfc00a15 	stw	ra,40(sp)
 801506c:	df000915 	stw	fp,36(sp)
 8015070:	df000904 	addi	fp,sp,36
 8015074:	e13ffc15 	stw	r4,-16(fp)
 8015078:	e17ffd15 	stw	r5,-12(fp)
 801507c:	e1bffe15 	stw	r6,-8(fp)
 8015080:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8015084:	00bffa84 	movi	r2,-22
 8015088:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801508c:	e0bffd17 	ldw	r2,-12(fp)
 8015090:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8015094:	e0bff817 	ldw	r2,-32(fp)
 8015098:	10800808 	cmpgei	r2,r2,32
 801509c:	1000271e 	bne	r2,zero,801513c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80150a0:	0005303a 	rdctl	r2,status
 80150a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80150a8:	e0fffb17 	ldw	r3,-20(fp)
 80150ac:	00bfff84 	movi	r2,-2
 80150b0:	1884703a 	and	r2,r3,r2
 80150b4:	1001703a 	wrctl	status,r2
  
  return context;
 80150b8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80150bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80150c0:	008200b4 	movhi	r2,2050
 80150c4:	10a2af04 	addi	r2,r2,-30020
 80150c8:	e0fff817 	ldw	r3,-32(fp)
 80150cc:	180690fa 	slli	r3,r3,3
 80150d0:	10c5883a 	add	r2,r2,r3
 80150d4:	e0fffe17 	ldw	r3,-8(fp)
 80150d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80150dc:	008200b4 	movhi	r2,2050
 80150e0:	10a2af04 	addi	r2,r2,-30020
 80150e4:	e0fff817 	ldw	r3,-32(fp)
 80150e8:	180690fa 	slli	r3,r3,3
 80150ec:	10c5883a 	add	r2,r2,r3
 80150f0:	10800104 	addi	r2,r2,4
 80150f4:	e0ffff17 	ldw	r3,-4(fp)
 80150f8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80150fc:	e0bffe17 	ldw	r2,-8(fp)
 8015100:	10000526 	beq	r2,zero,8015118 <alt_iic_isr_register+0xb4>
 8015104:	e0bff817 	ldw	r2,-32(fp)
 8015108:	100b883a 	mov	r5,r2
 801510c:	e13ffc17 	ldw	r4,-16(fp)
 8015110:	8014f040 	call	8014f04 <alt_ic_irq_enable>
 8015114:	00000406 	br	8015128 <alt_iic_isr_register+0xc4>
 8015118:	e0bff817 	ldw	r2,-32(fp)
 801511c:	100b883a 	mov	r5,r2
 8015120:	e13ffc17 	ldw	r4,-16(fp)
 8015124:	8014f8c0 	call	8014f8c <alt_ic_irq_disable>
 8015128:	e0bff715 	stw	r2,-36(fp)
 801512c:	e0bffa17 	ldw	r2,-24(fp)
 8015130:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015134:	e0bff917 	ldw	r2,-28(fp)
 8015138:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801513c:	e0bff717 	ldw	r2,-36(fp)
}
 8015140:	e037883a 	mov	sp,fp
 8015144:	dfc00117 	ldw	ra,4(sp)
 8015148:	df000017 	ldw	fp,0(sp)
 801514c:	dec00204 	addi	sp,sp,8
 8015150:	f800283a 	ret

08015154 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8015154:	defff804 	addi	sp,sp,-32
 8015158:	dfc00715 	stw	ra,28(sp)
 801515c:	df000615 	stw	fp,24(sp)
 8015160:	dc000515 	stw	r16,20(sp)
 8015164:	df000604 	addi	fp,sp,24
 8015168:	e13ffb15 	stw	r4,-20(fp)
 801516c:	e17ffc15 	stw	r5,-16(fp)
 8015170:	e1bffd15 	stw	r6,-12(fp)
 8015174:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8015178:	e1bffe17 	ldw	r6,-8(fp)
 801517c:	e17ffd17 	ldw	r5,-12(fp)
 8015180:	e13ffc17 	ldw	r4,-16(fp)
 8015184:	80153dc0 	call	80153dc <open>
 8015188:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801518c:	e0bffa17 	ldw	r2,-24(fp)
 8015190:	10002216 	blt	r2,zero,801521c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8015194:	04020074 	movhi	r16,2049
 8015198:	841d6504 	addi	r16,r16,30100
 801519c:	e0bffa17 	ldw	r2,-24(fp)
 80151a0:	01400304 	movi	r5,12
 80151a4:	1009883a 	mov	r4,r2
 80151a8:	80116700 	call	8011670 <__mulsi3>
 80151ac:	8085883a 	add	r2,r16,r2
 80151b0:	10c00017 	ldw	r3,0(r2)
 80151b4:	e0bffb17 	ldw	r2,-20(fp)
 80151b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80151bc:	04020074 	movhi	r16,2049
 80151c0:	841d6504 	addi	r16,r16,30100
 80151c4:	e0bffa17 	ldw	r2,-24(fp)
 80151c8:	01400304 	movi	r5,12
 80151cc:	1009883a 	mov	r4,r2
 80151d0:	80116700 	call	8011670 <__mulsi3>
 80151d4:	8085883a 	add	r2,r16,r2
 80151d8:	10800104 	addi	r2,r2,4
 80151dc:	10c00017 	ldw	r3,0(r2)
 80151e0:	e0bffb17 	ldw	r2,-20(fp)
 80151e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80151e8:	04020074 	movhi	r16,2049
 80151ec:	841d6504 	addi	r16,r16,30100
 80151f0:	e0bffa17 	ldw	r2,-24(fp)
 80151f4:	01400304 	movi	r5,12
 80151f8:	1009883a 	mov	r4,r2
 80151fc:	80116700 	call	8011670 <__mulsi3>
 8015200:	8085883a 	add	r2,r16,r2
 8015204:	10800204 	addi	r2,r2,8
 8015208:	10c00017 	ldw	r3,0(r2)
 801520c:	e0bffb17 	ldw	r2,-20(fp)
 8015210:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8015214:	e13ffa17 	ldw	r4,-24(fp)
 8015218:	80157a00 	call	80157a0 <alt_release_fd>
  }
} 
 801521c:	0001883a 	nop
 8015220:	e6ffff04 	addi	sp,fp,-4
 8015224:	dfc00217 	ldw	ra,8(sp)
 8015228:	df000117 	ldw	fp,4(sp)
 801522c:	dc000017 	ldw	r16,0(sp)
 8015230:	dec00304 	addi	sp,sp,12
 8015234:	f800283a 	ret

08015238 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8015238:	defffb04 	addi	sp,sp,-20
 801523c:	dfc00415 	stw	ra,16(sp)
 8015240:	df000315 	stw	fp,12(sp)
 8015244:	df000304 	addi	fp,sp,12
 8015248:	e13ffd15 	stw	r4,-12(fp)
 801524c:	e17ffe15 	stw	r5,-8(fp)
 8015250:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8015254:	01c07fc4 	movi	r7,511
 8015258:	01800044 	movi	r6,1
 801525c:	e17ffd17 	ldw	r5,-12(fp)
 8015260:	01020074 	movhi	r4,2049
 8015264:	211d6804 	addi	r4,r4,30112
 8015268:	80151540 	call	8015154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801526c:	01c07fc4 	movi	r7,511
 8015270:	000d883a 	mov	r6,zero
 8015274:	e17ffe17 	ldw	r5,-8(fp)
 8015278:	01020074 	movhi	r4,2049
 801527c:	211d6504 	addi	r4,r4,30100
 8015280:	80151540 	call	8015154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8015284:	01c07fc4 	movi	r7,511
 8015288:	01800044 	movi	r6,1
 801528c:	e17fff17 	ldw	r5,-4(fp)
 8015290:	01020074 	movhi	r4,2049
 8015294:	211d6b04 	addi	r4,r4,30124
 8015298:	80151540 	call	8015154 <alt_open_fd>
}  
 801529c:	0001883a 	nop
 80152a0:	e037883a 	mov	sp,fp
 80152a4:	dfc00117 	ldw	ra,4(sp)
 80152a8:	df000017 	ldw	fp,0(sp)
 80152ac:	dec00204 	addi	sp,sp,8
 80152b0:	f800283a 	ret

080152b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80152b4:	defffe04 	addi	sp,sp,-8
 80152b8:	dfc00115 	stw	ra,4(sp)
 80152bc:	df000015 	stw	fp,0(sp)
 80152c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80152c4:	d0a00917 	ldw	r2,-32732(gp)
 80152c8:	10000326 	beq	r2,zero,80152d8 <alt_get_errno+0x24>
 80152cc:	d0a00917 	ldw	r2,-32732(gp)
 80152d0:	103ee83a 	callr	r2
 80152d4:	00000106 	br	80152dc <alt_get_errno+0x28>
 80152d8:	d0a4e204 	addi	r2,gp,-27768
}
 80152dc:	e037883a 	mov	sp,fp
 80152e0:	dfc00117 	ldw	ra,4(sp)
 80152e4:	df000017 	ldw	fp,0(sp)
 80152e8:	dec00204 	addi	sp,sp,8
 80152ec:	f800283a 	ret

080152f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80152f0:	defffb04 	addi	sp,sp,-20
 80152f4:	dfc00415 	stw	ra,16(sp)
 80152f8:	df000315 	stw	fp,12(sp)
 80152fc:	dc000215 	stw	r16,8(sp)
 8015300:	df000304 	addi	fp,sp,12
 8015304:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8015308:	e0bffe17 	ldw	r2,-8(fp)
 801530c:	10800217 	ldw	r2,8(r2)
 8015310:	10d00034 	orhi	r3,r2,16384
 8015314:	e0bffe17 	ldw	r2,-8(fp)
 8015318:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801531c:	e03ffd15 	stw	zero,-12(fp)
 8015320:	00002306 	br	80153b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015324:	04020074 	movhi	r16,2049
 8015328:	841d6504 	addi	r16,r16,30100
 801532c:	e0bffd17 	ldw	r2,-12(fp)
 8015330:	01400304 	movi	r5,12
 8015334:	1009883a 	mov	r4,r2
 8015338:	80116700 	call	8011670 <__mulsi3>
 801533c:	8085883a 	add	r2,r16,r2
 8015340:	10c00017 	ldw	r3,0(r2)
 8015344:	e0bffe17 	ldw	r2,-8(fp)
 8015348:	10800017 	ldw	r2,0(r2)
 801534c:	1880151e 	bne	r3,r2,80153a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015350:	04020074 	movhi	r16,2049
 8015354:	841d6504 	addi	r16,r16,30100
 8015358:	e0bffd17 	ldw	r2,-12(fp)
 801535c:	01400304 	movi	r5,12
 8015360:	1009883a 	mov	r4,r2
 8015364:	80116700 	call	8011670 <__mulsi3>
 8015368:	8085883a 	add	r2,r16,r2
 801536c:	10800204 	addi	r2,r2,8
 8015370:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015374:	10000b0e 	bge	r2,zero,80153a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8015378:	01400304 	movi	r5,12
 801537c:	e13ffd17 	ldw	r4,-12(fp)
 8015380:	80116700 	call	8011670 <__mulsi3>
 8015384:	1007883a 	mov	r3,r2
 8015388:	00820074 	movhi	r2,2049
 801538c:	109d6504 	addi	r2,r2,30100
 8015390:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015394:	e0bffe17 	ldw	r2,-8(fp)
 8015398:	18800226 	beq	r3,r2,80153a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801539c:	00bffcc4 	movi	r2,-13
 80153a0:	00000806 	br	80153c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80153a4:	e0bffd17 	ldw	r2,-12(fp)
 80153a8:	10800044 	addi	r2,r2,1
 80153ac:	e0bffd15 	stw	r2,-12(fp)
 80153b0:	d0a00817 	ldw	r2,-32736(gp)
 80153b4:	1007883a 	mov	r3,r2
 80153b8:	e0bffd17 	ldw	r2,-12(fp)
 80153bc:	18bfd92e 	bgeu	r3,r2,8015324 <__alt_data_end+0xffff5924>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80153c0:	0005883a 	mov	r2,zero
}
 80153c4:	e6ffff04 	addi	sp,fp,-4
 80153c8:	dfc00217 	ldw	ra,8(sp)
 80153cc:	df000117 	ldw	fp,4(sp)
 80153d0:	dc000017 	ldw	r16,0(sp)
 80153d4:	dec00304 	addi	sp,sp,12
 80153d8:	f800283a 	ret

080153dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80153dc:	defff604 	addi	sp,sp,-40
 80153e0:	dfc00915 	stw	ra,36(sp)
 80153e4:	df000815 	stw	fp,32(sp)
 80153e8:	df000804 	addi	fp,sp,32
 80153ec:	e13ffd15 	stw	r4,-12(fp)
 80153f0:	e17ffe15 	stw	r5,-8(fp)
 80153f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80153f8:	00bfffc4 	movi	r2,-1
 80153fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8015400:	00bffb44 	movi	r2,-19
 8015404:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8015408:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801540c:	d1600604 	addi	r5,gp,-32744
 8015410:	e13ffd17 	ldw	r4,-12(fp)
 8015414:	8014e040 	call	8014e04 <alt_find_dev>
 8015418:	e0bff815 	stw	r2,-32(fp)
 801541c:	e0bff817 	ldw	r2,-32(fp)
 8015420:	1000051e 	bne	r2,zero,8015438 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8015424:	e13ffd17 	ldw	r4,-12(fp)
 8015428:	80159ec0 	call	80159ec <alt_find_file>
 801542c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8015430:	00800044 	movi	r2,1
 8015434:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8015438:	e0bff817 	ldw	r2,-32(fp)
 801543c:	10002b26 	beq	r2,zero,80154ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8015440:	e13ff817 	ldw	r4,-32(fp)
 8015444:	8015af40 	call	8015af4 <alt_get_fd>
 8015448:	e0bff915 	stw	r2,-28(fp)
 801544c:	e0bff917 	ldw	r2,-28(fp)
 8015450:	1000030e 	bge	r2,zero,8015460 <open+0x84>
    {
      status = index;
 8015454:	e0bff917 	ldw	r2,-28(fp)
 8015458:	e0bffa15 	stw	r2,-24(fp)
 801545c:	00002506 	br	80154f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8015460:	01400304 	movi	r5,12
 8015464:	e13ff917 	ldw	r4,-28(fp)
 8015468:	80116700 	call	8011670 <__mulsi3>
 801546c:	1007883a 	mov	r3,r2
 8015470:	00820074 	movhi	r2,2049
 8015474:	109d6504 	addi	r2,r2,30100
 8015478:	1885883a 	add	r2,r3,r2
 801547c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8015480:	e0fffe17 	ldw	r3,-8(fp)
 8015484:	00900034 	movhi	r2,16384
 8015488:	10bfffc4 	addi	r2,r2,-1
 801548c:	1886703a 	and	r3,r3,r2
 8015490:	e0bffc17 	ldw	r2,-16(fp)
 8015494:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8015498:	e0bffb17 	ldw	r2,-20(fp)
 801549c:	1000051e 	bne	r2,zero,80154b4 <open+0xd8>
 80154a0:	e13ffc17 	ldw	r4,-16(fp)
 80154a4:	80152f00 	call	80152f0 <alt_file_locked>
 80154a8:	e0bffa15 	stw	r2,-24(fp)
 80154ac:	e0bffa17 	ldw	r2,-24(fp)
 80154b0:	10001016 	blt	r2,zero,80154f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80154b4:	e0bff817 	ldw	r2,-32(fp)
 80154b8:	10800317 	ldw	r2,12(r2)
 80154bc:	10000826 	beq	r2,zero,80154e0 <open+0x104>
 80154c0:	e0bff817 	ldw	r2,-32(fp)
 80154c4:	10800317 	ldw	r2,12(r2)
 80154c8:	e1ffff17 	ldw	r7,-4(fp)
 80154cc:	e1bffe17 	ldw	r6,-8(fp)
 80154d0:	e17ffd17 	ldw	r5,-12(fp)
 80154d4:	e13ffc17 	ldw	r4,-16(fp)
 80154d8:	103ee83a 	callr	r2
 80154dc:	00000106 	br	80154e4 <open+0x108>
 80154e0:	0005883a 	mov	r2,zero
 80154e4:	e0bffa15 	stw	r2,-24(fp)
 80154e8:	00000206 	br	80154f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80154ec:	00bffb44 	movi	r2,-19
 80154f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80154f4:	e0bffa17 	ldw	r2,-24(fp)
 80154f8:	1000090e 	bge	r2,zero,8015520 <open+0x144>
  {
    alt_release_fd (index);  
 80154fc:	e13ff917 	ldw	r4,-28(fp)
 8015500:	80157a00 	call	80157a0 <alt_release_fd>
    ALT_ERRNO = -status;
 8015504:	80152b40 	call	80152b4 <alt_get_errno>
 8015508:	1007883a 	mov	r3,r2
 801550c:	e0bffa17 	ldw	r2,-24(fp)
 8015510:	0085c83a 	sub	r2,zero,r2
 8015514:	18800015 	stw	r2,0(r3)
    return -1;
 8015518:	00bfffc4 	movi	r2,-1
 801551c:	00000106 	br	8015524 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8015520:	e0bff917 	ldw	r2,-28(fp)
}
 8015524:	e037883a 	mov	sp,fp
 8015528:	dfc00117 	ldw	ra,4(sp)
 801552c:	df000017 	ldw	fp,0(sp)
 8015530:	dec00204 	addi	sp,sp,8
 8015534:	f800283a 	ret

08015538 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8015538:	defff204 	addi	sp,sp,-56
 801553c:	dfc00a15 	stw	ra,40(sp)
 8015540:	df000915 	stw	fp,36(sp)
 8015544:	df000904 	addi	fp,sp,36
 8015548:	e13fff15 	stw	r4,-4(fp)
 801554c:	e1400215 	stw	r5,8(fp)
 8015550:	e1800315 	stw	r6,12(fp)
 8015554:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8015558:	e0800204 	addi	r2,fp,8
 801555c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8015560:	e0bfff17 	ldw	r2,-4(fp)
 8015564:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8015568:	00006f06 	br	8015728 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 801556c:	e0bff807 	ldb	r2,-32(fp)
 8015570:	10800960 	cmpeqi	r2,r2,37
 8015574:	1000041e 	bne	r2,zero,8015588 <alt_printf+0x50>
        {
            alt_putchar(c);
 8015578:	e0bff807 	ldb	r2,-32(fp)
 801557c:	1009883a 	mov	r4,r2
 8015580:	80157640 	call	8015764 <alt_putchar>
 8015584:	00006806 	br	8015728 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8015588:	e0bff717 	ldw	r2,-36(fp)
 801558c:	10c00044 	addi	r3,r2,1
 8015590:	e0fff715 	stw	r3,-36(fp)
 8015594:	10800003 	ldbu	r2,0(r2)
 8015598:	e0bff805 	stb	r2,-32(fp)
 801559c:	e0bff807 	ldb	r2,-32(fp)
 80155a0:	10006926 	beq	r2,zero,8015748 <alt_printf+0x210>
            {
                if (c == '%')
 80155a4:	e0bff807 	ldb	r2,-32(fp)
 80155a8:	10800958 	cmpnei	r2,r2,37
 80155ac:	1000041e 	bne	r2,zero,80155c0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 80155b0:	e0bff807 	ldb	r2,-32(fp)
 80155b4:	1009883a 	mov	r4,r2
 80155b8:	80157640 	call	8015764 <alt_putchar>
 80155bc:	00005a06 	br	8015728 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 80155c0:	e0bff807 	ldb	r2,-32(fp)
 80155c4:	108018d8 	cmpnei	r2,r2,99
 80155c8:	1000081e 	bne	r2,zero,80155ec <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 80155cc:	e0bffe17 	ldw	r2,-8(fp)
 80155d0:	10c00104 	addi	r3,r2,4
 80155d4:	e0fffe15 	stw	r3,-8(fp)
 80155d8:	10800017 	ldw	r2,0(r2)
 80155dc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 80155e0:	e13ffd17 	ldw	r4,-12(fp)
 80155e4:	80157640 	call	8015764 <alt_putchar>
 80155e8:	00004f06 	br	8015728 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 80155ec:	e0bff807 	ldb	r2,-32(fp)
 80155f0:	10801e18 	cmpnei	r2,r2,120
 80155f4:	1000341e 	bne	r2,zero,80156c8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 80155f8:	e0bffe17 	ldw	r2,-8(fp)
 80155fc:	10c00104 	addi	r3,r2,4
 8015600:	e0fffe15 	stw	r3,-8(fp)
 8015604:	10800017 	ldw	r2,0(r2)
 8015608:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 801560c:	e0bffb17 	ldw	r2,-20(fp)
 8015610:	1000031e 	bne	r2,zero,8015620 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8015614:	01000c04 	movi	r4,48
 8015618:	80157640 	call	8015764 <alt_putchar>
                        continue;
 801561c:	00004206 	br	8015728 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8015620:	00800704 	movi	r2,28
 8015624:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8015628:	00000306 	br	8015638 <alt_printf+0x100>
                        digit_shift -= 4;
 801562c:	e0bff917 	ldw	r2,-28(fp)
 8015630:	10bfff04 	addi	r2,r2,-4
 8015634:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8015638:	00c003c4 	movi	r3,15
 801563c:	e0bff917 	ldw	r2,-28(fp)
 8015640:	1884983a 	sll	r2,r3,r2
 8015644:	1007883a 	mov	r3,r2
 8015648:	e0bffb17 	ldw	r2,-20(fp)
 801564c:	1884703a 	and	r2,r3,r2
 8015650:	103ff626 	beq	r2,zero,801562c <__alt_data_end+0xffff5c2c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8015654:	00001906 	br	80156bc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8015658:	00c003c4 	movi	r3,15
 801565c:	e0bff917 	ldw	r2,-28(fp)
 8015660:	1884983a 	sll	r2,r3,r2
 8015664:	1007883a 	mov	r3,r2
 8015668:	e0bffb17 	ldw	r2,-20(fp)
 801566c:	1886703a 	and	r3,r3,r2
 8015670:	e0bff917 	ldw	r2,-28(fp)
 8015674:	1884d83a 	srl	r2,r3,r2
 8015678:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 801567c:	e0bffc17 	ldw	r2,-16(fp)
 8015680:	108002a8 	cmpgeui	r2,r2,10
 8015684:	1000041e 	bne	r2,zero,8015698 <alt_printf+0x160>
                            c = '0' + digit;
 8015688:	e0bffc17 	ldw	r2,-16(fp)
 801568c:	10800c04 	addi	r2,r2,48
 8015690:	e0bff805 	stb	r2,-32(fp)
 8015694:	00000306 	br	80156a4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8015698:	e0bffc17 	ldw	r2,-16(fp)
 801569c:	108015c4 	addi	r2,r2,87
 80156a0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 80156a4:	e0bff807 	ldb	r2,-32(fp)
 80156a8:	1009883a 	mov	r4,r2
 80156ac:	80157640 	call	8015764 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 80156b0:	e0bff917 	ldw	r2,-28(fp)
 80156b4:	10bfff04 	addi	r2,r2,-4
 80156b8:	e0bff915 	stw	r2,-28(fp)
 80156bc:	e0bff917 	ldw	r2,-28(fp)
 80156c0:	103fe50e 	bge	r2,zero,8015658 <__alt_data_end+0xffff5c58>
 80156c4:	00001806 	br	8015728 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 80156c8:	e0bff807 	ldb	r2,-32(fp)
 80156cc:	10801cd8 	cmpnei	r2,r2,115
 80156d0:	1000151e 	bne	r2,zero,8015728 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 80156d4:	e0bffe17 	ldw	r2,-8(fp)
 80156d8:	10c00104 	addi	r3,r2,4
 80156dc:	e0fffe15 	stw	r3,-8(fp)
 80156e0:	10800017 	ldw	r2,0(r2)
 80156e4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 80156e8:	00000906 	br	8015710 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 80156ec:	e0bffa17 	ldw	r2,-24(fp)
 80156f0:	10c00044 	addi	r3,r2,1
 80156f4:	e0fffa15 	stw	r3,-24(fp)
 80156f8:	10800003 	ldbu	r2,0(r2)
 80156fc:	10803fcc 	andi	r2,r2,255
 8015700:	1080201c 	xori	r2,r2,128
 8015704:	10bfe004 	addi	r2,r2,-128
 8015708:	1009883a 	mov	r4,r2
 801570c:	80157640 	call	8015764 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8015710:	e0bffa17 	ldw	r2,-24(fp)
 8015714:	10800003 	ldbu	r2,0(r2)
 8015718:	10803fcc 	andi	r2,r2,255
 801571c:	1080201c 	xori	r2,r2,128
 8015720:	10bfe004 	addi	r2,r2,-128
 8015724:	103ff11e 	bne	r2,zero,80156ec <__alt_data_end+0xffff5cec>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8015728:	e0bff717 	ldw	r2,-36(fp)
 801572c:	10c00044 	addi	r3,r2,1
 8015730:	e0fff715 	stw	r3,-36(fp)
 8015734:	10800003 	ldbu	r2,0(r2)
 8015738:	e0bff805 	stb	r2,-32(fp)
 801573c:	e0bff807 	ldb	r2,-32(fp)
 8015740:	103f8a1e 	bne	r2,zero,801556c <__alt_data_end+0xffff5b6c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8015744:	00000106 	br	801574c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8015748:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 801574c:	0001883a 	nop
 8015750:	e037883a 	mov	sp,fp
 8015754:	dfc00117 	ldw	ra,4(sp)
 8015758:	df000017 	ldw	fp,0(sp)
 801575c:	dec00504 	addi	sp,sp,20
 8015760:	f800283a 	ret

08015764 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8015764:	defffd04 	addi	sp,sp,-12
 8015768:	dfc00215 	stw	ra,8(sp)
 801576c:	df000115 	stw	fp,4(sp)
 8015770:	df000104 	addi	fp,sp,4
 8015774:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8015778:	d0a00117 	ldw	r2,-32764(gp)
 801577c:	10800217 	ldw	r2,8(r2)
 8015780:	100b883a 	mov	r5,r2
 8015784:	e13fff17 	ldw	r4,-4(fp)
 8015788:	8015ce00 	call	8015ce0 <putc>
#endif
#endif
}
 801578c:	e037883a 	mov	sp,fp
 8015790:	dfc00117 	ldw	ra,4(sp)
 8015794:	df000017 	ldw	fp,0(sp)
 8015798:	dec00204 	addi	sp,sp,8
 801579c:	f800283a 	ret

080157a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80157a0:	defffc04 	addi	sp,sp,-16
 80157a4:	dfc00315 	stw	ra,12(sp)
 80157a8:	df000215 	stw	fp,8(sp)
 80157ac:	dc000115 	stw	r16,4(sp)
 80157b0:	df000204 	addi	fp,sp,8
 80157b4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80157b8:	e0bffe17 	ldw	r2,-8(fp)
 80157bc:	108000d0 	cmplti	r2,r2,3
 80157c0:	1000111e 	bne	r2,zero,8015808 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80157c4:	04020074 	movhi	r16,2049
 80157c8:	841d6504 	addi	r16,r16,30100
 80157cc:	e0bffe17 	ldw	r2,-8(fp)
 80157d0:	01400304 	movi	r5,12
 80157d4:	1009883a 	mov	r4,r2
 80157d8:	80116700 	call	8011670 <__mulsi3>
 80157dc:	8085883a 	add	r2,r16,r2
 80157e0:	10800204 	addi	r2,r2,8
 80157e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80157e8:	04020074 	movhi	r16,2049
 80157ec:	841d6504 	addi	r16,r16,30100
 80157f0:	e0bffe17 	ldw	r2,-8(fp)
 80157f4:	01400304 	movi	r5,12
 80157f8:	1009883a 	mov	r4,r2
 80157fc:	80116700 	call	8011670 <__mulsi3>
 8015800:	8085883a 	add	r2,r16,r2
 8015804:	10000015 	stw	zero,0(r2)
  }
}
 8015808:	0001883a 	nop
 801580c:	e6ffff04 	addi	sp,fp,-4
 8015810:	dfc00217 	ldw	ra,8(sp)
 8015814:	df000117 	ldw	fp,4(sp)
 8015818:	dc000017 	ldw	r16,0(sp)
 801581c:	dec00304 	addi	sp,sp,12
 8015820:	f800283a 	ret

08015824 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015824:	defffa04 	addi	sp,sp,-24
 8015828:	df000515 	stw	fp,20(sp)
 801582c:	df000504 	addi	fp,sp,20
 8015830:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015834:	0005303a 	rdctl	r2,status
 8015838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801583c:	e0fffc17 	ldw	r3,-16(fp)
 8015840:	00bfff84 	movi	r2,-2
 8015844:	1884703a 	and	r2,r3,r2
 8015848:	1001703a 	wrctl	status,r2
  
  return context;
 801584c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015850:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015854:	e0bfff17 	ldw	r2,-4(fp)
 8015858:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801585c:	e0bffd17 	ldw	r2,-12(fp)
 8015860:	10800017 	ldw	r2,0(r2)
 8015864:	e0fffd17 	ldw	r3,-12(fp)
 8015868:	18c00117 	ldw	r3,4(r3)
 801586c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015870:	e0bffd17 	ldw	r2,-12(fp)
 8015874:	10800117 	ldw	r2,4(r2)
 8015878:	e0fffd17 	ldw	r3,-12(fp)
 801587c:	18c00017 	ldw	r3,0(r3)
 8015880:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015884:	e0bffd17 	ldw	r2,-12(fp)
 8015888:	e0fffd17 	ldw	r3,-12(fp)
 801588c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015890:	e0bffd17 	ldw	r2,-12(fp)
 8015894:	e0fffd17 	ldw	r3,-12(fp)
 8015898:	10c00015 	stw	r3,0(r2)
 801589c:	e0bffb17 	ldw	r2,-20(fp)
 80158a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80158a4:	e0bffe17 	ldw	r2,-8(fp)
 80158a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80158ac:	0001883a 	nop
 80158b0:	e037883a 	mov	sp,fp
 80158b4:	df000017 	ldw	fp,0(sp)
 80158b8:	dec00104 	addi	sp,sp,4
 80158bc:	f800283a 	ret

080158c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80158c0:	defffb04 	addi	sp,sp,-20
 80158c4:	dfc00415 	stw	ra,16(sp)
 80158c8:	df000315 	stw	fp,12(sp)
 80158cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80158d0:	d0a00b17 	ldw	r2,-32724(gp)
 80158d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80158d8:	d0a4e817 	ldw	r2,-27744(gp)
 80158dc:	10800044 	addi	r2,r2,1
 80158e0:	d0a4e815 	stw	r2,-27744(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80158e4:	00002e06 	br	80159a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80158e8:	e0bffd17 	ldw	r2,-12(fp)
 80158ec:	10800017 	ldw	r2,0(r2)
 80158f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80158f4:	e0bffd17 	ldw	r2,-12(fp)
 80158f8:	10800403 	ldbu	r2,16(r2)
 80158fc:	10803fcc 	andi	r2,r2,255
 8015900:	10000426 	beq	r2,zero,8015914 <alt_tick+0x54>
 8015904:	d0a4e817 	ldw	r2,-27744(gp)
 8015908:	1000021e 	bne	r2,zero,8015914 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801590c:	e0bffd17 	ldw	r2,-12(fp)
 8015910:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015914:	e0bffd17 	ldw	r2,-12(fp)
 8015918:	10800217 	ldw	r2,8(r2)
 801591c:	d0e4e817 	ldw	r3,-27744(gp)
 8015920:	18801d36 	bltu	r3,r2,8015998 <alt_tick+0xd8>
 8015924:	e0bffd17 	ldw	r2,-12(fp)
 8015928:	10800403 	ldbu	r2,16(r2)
 801592c:	10803fcc 	andi	r2,r2,255
 8015930:	1000191e 	bne	r2,zero,8015998 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015934:	e0bffd17 	ldw	r2,-12(fp)
 8015938:	10800317 	ldw	r2,12(r2)
 801593c:	e0fffd17 	ldw	r3,-12(fp)
 8015940:	18c00517 	ldw	r3,20(r3)
 8015944:	1809883a 	mov	r4,r3
 8015948:	103ee83a 	callr	r2
 801594c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015950:	e0bfff17 	ldw	r2,-4(fp)
 8015954:	1000031e 	bne	r2,zero,8015964 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015958:	e13ffd17 	ldw	r4,-12(fp)
 801595c:	80158240 	call	8015824 <alt_alarm_stop>
 8015960:	00000d06 	br	8015998 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015964:	e0bffd17 	ldw	r2,-12(fp)
 8015968:	10c00217 	ldw	r3,8(r2)
 801596c:	e0bfff17 	ldw	r2,-4(fp)
 8015970:	1887883a 	add	r3,r3,r2
 8015974:	e0bffd17 	ldw	r2,-12(fp)
 8015978:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801597c:	e0bffd17 	ldw	r2,-12(fp)
 8015980:	10c00217 	ldw	r3,8(r2)
 8015984:	d0a4e817 	ldw	r2,-27744(gp)
 8015988:	1880032e 	bgeu	r3,r2,8015998 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801598c:	e0bffd17 	ldw	r2,-12(fp)
 8015990:	00c00044 	movi	r3,1
 8015994:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015998:	e0bffe17 	ldw	r2,-8(fp)
 801599c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80159a0:	e0fffd17 	ldw	r3,-12(fp)
 80159a4:	d0a00b04 	addi	r2,gp,-32724
 80159a8:	18bfcf1e 	bne	r3,r2,80158e8 <__alt_data_end+0xffff5ee8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80159ac:	0001883a 	nop
}
 80159b0:	0001883a 	nop
 80159b4:	e037883a 	mov	sp,fp
 80159b8:	dfc00117 	ldw	ra,4(sp)
 80159bc:	df000017 	ldw	fp,0(sp)
 80159c0:	dec00204 	addi	sp,sp,8
 80159c4:	f800283a 	ret

080159c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80159c8:	deffff04 	addi	sp,sp,-4
 80159cc:	df000015 	stw	fp,0(sp)
 80159d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80159d4:	000170fa 	wrctl	ienable,zero
}
 80159d8:	0001883a 	nop
 80159dc:	e037883a 	mov	sp,fp
 80159e0:	df000017 	ldw	fp,0(sp)
 80159e4:	dec00104 	addi	sp,sp,4
 80159e8:	f800283a 	ret

080159ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80159ec:	defffb04 	addi	sp,sp,-20
 80159f0:	dfc00415 	stw	ra,16(sp)
 80159f4:	df000315 	stw	fp,12(sp)
 80159f8:	df000304 	addi	fp,sp,12
 80159fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8015a00:	d0a00417 	ldw	r2,-32752(gp)
 8015a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015a08:	00003106 	br	8015ad0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8015a0c:	e0bffd17 	ldw	r2,-12(fp)
 8015a10:	10800217 	ldw	r2,8(r2)
 8015a14:	1009883a 	mov	r4,r2
 8015a18:	80117b40 	call	80117b4 <strlen>
 8015a1c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8015a20:	e0bffd17 	ldw	r2,-12(fp)
 8015a24:	10c00217 	ldw	r3,8(r2)
 8015a28:	e0bffe17 	ldw	r2,-8(fp)
 8015a2c:	10bfffc4 	addi	r2,r2,-1
 8015a30:	1885883a 	add	r2,r3,r2
 8015a34:	10800003 	ldbu	r2,0(r2)
 8015a38:	10803fcc 	andi	r2,r2,255
 8015a3c:	1080201c 	xori	r2,r2,128
 8015a40:	10bfe004 	addi	r2,r2,-128
 8015a44:	10800bd8 	cmpnei	r2,r2,47
 8015a48:	1000031e 	bne	r2,zero,8015a58 <alt_find_file+0x6c>
    {
      len -= 1;
 8015a4c:	e0bffe17 	ldw	r2,-8(fp)
 8015a50:	10bfffc4 	addi	r2,r2,-1
 8015a54:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8015a58:	e0bffe17 	ldw	r2,-8(fp)
 8015a5c:	e0ffff17 	ldw	r3,-4(fp)
 8015a60:	1885883a 	add	r2,r3,r2
 8015a64:	10800003 	ldbu	r2,0(r2)
 8015a68:	10803fcc 	andi	r2,r2,255
 8015a6c:	1080201c 	xori	r2,r2,128
 8015a70:	10bfe004 	addi	r2,r2,-128
 8015a74:	10800be0 	cmpeqi	r2,r2,47
 8015a78:	1000081e 	bne	r2,zero,8015a9c <alt_find_file+0xb0>
 8015a7c:	e0bffe17 	ldw	r2,-8(fp)
 8015a80:	e0ffff17 	ldw	r3,-4(fp)
 8015a84:	1885883a 	add	r2,r3,r2
 8015a88:	10800003 	ldbu	r2,0(r2)
 8015a8c:	10803fcc 	andi	r2,r2,255
 8015a90:	1080201c 	xori	r2,r2,128
 8015a94:	10bfe004 	addi	r2,r2,-128
 8015a98:	10000a1e 	bne	r2,zero,8015ac4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8015a9c:	e0bffd17 	ldw	r2,-12(fp)
 8015aa0:	10800217 	ldw	r2,8(r2)
 8015aa4:	e0fffe17 	ldw	r3,-8(fp)
 8015aa8:	180d883a 	mov	r6,r3
 8015aac:	e17fff17 	ldw	r5,-4(fp)
 8015ab0:	1009883a 	mov	r4,r2
 8015ab4:	8015c880 	call	8015c88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8015ab8:	1000021e 	bne	r2,zero,8015ac4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8015abc:	e0bffd17 	ldw	r2,-12(fp)
 8015ac0:	00000706 	br	8015ae0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8015ac4:	e0bffd17 	ldw	r2,-12(fp)
 8015ac8:	10800017 	ldw	r2,0(r2)
 8015acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015ad0:	e0fffd17 	ldw	r3,-12(fp)
 8015ad4:	d0a00404 	addi	r2,gp,-32752
 8015ad8:	18bfcc1e 	bne	r3,r2,8015a0c <__alt_data_end+0xffff600c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8015adc:	0005883a 	mov	r2,zero
}
 8015ae0:	e037883a 	mov	sp,fp
 8015ae4:	dfc00117 	ldw	ra,4(sp)
 8015ae8:	df000017 	ldw	fp,0(sp)
 8015aec:	dec00204 	addi	sp,sp,8
 8015af0:	f800283a 	ret

08015af4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8015af4:	defffa04 	addi	sp,sp,-24
 8015af8:	dfc00515 	stw	ra,20(sp)
 8015afc:	df000415 	stw	fp,16(sp)
 8015b00:	dc000315 	stw	r16,12(sp)
 8015b04:	df000404 	addi	fp,sp,16
 8015b08:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015b0c:	00bffa04 	movi	r2,-24
 8015b10:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015b14:	e03ffc15 	stw	zero,-16(fp)
 8015b18:	00001d06 	br	8015b90 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8015b1c:	04020074 	movhi	r16,2049
 8015b20:	841d6504 	addi	r16,r16,30100
 8015b24:	e0bffc17 	ldw	r2,-16(fp)
 8015b28:	01400304 	movi	r5,12
 8015b2c:	1009883a 	mov	r4,r2
 8015b30:	80116700 	call	8011670 <__mulsi3>
 8015b34:	8085883a 	add	r2,r16,r2
 8015b38:	10800017 	ldw	r2,0(r2)
 8015b3c:	1000111e 	bne	r2,zero,8015b84 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8015b40:	04020074 	movhi	r16,2049
 8015b44:	841d6504 	addi	r16,r16,30100
 8015b48:	e0bffc17 	ldw	r2,-16(fp)
 8015b4c:	01400304 	movi	r5,12
 8015b50:	1009883a 	mov	r4,r2
 8015b54:	80116700 	call	8011670 <__mulsi3>
 8015b58:	8085883a 	add	r2,r16,r2
 8015b5c:	e0fffe17 	ldw	r3,-8(fp)
 8015b60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8015b64:	d0e00817 	ldw	r3,-32736(gp)
 8015b68:	e0bffc17 	ldw	r2,-16(fp)
 8015b6c:	1880020e 	bge	r3,r2,8015b78 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8015b70:	e0bffc17 	ldw	r2,-16(fp)
 8015b74:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8015b78:	e0bffc17 	ldw	r2,-16(fp)
 8015b7c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8015b80:	00000606 	br	8015b9c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015b84:	e0bffc17 	ldw	r2,-16(fp)
 8015b88:	10800044 	addi	r2,r2,1
 8015b8c:	e0bffc15 	stw	r2,-16(fp)
 8015b90:	e0bffc17 	ldw	r2,-16(fp)
 8015b94:	10800810 	cmplti	r2,r2,32
 8015b98:	103fe01e 	bne	r2,zero,8015b1c <__alt_data_end+0xffff611c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8015b9c:	e0bffd17 	ldw	r2,-12(fp)
}
 8015ba0:	e6ffff04 	addi	sp,fp,-4
 8015ba4:	dfc00217 	ldw	ra,8(sp)
 8015ba8:	df000117 	ldw	fp,4(sp)
 8015bac:	dc000017 	ldw	r16,0(sp)
 8015bb0:	dec00304 	addi	sp,sp,12
 8015bb4:	f800283a 	ret

08015bb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8015bb8:	defffe04 	addi	sp,sp,-8
 8015bbc:	df000115 	stw	fp,4(sp)
 8015bc0:	df000104 	addi	fp,sp,4
 8015bc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8015bc8:	e0bfff17 	ldw	r2,-4(fp)
 8015bcc:	10bffe84 	addi	r2,r2,-6
 8015bd0:	10c00428 	cmpgeui	r3,r2,16
 8015bd4:	18001a1e 	bne	r3,zero,8015c40 <alt_exception_cause_generated_bad_addr+0x88>
 8015bd8:	100690ba 	slli	r3,r2,2
 8015bdc:	00820074 	movhi	r2,2049
 8015be0:	1096fc04 	addi	r2,r2,23536
 8015be4:	1885883a 	add	r2,r3,r2
 8015be8:	10800017 	ldw	r2,0(r2)
 8015bec:	1000683a 	jmp	r2
 8015bf0:	08015c30 	cmpltui	zero,at,1392
 8015bf4:	08015c30 	cmpltui	zero,at,1392
 8015bf8:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015bfc:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c00:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c04:	08015c30 	cmpltui	zero,at,1392
 8015c08:	08015c38 	rdprs	zero,at,1392
 8015c0c:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c10:	08015c30 	cmpltui	zero,at,1392
 8015c14:	08015c30 	cmpltui	zero,at,1392
 8015c18:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c1c:	08015c30 	cmpltui	zero,at,1392
 8015c20:	08015c38 	rdprs	zero,at,1392
 8015c24:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c28:	08015c40 	call	8015c4 <__alt_mem_onchip_memory2_0-0x780ea3c>
 8015c2c:	08015c30 	cmpltui	zero,at,1392
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8015c30:	00800044 	movi	r2,1
 8015c34:	00000306 	br	8015c44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8015c38:	0005883a 	mov	r2,zero
 8015c3c:	00000106 	br	8015c44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8015c40:	0005883a 	mov	r2,zero
  }
}
 8015c44:	e037883a 	mov	sp,fp
 8015c48:	df000017 	ldw	fp,0(sp)
 8015c4c:	dec00104 	addi	sp,sp,4
 8015c50:	f800283a 	ret

08015c54 <atexit>:
 8015c54:	200b883a 	mov	r5,r4
 8015c58:	000f883a 	mov	r7,zero
 8015c5c:	000d883a 	mov	r6,zero
 8015c60:	0009883a 	mov	r4,zero
 8015c64:	8015d8c1 	jmpi	8015d8c <__register_exitproc>

08015c68 <exit>:
 8015c68:	defffe04 	addi	sp,sp,-8
 8015c6c:	000b883a 	mov	r5,zero
 8015c70:	dc000015 	stw	r16,0(sp)
 8015c74:	dfc00115 	stw	ra,4(sp)
 8015c78:	2021883a 	mov	r16,r4
 8015c7c:	8015ee40 	call	8015ee4 <__call_exitprocs>
 8015c80:	8009883a 	mov	r4,r16
 8015c84:	80160740 	call	8016074 <_exit>

08015c88 <memcmp>:
 8015c88:	218d883a 	add	r6,r4,r6
 8015c8c:	21800826 	beq	r4,r6,8015cb0 <memcmp+0x28>
 8015c90:	20800003 	ldbu	r2,0(r4)
 8015c94:	28c00003 	ldbu	r3,0(r5)
 8015c98:	10c00226 	beq	r2,r3,8015ca4 <memcmp+0x1c>
 8015c9c:	10c5c83a 	sub	r2,r2,r3
 8015ca0:	f800283a 	ret
 8015ca4:	21000044 	addi	r4,r4,1
 8015ca8:	29400044 	addi	r5,r5,1
 8015cac:	003ff706 	br	8015c8c <__alt_data_end+0xffff628c>
 8015cb0:	0005883a 	mov	r2,zero
 8015cb4:	f800283a 	ret

08015cb8 <memcpy>:
 8015cb8:	2005883a 	mov	r2,r4
 8015cbc:	2007883a 	mov	r3,r4
 8015cc0:	218d883a 	add	r6,r4,r6
 8015cc4:	19800526 	beq	r3,r6,8015cdc <memcpy+0x24>
 8015cc8:	29000003 	ldbu	r4,0(r5)
 8015ccc:	18c00044 	addi	r3,r3,1
 8015cd0:	29400044 	addi	r5,r5,1
 8015cd4:	193fffc5 	stb	r4,-1(r3)
 8015cd8:	003ffa06 	br	8015cc4 <__alt_data_end+0xffff62c4>
 8015cdc:	f800283a 	ret

08015ce0 <putc>:
 8015ce0:	defffd04 	addi	sp,sp,-12
 8015ce4:	00820074 	movhi	r2,2049
 8015ce8:	dc000115 	stw	r16,4(sp)
 8015cec:	dfc00215 	stw	ra,8(sp)
 8015cf0:	10876104 	addi	r2,r2,7556
 8015cf4:	28800115 	stw	r2,4(r5)
 8015cf8:	00820074 	movhi	r2,2049
 8015cfc:	109dc604 	addi	r2,r2,30488
 8015d00:	d9000005 	stb	r4,0(sp)
 8015d04:	2021883a 	mov	r16,r4
 8015d08:	11000017 	ldw	r4,0(r2)
 8015d0c:	01c00044 	movi	r7,1
 8015d10:	d80d883a 	mov	r6,sp
 8015d14:	8011d840 	call	8011d84 <__sfvwrite_small_dev>
 8015d18:	00ffffc4 	movi	r3,-1
 8015d1c:	10c00126 	beq	r2,r3,8015d24 <putc+0x44>
 8015d20:	8005883a 	mov	r2,r16
 8015d24:	dfc00217 	ldw	ra,8(sp)
 8015d28:	dc000117 	ldw	r16,4(sp)
 8015d2c:	dec00304 	addi	sp,sp,12
 8015d30:	f800283a 	ret

08015d34 <_putc_r>:
 8015d34:	defffd04 	addi	sp,sp,-12
 8015d38:	00820074 	movhi	r2,2049
 8015d3c:	dc000115 	stw	r16,4(sp)
 8015d40:	dfc00215 	stw	ra,8(sp)
 8015d44:	10876104 	addi	r2,r2,7556
 8015d48:	30800115 	stw	r2,4(r6)
 8015d4c:	00820074 	movhi	r2,2049
 8015d50:	109dc604 	addi	r2,r2,30488
 8015d54:	11000017 	ldw	r4,0(r2)
 8015d58:	2821883a 	mov	r16,r5
 8015d5c:	01c00044 	movi	r7,1
 8015d60:	300b883a 	mov	r5,r6
 8015d64:	d80d883a 	mov	r6,sp
 8015d68:	dc000005 	stb	r16,0(sp)
 8015d6c:	8011d840 	call	8011d84 <__sfvwrite_small_dev>
 8015d70:	00ffffc4 	movi	r3,-1
 8015d74:	10c00126 	beq	r2,r3,8015d7c <_putc_r+0x48>
 8015d78:	8005883a 	mov	r2,r16
 8015d7c:	dfc00217 	ldw	ra,8(sp)
 8015d80:	dc000117 	ldw	r16,4(sp)
 8015d84:	dec00304 	addi	sp,sp,12
 8015d88:	f800283a 	ret

08015d8c <__register_exitproc>:
 8015d8c:	00820074 	movhi	r2,2049
 8015d90:	109dc504 	addi	r2,r2,30484
 8015d94:	10c00017 	ldw	r3,0(r2)
 8015d98:	defff904 	addi	sp,sp,-28
 8015d9c:	dc000015 	stw	r16,0(sp)
 8015da0:	1c000c17 	ldw	r16,48(r3)
 8015da4:	dd400515 	stw	r21,20(sp)
 8015da8:	dd000415 	stw	r20,16(sp)
 8015dac:	dcc00315 	stw	r19,12(sp)
 8015db0:	dc800215 	stw	r18,8(sp)
 8015db4:	dc400115 	stw	r17,4(sp)
 8015db8:	dfc00615 	stw	ra,24(sp)
 8015dbc:	202b883a 	mov	r21,r4
 8015dc0:	2823883a 	mov	r17,r5
 8015dc4:	3027883a 	mov	r19,r6
 8015dc8:	3825883a 	mov	r18,r7
 8015dcc:	1029883a 	mov	r20,r2
 8015dd0:	8000021e 	bne	r16,zero,8015ddc <__register_exitproc+0x50>
 8015dd4:	1c000d04 	addi	r16,r3,52
 8015dd8:	1c000c15 	stw	r16,48(r3)
 8015ddc:	80800117 	ldw	r2,4(r16)
 8015de0:	00c007c4 	movi	r3,31
 8015de4:	1880110e 	bge	r3,r2,8015e2c <__register_exitproc+0xa0>
 8015de8:	00800034 	movhi	r2,0
 8015dec:	10800004 	addi	r2,r2,0
 8015df0:	1000021e 	bne	r2,zero,8015dfc <__register_exitproc+0x70>
 8015df4:	00bfffc4 	movi	r2,-1
 8015df8:	00003106 	br	8015ec0 <__register_exitproc+0x134>
 8015dfc:	01002304 	movi	r4,140
 8015e00:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8010000>
 8015e04:	1021883a 	mov	r16,r2
 8015e08:	103ffa26 	beq	r2,zero,8015df4 <__alt_data_end+0xffff63f4>
 8015e0c:	10000115 	stw	zero,4(r2)
 8015e10:	a0800017 	ldw	r2,0(r20)
 8015e14:	10c00c17 	ldw	r3,48(r2)
 8015e18:	80c00015 	stw	r3,0(r16)
 8015e1c:	14000c15 	stw	r16,48(r2)
 8015e20:	80002215 	stw	zero,136(r16)
 8015e24:	a8001d26 	beq	r21,zero,8015e9c <__register_exitproc+0x110>
 8015e28:	00000606 	br	8015e44 <__register_exitproc+0xb8>
 8015e2c:	a8001b26 	beq	r21,zero,8015e9c <__register_exitproc+0x110>
 8015e30:	80802217 	ldw	r2,136(r16)
 8015e34:	1000091e 	bne	r2,zero,8015e5c <__register_exitproc+0xd0>
 8015e38:	00800034 	movhi	r2,0
 8015e3c:	10800004 	addi	r2,r2,0
 8015e40:	103fec26 	beq	r2,zero,8015df4 <__alt_data_end+0xffff63f4>
 8015e44:	01004204 	movi	r4,264
 8015e48:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8010000>
 8015e4c:	103fe926 	beq	r2,zero,8015df4 <__alt_data_end+0xffff63f4>
 8015e50:	10004015 	stw	zero,256(r2)
 8015e54:	10004115 	stw	zero,260(r2)
 8015e58:	80802215 	stw	r2,136(r16)
 8015e5c:	81400117 	ldw	r5,4(r16)
 8015e60:	01000044 	movi	r4,1
 8015e64:	2947883a 	add	r3,r5,r5
 8015e68:	18c7883a 	add	r3,r3,r3
 8015e6c:	10c7883a 	add	r3,r2,r3
 8015e70:	1cc00015 	stw	r19,0(r3)
 8015e74:	2148983a 	sll	r4,r4,r5
 8015e78:	11404017 	ldw	r5,256(r2)
 8015e7c:	290ab03a 	or	r5,r5,r4
 8015e80:	11404015 	stw	r5,256(r2)
 8015e84:	1c802015 	stw	r18,128(r3)
 8015e88:	00c00084 	movi	r3,2
 8015e8c:	a8c0031e 	bne	r21,r3,8015e9c <__register_exitproc+0x110>
 8015e90:	10c04117 	ldw	r3,260(r2)
 8015e94:	1908b03a 	or	r4,r3,r4
 8015e98:	11004115 	stw	r4,260(r2)
 8015e9c:	80800117 	ldw	r2,4(r16)
 8015ea0:	10c00044 	addi	r3,r2,1
 8015ea4:	10800084 	addi	r2,r2,2
 8015ea8:	1085883a 	add	r2,r2,r2
 8015eac:	1085883a 	add	r2,r2,r2
 8015eb0:	80c00115 	stw	r3,4(r16)
 8015eb4:	80a1883a 	add	r16,r16,r2
 8015eb8:	84400015 	stw	r17,0(r16)
 8015ebc:	0005883a 	mov	r2,zero
 8015ec0:	dfc00617 	ldw	ra,24(sp)
 8015ec4:	dd400517 	ldw	r21,20(sp)
 8015ec8:	dd000417 	ldw	r20,16(sp)
 8015ecc:	dcc00317 	ldw	r19,12(sp)
 8015ed0:	dc800217 	ldw	r18,8(sp)
 8015ed4:	dc400117 	ldw	r17,4(sp)
 8015ed8:	dc000017 	ldw	r16,0(sp)
 8015edc:	dec00704 	addi	sp,sp,28
 8015ee0:	f800283a 	ret

08015ee4 <__call_exitprocs>:
 8015ee4:	defff504 	addi	sp,sp,-44
 8015ee8:	dd000515 	stw	r20,20(sp)
 8015eec:	05020074 	movhi	r20,2049
 8015ef0:	dc800315 	stw	r18,12(sp)
 8015ef4:	dfc00a15 	stw	ra,40(sp)
 8015ef8:	df000915 	stw	fp,36(sp)
 8015efc:	ddc00815 	stw	r23,32(sp)
 8015f00:	dd800715 	stw	r22,28(sp)
 8015f04:	dd400615 	stw	r21,24(sp)
 8015f08:	dcc00415 	stw	r19,16(sp)
 8015f0c:	dc400215 	stw	r17,8(sp)
 8015f10:	dc000115 	stw	r16,4(sp)
 8015f14:	d9000015 	stw	r4,0(sp)
 8015f18:	2825883a 	mov	r18,r5
 8015f1c:	a51dc504 	addi	r20,r20,30484
 8015f20:	a4400017 	ldw	r17,0(r20)
 8015f24:	8cc00c17 	ldw	r19,48(r17)
 8015f28:	8c400c04 	addi	r17,r17,48
 8015f2c:	98004526 	beq	r19,zero,8016044 <__call_exitprocs+0x160>
 8015f30:	9c000117 	ldw	r16,4(r19)
 8015f34:	00900034 	movhi	r2,16384
 8015f38:	10bfffc4 	addi	r2,r2,-1
 8015f3c:	9d402217 	ldw	r21,136(r19)
 8015f40:	85bfffc4 	addi	r22,r16,-1
 8015f44:	80a1883a 	add	r16,r16,r2
 8015f48:	8421883a 	add	r16,r16,r16
 8015f4c:	8421883a 	add	r16,r16,r16
 8015f50:	ac2f883a 	add	r23,r21,r16
 8015f54:	84000204 	addi	r16,r16,8
 8015f58:	9c21883a 	add	r16,r19,r16
 8015f5c:	b0002716 	blt	r22,zero,8015ffc <__call_exitprocs+0x118>
 8015f60:	90000726 	beq	r18,zero,8015f80 <__call_exitprocs+0x9c>
 8015f64:	a800041e 	bne	r21,zero,8015f78 <__call_exitprocs+0x94>
 8015f68:	b5bfffc4 	addi	r22,r22,-1
 8015f6c:	bdffff04 	addi	r23,r23,-4
 8015f70:	843fff04 	addi	r16,r16,-4
 8015f74:	003ff906 	br	8015f5c <__alt_data_end+0xffff655c>
 8015f78:	b9002017 	ldw	r4,128(r23)
 8015f7c:	913ffa1e 	bne	r18,r4,8015f68 <__alt_data_end+0xffff6568>
 8015f80:	99000117 	ldw	r4,4(r19)
 8015f84:	82000017 	ldw	r8,0(r16)
 8015f88:	213fffc4 	addi	r4,r4,-1
 8015f8c:	b100021e 	bne	r22,r4,8015f98 <__call_exitprocs+0xb4>
 8015f90:	9d800115 	stw	r22,4(r19)
 8015f94:	00000106 	br	8015f9c <__call_exitprocs+0xb8>
 8015f98:	80000015 	stw	zero,0(r16)
 8015f9c:	403ff226 	beq	r8,zero,8015f68 <__alt_data_end+0xffff6568>
 8015fa0:	9f000117 	ldw	fp,4(r19)
 8015fa4:	a8000526 	beq	r21,zero,8015fbc <__call_exitprocs+0xd8>
 8015fa8:	00800044 	movi	r2,1
 8015fac:	1592983a 	sll	r9,r2,r22
 8015fb0:	a9404017 	ldw	r5,256(r21)
 8015fb4:	494a703a 	and	r5,r9,r5
 8015fb8:	2800021e 	bne	r5,zero,8015fc4 <__call_exitprocs+0xe0>
 8015fbc:	403ee83a 	callr	r8
 8015fc0:	00000906 	br	8015fe8 <__call_exitprocs+0x104>
 8015fc4:	a9004117 	ldw	r4,260(r21)
 8015fc8:	4908703a 	and	r4,r9,r4
 8015fcc:	2000041e 	bne	r4,zero,8015fe0 <__call_exitprocs+0xfc>
 8015fd0:	b9400017 	ldw	r5,0(r23)
 8015fd4:	d9000017 	ldw	r4,0(sp)
 8015fd8:	403ee83a 	callr	r8
 8015fdc:	00000206 	br	8015fe8 <__call_exitprocs+0x104>
 8015fe0:	b9000017 	ldw	r4,0(r23)
 8015fe4:	403ee83a 	callr	r8
 8015fe8:	99000117 	ldw	r4,4(r19)
 8015fec:	e13fcc1e 	bne	fp,r4,8015f20 <__alt_data_end+0xffff6520>
 8015ff0:	89000017 	ldw	r4,0(r17)
 8015ff4:	993fdc26 	beq	r19,r4,8015f68 <__alt_data_end+0xffff6568>
 8015ff8:	003fc906 	br	8015f20 <__alt_data_end+0xffff6520>
 8015ffc:	00800034 	movhi	r2,0
 8016000:	10800004 	addi	r2,r2,0
 8016004:	10000f26 	beq	r2,zero,8016044 <__call_exitprocs+0x160>
 8016008:	99400117 	ldw	r5,4(r19)
 801600c:	99000017 	ldw	r4,0(r19)
 8016010:	2800091e 	bne	r5,zero,8016038 <__call_exitprocs+0x154>
 8016014:	20000826 	beq	r4,zero,8016038 <__call_exitprocs+0x154>
 8016018:	89000015 	stw	r4,0(r17)
 801601c:	a8000226 	beq	r21,zero,8016028 <__call_exitprocs+0x144>
 8016020:	a809883a 	mov	r4,r21
 8016024:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8010000>
 8016028:	9809883a 	mov	r4,r19
 801602c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8010000>
 8016030:	8cc00017 	ldw	r19,0(r17)
 8016034:	003fbd06 	br	8015f2c <__alt_data_end+0xffff652c>
 8016038:	9823883a 	mov	r17,r19
 801603c:	2027883a 	mov	r19,r4
 8016040:	003fba06 	br	8015f2c <__alt_data_end+0xffff652c>
 8016044:	dfc00a17 	ldw	ra,40(sp)
 8016048:	df000917 	ldw	fp,36(sp)
 801604c:	ddc00817 	ldw	r23,32(sp)
 8016050:	dd800717 	ldw	r22,28(sp)
 8016054:	dd400617 	ldw	r21,24(sp)
 8016058:	dd000517 	ldw	r20,20(sp)
 801605c:	dcc00417 	ldw	r19,16(sp)
 8016060:	dc800317 	ldw	r18,12(sp)
 8016064:	dc400217 	ldw	r17,8(sp)
 8016068:	dc000117 	ldw	r16,4(sp)
 801606c:	dec00b04 	addi	sp,sp,44
 8016070:	f800283a 	ret

08016074 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8016074:	defffd04 	addi	sp,sp,-12
 8016078:	df000215 	stw	fp,8(sp)
 801607c:	df000204 	addi	fp,sp,8
 8016080:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8016084:	0001883a 	nop
 8016088:	e0bfff17 	ldw	r2,-4(fp)
 801608c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8016090:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8016094:	10000226 	beq	r2,zero,80160a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8016098:	002af070 	cmpltui	zero,zero,43969
 801609c:	00000106 	br	80160a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80160a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80160a4:	003fff06 	br	80160a4 <__alt_data_end+0xffff66a4>
