// sdram_interface_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module sdram_interface_mm_interconnect_0 (
		input  wire        altpll_0_c0_clk,                                          //                                        altpll_0_c0.clk
		input  wire        clk_0_clk_clk,                                            //                                          clk_0_clk.clk
		input  wire        bridge_0_reset_reset_bridge_in_reset_reset,               //               bridge_0_reset_reset_bridge_in_reset.reset
		input  wire        new_sdram_controller_0_reset_reset_bridge_in_reset_reset, // new_sdram_controller_0_reset_reset_bridge_in_reset.reset
		input  wire [25:0] bridge_0_avalon_master_address,                           //                             bridge_0_avalon_master.address
		output wire        bridge_0_avalon_master_waitrequest,                       //                                                   .waitrequest
		input  wire [1:0]  bridge_0_avalon_master_byteenable,                        //                                                   .byteenable
		input  wire        bridge_0_avalon_master_read,                              //                                                   .read
		output wire [15:0] bridge_0_avalon_master_readdata,                          //                                                   .readdata
		input  wire        bridge_0_avalon_master_write,                             //                                                   .write
		input  wire [15:0] bridge_0_avalon_master_writedata,                         //                                                   .writedata
		output wire [24:0] new_sdram_controller_0_s1_address,                        //                          new_sdram_controller_0_s1.address
		output wire        new_sdram_controller_0_s1_write,                          //                                                   .write
		output wire        new_sdram_controller_0_s1_read,                           //                                                   .read
		input  wire [15:0] new_sdram_controller_0_s1_readdata,                       //                                                   .readdata
		output wire [15:0] new_sdram_controller_0_s1_writedata,                      //                                                   .writedata
		output wire [1:0]  new_sdram_controller_0_s1_byteenable,                     //                                                   .byteenable
		input  wire        new_sdram_controller_0_s1_readdatavalid,                  //                                                   .readdatavalid
		input  wire        new_sdram_controller_0_s1_waitrequest,                    //                                                   .waitrequest
		output wire        new_sdram_controller_0_s1_chipselect                      //                                                   .chipselect
	);

	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // bridge_0_avalon_master_agent:av_waitrequest -> bridge_0_avalon_master_translator:uav_waitrequest
	wire  [15:0] bridge_0_avalon_master_translator_avalon_universal_master_0_readdata;      // bridge_0_avalon_master_agent:av_readdata -> bridge_0_avalon_master_translator:uav_readdata
	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // bridge_0_avalon_master_translator:uav_debugaccess -> bridge_0_avalon_master_agent:av_debugaccess
	wire  [25:0] bridge_0_avalon_master_translator_avalon_universal_master_0_address;       // bridge_0_avalon_master_translator:uav_address -> bridge_0_avalon_master_agent:av_address
	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_read;          // bridge_0_avalon_master_translator:uav_read -> bridge_0_avalon_master_agent:av_read
	wire   [1:0] bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // bridge_0_avalon_master_translator:uav_byteenable -> bridge_0_avalon_master_agent:av_byteenable
	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // bridge_0_avalon_master_agent:av_readdatavalid -> bridge_0_avalon_master_translator:uav_readdatavalid
	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_lock;          // bridge_0_avalon_master_translator:uav_lock -> bridge_0_avalon_master_agent:av_lock
	wire         bridge_0_avalon_master_translator_avalon_universal_master_0_write;         // bridge_0_avalon_master_translator:uav_write -> bridge_0_avalon_master_agent:av_write
	wire  [15:0] bridge_0_avalon_master_translator_avalon_universal_master_0_writedata;     // bridge_0_avalon_master_translator:uav_writedata -> bridge_0_avalon_master_agent:av_writedata
	wire   [1:0] bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // bridge_0_avalon_master_translator:uav_burstcount -> bridge_0_avalon_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> bridge_0_avalon_master_agent:rp_valid
	wire  [76:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> bridge_0_avalon_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                         // bridge_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> bridge_0_avalon_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> bridge_0_avalon_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> bridge_0_avalon_master_agent:rp_endofpacket
	wire  [15:0] new_sdram_controller_0_s1_agent_m0_readdata;                               // new_sdram_controller_0_s1_translator:uav_readdata -> new_sdram_controller_0_s1_agent:m0_readdata
	wire         new_sdram_controller_0_s1_agent_m0_waitrequest;                            // new_sdram_controller_0_s1_translator:uav_waitrequest -> new_sdram_controller_0_s1_agent:m0_waitrequest
	wire         new_sdram_controller_0_s1_agent_m0_debugaccess;                            // new_sdram_controller_0_s1_agent:m0_debugaccess -> new_sdram_controller_0_s1_translator:uav_debugaccess
	wire  [25:0] new_sdram_controller_0_s1_agent_m0_address;                                // new_sdram_controller_0_s1_agent:m0_address -> new_sdram_controller_0_s1_translator:uav_address
	wire   [1:0] new_sdram_controller_0_s1_agent_m0_byteenable;                             // new_sdram_controller_0_s1_agent:m0_byteenable -> new_sdram_controller_0_s1_translator:uav_byteenable
	wire         new_sdram_controller_0_s1_agent_m0_read;                                   // new_sdram_controller_0_s1_agent:m0_read -> new_sdram_controller_0_s1_translator:uav_read
	wire         new_sdram_controller_0_s1_agent_m0_readdatavalid;                          // new_sdram_controller_0_s1_translator:uav_readdatavalid -> new_sdram_controller_0_s1_agent:m0_readdatavalid
	wire         new_sdram_controller_0_s1_agent_m0_lock;                                   // new_sdram_controller_0_s1_agent:m0_lock -> new_sdram_controller_0_s1_translator:uav_lock
	wire  [15:0] new_sdram_controller_0_s1_agent_m0_writedata;                              // new_sdram_controller_0_s1_agent:m0_writedata -> new_sdram_controller_0_s1_translator:uav_writedata
	wire         new_sdram_controller_0_s1_agent_m0_write;                                  // new_sdram_controller_0_s1_agent:m0_write -> new_sdram_controller_0_s1_translator:uav_write
	wire   [1:0] new_sdram_controller_0_s1_agent_m0_burstcount;                             // new_sdram_controller_0_s1_agent:m0_burstcount -> new_sdram_controller_0_s1_translator:uav_burstcount
	wire         new_sdram_controller_0_s1_agent_rf_source_valid;                           // new_sdram_controller_0_s1_agent:rf_source_valid -> new_sdram_controller_0_s1_agent_rsp_fifo:in_valid
	wire  [77:0] new_sdram_controller_0_s1_agent_rf_source_data;                            // new_sdram_controller_0_s1_agent:rf_source_data -> new_sdram_controller_0_s1_agent_rsp_fifo:in_data
	wire         new_sdram_controller_0_s1_agent_rf_source_ready;                           // new_sdram_controller_0_s1_agent_rsp_fifo:in_ready -> new_sdram_controller_0_s1_agent:rf_source_ready
	wire         new_sdram_controller_0_s1_agent_rf_source_startofpacket;                   // new_sdram_controller_0_s1_agent:rf_source_startofpacket -> new_sdram_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire         new_sdram_controller_0_s1_agent_rf_source_endofpacket;                     // new_sdram_controller_0_s1_agent:rf_source_endofpacket -> new_sdram_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire         new_sdram_controller_0_s1_agent_rsp_fifo_out_valid;                        // new_sdram_controller_0_s1_agent_rsp_fifo:out_valid -> new_sdram_controller_0_s1_agent:rf_sink_valid
	wire  [77:0] new_sdram_controller_0_s1_agent_rsp_fifo_out_data;                         // new_sdram_controller_0_s1_agent_rsp_fifo:out_data -> new_sdram_controller_0_s1_agent:rf_sink_data
	wire         new_sdram_controller_0_s1_agent_rsp_fifo_out_ready;                        // new_sdram_controller_0_s1_agent:rf_sink_ready -> new_sdram_controller_0_s1_agent_rsp_fifo:out_ready
	wire         new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket;                // new_sdram_controller_0_s1_agent_rsp_fifo:out_startofpacket -> new_sdram_controller_0_s1_agent:rf_sink_startofpacket
	wire         new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket;                  // new_sdram_controller_0_s1_agent_rsp_fifo:out_endofpacket -> new_sdram_controller_0_s1_agent:rf_sink_endofpacket
	wire         new_sdram_controller_0_s1_agent_rdata_fifo_src_valid;                      // new_sdram_controller_0_s1_agent:rdata_fifo_src_valid -> new_sdram_controller_0_s1_agent_rdata_fifo:in_valid
	wire  [17:0] new_sdram_controller_0_s1_agent_rdata_fifo_src_data;                       // new_sdram_controller_0_s1_agent:rdata_fifo_src_data -> new_sdram_controller_0_s1_agent_rdata_fifo:in_data
	wire         new_sdram_controller_0_s1_agent_rdata_fifo_src_ready;                      // new_sdram_controller_0_s1_agent_rdata_fifo:in_ready -> new_sdram_controller_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> new_sdram_controller_0_s1_agent:cp_valid
	wire  [76:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> new_sdram_controller_0_s1_agent:cp_data
	wire         cmd_mux_src_ready;                                                         // new_sdram_controller_0_s1_agent:cp_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> new_sdram_controller_0_s1_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> new_sdram_controller_0_s1_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> new_sdram_controller_0_s1_agent:cp_endofpacket
	wire         bridge_0_avalon_master_agent_cp_valid;                                     // bridge_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [76:0] bridge_0_avalon_master_agent_cp_data;                                      // bridge_0_avalon_master_agent:cp_data -> router:sink_data
	wire         bridge_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> bridge_0_avalon_master_agent:cp_ready
	wire         bridge_0_avalon_master_agent_cp_startofpacket;                             // bridge_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         bridge_0_avalon_master_agent_cp_endofpacket;                               // bridge_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                          // router:src_valid -> cmd_demux:sink_valid
	wire  [76:0] router_src_data;                                                           // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                          // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                                        // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                  // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                    // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         new_sdram_controller_0_s1_agent_rp_valid;                                  // new_sdram_controller_0_s1_agent:rp_valid -> router_001:sink_valid
	wire  [76:0] new_sdram_controller_0_s1_agent_rp_data;                                   // new_sdram_controller_0_s1_agent:rp_data -> router_001:sink_data
	wire         new_sdram_controller_0_s1_agent_rp_ready;                                  // router_001:sink_ready -> new_sdram_controller_0_s1_agent:rp_ready
	wire         new_sdram_controller_0_s1_agent_rp_startofpacket;                          // new_sdram_controller_0_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         new_sdram_controller_0_s1_agent_rp_endofpacket;                            // new_sdram_controller_0_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                      // router_001:src_valid -> rsp_demux:sink_valid
	wire  [76:0] router_001_src_data;                                                       // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                      // rsp_demux:sink_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                                    // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                              // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> crosser:in_valid
	wire  [76:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> crosser:in_data
	wire         cmd_demux_src0_ready;                                                      // crosser:in_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> crosser:in_channel
	wire         cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                         // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [76:0] crosser_out_data;                                                          // crosser:out_data -> cmd_mux:sink0_data
	wire         crosser_out_ready;                                                         // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [0:0] crosser_out_channel;                                                       // crosser:out_channel -> cmd_mux:sink0_channel
	wire         crosser_out_startofpacket;                                                 // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                   // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> crosser_001:in_valid
	wire  [76:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> crosser_001:in_data
	wire         rsp_demux_src0_ready;                                                      // crosser_001:in_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                     // crosser_001:out_valid -> rsp_mux:sink0_valid
	wire  [76:0] crosser_001_out_data;                                                      // crosser_001:out_data -> rsp_mux:sink0_data
	wire         crosser_001_out_ready;                                                     // rsp_mux:sink0_ready -> crosser_001:out_ready
	wire   [0:0] crosser_001_out_channel;                                                   // crosser_001:out_channel -> rsp_mux:sink0_channel
	wire         crosser_001_out_startofpacket;                                             // crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                               // crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         new_sdram_controller_0_s1_agent_rdata_fifo_out_valid;                      // new_sdram_controller_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [17:0] new_sdram_controller_0_s1_agent_rdata_fifo_out_data;                       // new_sdram_controller_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         new_sdram_controller_0_s1_agent_rdata_fifo_out_ready;                      // avalon_st_adapter:in_0_ready -> new_sdram_controller_0_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                             // avalon_st_adapter:out_0_valid -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_valid
	wire  [17:0] avalon_st_adapter_out_0_data;                                              // avalon_st_adapter:out_0_data -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                             // new_sdram_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                             // avalon_st_adapter:out_0_error -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) bridge_0_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (bridge_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (bridge_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (bridge_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (bridge_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (bridge_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (bridge_0_avalon_master_read),                                               //                          .read
		.av_readdata            (bridge_0_avalon_master_readdata),                                           //                          .readdata
		.av_write               (bridge_0_avalon_master_write),                                              //                          .write
		.av_writedata           (bridge_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) new_sdram_controller_0_s1_translator (
		.clk                    (altpll_0_c0_clk),                                          //                      clk.clk
		.reset                  (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (new_sdram_controller_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (new_sdram_controller_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (new_sdram_controller_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (new_sdram_controller_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (new_sdram_controller_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (new_sdram_controller_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (new_sdram_controller_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (new_sdram_controller_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (new_sdram_controller_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (new_sdram_controller_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (new_sdram_controller_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (new_sdram_controller_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (new_sdram_controller_0_s1_write),                          //                         .write
		.av_read                (new_sdram_controller_0_s1_read),                           //                         .read
		.av_readdata            (new_sdram_controller_0_s1_readdata),                       //                         .readdata
		.av_writedata           (new_sdram_controller_0_s1_writedata),                      //                         .writedata
		.av_byteenable          (new_sdram_controller_0_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (new_sdram_controller_0_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (new_sdram_controller_0_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (new_sdram_controller_0_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (76),
		.PKT_ORI_BURST_SIZE_L      (74),
		.PKT_RESPONSE_STATUS_H     (73),
		.PKT_RESPONSE_STATUS_L     (72),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (71),
		.PKT_CACHE_L               (68),
		.PKT_THREAD_ID_H           (64),
		.PKT_THREAD_ID_L           (64),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (49),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (67),
		.PKT_PROTECTION_L          (65),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (62),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (63),
		.PKT_DEST_ID_L             (63),
		.ST_DATA_W                 (77),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) bridge_0_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (bridge_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (bridge_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (bridge_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (bridge_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (bridge_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (bridge_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (bridge_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (76),
		.PKT_ORI_BURST_SIZE_L      (74),
		.PKT_RESPONSE_STATUS_H     (73),
		.PKT_RESPONSE_STATUS_L     (72),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (67),
		.PKT_PROTECTION_L          (65),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (62),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (63),
		.PKT_DEST_ID_L             (63),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (77),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) new_sdram_controller_0_s1_agent (
		.clk                     (altpll_0_c0_clk),                                            //             clk.clk
		.reset                   (new_sdram_controller_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (new_sdram_controller_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (new_sdram_controller_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (new_sdram_controller_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (new_sdram_controller_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (new_sdram_controller_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (new_sdram_controller_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (new_sdram_controller_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (new_sdram_controller_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (new_sdram_controller_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (new_sdram_controller_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (new_sdram_controller_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (new_sdram_controller_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (new_sdram_controller_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (new_sdram_controller_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (new_sdram_controller_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (new_sdram_controller_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                        //                .channel
		.rf_sink_ready           (new_sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (new_sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (new_sdram_controller_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (new_sdram_controller_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (new_sdram_controller_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (new_sdram_controller_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (new_sdram_controller_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (new_sdram_controller_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (new_sdram_controller_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (new_sdram_controller_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (new_sdram_controller_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (78),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) new_sdram_controller_0_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (new_sdram_controller_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (new_sdram_controller_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (new_sdram_controller_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (new_sdram_controller_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (new_sdram_controller_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (new_sdram_controller_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (new_sdram_controller_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (new_sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (new_sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) new_sdram_controller_0_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                                          //       clk.clk
		.reset             (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (new_sdram_controller_0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (new_sdram_controller_0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (new_sdram_controller_0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (new_sdram_controller_0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (new_sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (new_sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	sdram_interface_mm_interconnect_0_router router (
		.sink_ready         (bridge_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (bridge_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (bridge_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (bridge_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (bridge_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	sdram_interface_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (new_sdram_controller_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (new_sdram_controller_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (new_sdram_controller_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (new_sdram_controller_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (new_sdram_controller_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (altpll_0_c0_clk),                                          //       clk.clk
		.reset              (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	sdram_interface_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                              //       clk.clk
		.reset              (bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                           //      sink.ready
		.sink_channel       (router_src_channel),                         //          .channel
		.sink_data          (router_src_data),                            //          .data
		.sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_src0_data),                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                  //          .endofpacket
	);

	sdram_interface_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c0_clk),                                          //       clk.clk
		.reset               (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                        //          .valid
		.src_data            (cmd_mux_src_data),                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                        //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                        //          .valid
		.sink0_channel       (crosser_out_channel),                                      //          .channel
		.sink0_data          (crosser_out_data),                                         //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                   //          .endofpacket
	);

	sdram_interface_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (altpll_0_c0_clk),                                          //       clk.clk
		.reset              (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                     //      sink.ready
		.sink_channel       (router_001_src_channel),                                   //          .channel
		.sink_data          (router_001_src_data),                                      //          .data
		.sink_startofpacket (router_001_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_001_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                //          .endofpacket
	);

	sdram_interface_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                              //       clk.clk
		.reset               (bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                          //          .valid
		.src_data            (rsp_mux_src_data),                           //          .data
		.src_channel         (rsp_mux_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                      //          .valid
		.sink0_channel       (crosser_001_out_channel),                    //          .channel
		.sink0_data          (crosser_001_out_data),                       //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                 //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (77),
		.BITS_PER_SYMBOL     (77),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                            //        in_clk.clk
		.in_reset          (bridge_0_reset_reset_bridge_in_reset_reset),               //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                          //       out_clk.clk
		.out_reset         (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                     //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                     //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                               //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                   //              .channel
		.in_data           (cmd_demux_src0_data),                                      //              .data
		.out_ready         (crosser_out_ready),                                        //           out.ready
		.out_valid         (crosser_out_valid),                                        //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_out_channel),                                      //              .channel
		.out_data          (crosser_out_data),                                         //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (77),
		.BITS_PER_SYMBOL     (77),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (1),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_0_c0_clk),                                          //        in_clk.clk
		.in_reset          (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                            //       out_clk.clk
		.out_reset         (bridge_0_reset_reset_bridge_in_reset_reset),               // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                     //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                     //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                               //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                   //              .channel
		.in_data           (rsp_demux_src0_data),                                      //              .data
		.out_ready         (crosser_001_out_ready),                                    //           out.ready
		.out_valid         (crosser_001_out_valid),                                    //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                  //              .channel
		.out_data          (crosser_001_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	sdram_interface_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (new_sdram_controller_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (new_sdram_controller_0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (new_sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (new_sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

endmodule
